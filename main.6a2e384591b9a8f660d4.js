(function(){var __webpack_modules__={563:function(module,exports,__webpack_require__){eval('/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * jQuery JavaScript Library v3.6.0\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2021-03-02T17:08Z\n */\n(function (global, factory) {\n  "use strict";\n\n  if (( false ? 0 : _typeof(module)) === "object" && _typeof(module.exports) === "object") {\n    // For CommonJS and CommonJS-like environments where a proper `window`\n    // is present, execute the factory and get jQuery.\n    // For environments that do not have a `window` with a `document`\n    // (such as Node.js), expose a factory as module.exports.\n    // This accentuates the need for the creation of a real `window`.\n    // e.g. var jQuery = require("jquery")(window);\n    // See ticket #14549 for more info.\n    module.exports = global.document ? factory(global, true) : function (w) {\n      if (!w.document) {\n        throw new Error("jQuery requires a window with a document");\n      }\n\n      return factory(w);\n    };\n  } else {\n    factory(global);\n  } // Pass this if window is not defined yet\n\n})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {\n  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n  // enough that all such attempts are guarded in a try block.\n  "use strict";\n\n  var arr = [];\n  var getProto = Object.getPrototypeOf;\n  var _slice = arr.slice;\n  var flat = arr.flat ? function (array) {\n    return arr.flat.call(array);\n  } : function (array) {\n    return arr.concat.apply([], array);\n  };\n  var push = arr.push;\n  var indexOf = arr.indexOf;\n  var class2type = {};\n  var toString = class2type.toString;\n  var hasOwn = class2type.hasOwnProperty;\n  var fnToString = hasOwn.toString;\n  var ObjectFunctionString = fnToString.call(Object);\n  var support = {};\n\n  var isFunction = function isFunction(obj) {\n    // Support: Chrome <=57, Firefox <=52\n    // In some browsers, typeof returns "function" for HTML <object> elements\n    // (i.e., `typeof document.createElement( "object" ) === "function"`).\n    // We don\'t want to classify *any* DOM node as a function.\n    // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5\n    // Plus for old WebKit, typeof returns "function" for HTML collections\n    // (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)\n    return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";\n  };\n\n  var isWindow = function isWindow(obj) {\n    return obj != null && obj === obj.window;\n  };\n\n  var document = window.document;\n  var preservedScriptAttributes = {\n    type: true,\n    src: true,\n    nonce: true,\n    noModule: true\n  };\n\n  function DOMEval(code, node, doc) {\n    doc = doc || document;\n    var i,\n        val,\n        script = doc.createElement("script");\n    script.text = code;\n\n    if (node) {\n      for (i in preservedScriptAttributes) {\n        // Support: Firefox 64+, Edge 18+\n        // Some browsers don\'t support the "nonce" property on scripts.\n        // On the other hand, just using `getAttribute` is not enough as\n        // the `nonce` attribute is reset to an empty string whenever it\n        // becomes browsing-context connected.\n        // See https://github.com/whatwg/html/issues/2369\n        // See https://html.spec.whatwg.org/#nonce-attributes\n        // The `node.getAttribute` check was added for the sake of\n        // `jQuery.globalEval` so that it can fake a nonce-containing node\n        // via an object.\n        val = node[i] || node.getAttribute && node.getAttribute(i);\n\n        if (val) {\n          script.setAttribute(i, val);\n        }\n      }\n    }\n\n    doc.head.appendChild(script).parentNode.removeChild(script);\n  }\n\n  function toType(obj) {\n    if (obj == null) {\n      return obj + "";\n    } // Support: Android <=2.3 only (functionish RegExp)\n\n\n    return _typeof(obj) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : _typeof(obj);\n  }\n  /* global Symbol */\n  // Defining this global in .eslintrc.json would create a danger of using the global\n  // unguarded in another place, it seems safer to define global only for this module\n\n\n  var version = "3.6.0",\n      // Define a local copy of jQuery\n  jQuery = function jQuery(selector, context) {\n    // The jQuery object is actually just the init constructor \'enhanced\'\n    // Need init if jQuery is called (just allow error to be thrown if not included)\n    return new jQuery.fn.init(selector, context);\n  };\n\n  jQuery.fn = jQuery.prototype = {\n    // The current version of jQuery being used\n    jquery: version,\n    constructor: jQuery,\n    // The default length of a jQuery object is 0\n    length: 0,\n    toArray: function toArray() {\n      return _slice.call(this);\n    },\n    // Get the Nth element in the matched element set OR\n    // Get the whole matched element set as a clean array\n    get: function get(num) {\n      // Return all the elements in a clean array\n      if (num == null) {\n        return _slice.call(this);\n      } // Return just the one element from the set\n\n\n      return num < 0 ? this[num + this.length] : this[num];\n    },\n    // Take an array of elements and push it onto the stack\n    // (returning the new matched element set)\n    pushStack: function pushStack(elems) {\n      // Build a new jQuery matched element set\n      var ret = jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)\n\n      ret.prevObject = this; // Return the newly-formed element set\n\n      return ret;\n    },\n    // Execute a callback for every element in the matched set.\n    each: function each(callback) {\n      return jQuery.each(this, callback);\n    },\n    map: function map(callback) {\n      return this.pushStack(jQuery.map(this, function (elem, i) {\n        return callback.call(elem, i, elem);\n      }));\n    },\n    slice: function slice() {\n      return this.pushStack(_slice.apply(this, arguments));\n    },\n    first: function first() {\n      return this.eq(0);\n    },\n    last: function last() {\n      return this.eq(-1);\n    },\n    even: function even() {\n      return this.pushStack(jQuery.grep(this, function (_elem, i) {\n        return (i + 1) % 2;\n      }));\n    },\n    odd: function odd() {\n      return this.pushStack(jQuery.grep(this, function (_elem, i) {\n        return i % 2;\n      }));\n    },\n    eq: function eq(i) {\n      var len = this.length,\n          j = +i + (i < 0 ? len : 0);\n      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n    },\n    end: function end() {\n      return this.prevObject || this.constructor();\n    },\n    // For internal use only.\n    // Behaves like an Array\'s method, not like a jQuery method.\n    push: push,\n    sort: arr.sort,\n    splice: arr.splice\n  };\n\n  jQuery.extend = jQuery.fn.extend = function () {\n    var options,\n        name,\n        src,\n        copy,\n        copyIsArray,\n        clone,\n        target = arguments[0] || {},\n        i = 1,\n        length = arguments.length,\n        deep = false; // Handle a deep copy situation\n\n    if (typeof target === "boolean") {\n      deep = target; // Skip the boolean and the target\n\n      target = arguments[i] || {};\n      i++;\n    } // Handle case when target is a string or something (possible in deep copy)\n\n\n    if (_typeof(target) !== "object" && !isFunction(target)) {\n      target = {};\n    } // Extend jQuery itself if only one argument is passed\n\n\n    if (i === length) {\n      target = this;\n      i--;\n    }\n\n    for (; i < length; i++) {\n      // Only deal with non-null/undefined values\n      if ((options = arguments[i]) != null) {\n        // Extend the base object\n        for (name in options) {\n          copy = options[name]; // Prevent Object.prototype pollution\n          // Prevent never-ending loop\n\n          if (name === "__proto__" || target === copy) {\n            continue;\n          } // Recurse if we\'re merging plain objects or arrays\n\n\n          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n            src = target[name]; // Ensure proper type for the source value\n\n            if (copyIsArray && !Array.isArray(src)) {\n              clone = [];\n            } else if (!copyIsArray && !jQuery.isPlainObject(src)) {\n              clone = {};\n            } else {\n              clone = src;\n            }\n\n            copyIsArray = false; // Never move original objects, clone them\n\n            target[name] = jQuery.extend(deep, clone, copy); // Don\'t bring in undefined values\n          } else if (copy !== undefined) {\n            target[name] = copy;\n          }\n        }\n      }\n    } // Return the modified object\n\n\n    return target;\n  };\n\n  jQuery.extend({\n    // Unique for each copy of jQuery on the page\n    expando: "jQuery" + (version + Math.random()).replace(/\\D/g, ""),\n    // Assume jQuery is ready without the ready module\n    isReady: true,\n    error: function error(msg) {\n      throw new Error(msg);\n    },\n    noop: function noop() {},\n    isPlainObject: function isPlainObject(obj) {\n      var proto, Ctor; // Detect obvious negatives\n      // Use toString instead of jQuery.type to catch host objects\n\n      if (!obj || toString.call(obj) !== "[object Object]") {\n        return false;\n      }\n\n      proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain\n\n      if (!proto) {\n        return true;\n      } // Objects with prototype are plain iff they were constructed by a global Object function\n\n\n      Ctor = hasOwn.call(proto, "constructor") && proto.constructor;\n      return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;\n    },\n    isEmptyObject: function isEmptyObject(obj) {\n      var name;\n\n      for (name in obj) {\n        return false;\n      }\n\n      return true;\n    },\n    // Evaluates a script in a provided context; falls back to the global one\n    // if not specified.\n    globalEval: function globalEval(code, options, doc) {\n      DOMEval(code, {\n        nonce: options && options.nonce\n      }, doc);\n    },\n    each: function each(obj, callback) {\n      var length,\n          i = 0;\n\n      if (isArrayLike(obj)) {\n        length = obj.length;\n\n        for (; i < length; i++) {\n          if (callback.call(obj[i], i, obj[i]) === false) {\n            break;\n          }\n        }\n      } else {\n        for (i in obj) {\n          if (callback.call(obj[i], i, obj[i]) === false) {\n            break;\n          }\n        }\n      }\n\n      return obj;\n    },\n    // results is for internal usage only\n    makeArray: function makeArray(arr, results) {\n      var ret = results || [];\n\n      if (arr != null) {\n        if (isArrayLike(Object(arr))) {\n          jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);\n        } else {\n          push.call(ret, arr);\n        }\n      }\n\n      return ret;\n    },\n    inArray: function inArray(elem, arr, i) {\n      return arr == null ? -1 : indexOf.call(arr, elem, i);\n    },\n    // Support: Android <=4.0 only, PhantomJS 1 only\n    // push.apply(_, arraylike) throws on ancient WebKit\n    merge: function merge(first, second) {\n      var len = +second.length,\n          j = 0,\n          i = first.length;\n\n      for (; j < len; j++) {\n        first[i++] = second[j];\n      }\n\n      first.length = i;\n      return first;\n    },\n    grep: function grep(elems, callback, invert) {\n      var callbackInverse,\n          matches = [],\n          i = 0,\n          length = elems.length,\n          callbackExpect = !invert; // Go through the array, only saving the items\n      // that pass the validator function\n\n      for (; i < length; i++) {\n        callbackInverse = !callback(elems[i], i);\n\n        if (callbackInverse !== callbackExpect) {\n          matches.push(elems[i]);\n        }\n      }\n\n      return matches;\n    },\n    // arg is for internal usage only\n    map: function map(elems, callback, arg) {\n      var length,\n          value,\n          i = 0,\n          ret = []; // Go through the array, translating each of the items to their new values\n\n      if (isArrayLike(elems)) {\n        length = elems.length;\n\n        for (; i < length; i++) {\n          value = callback(elems[i], i, arg);\n\n          if (value != null) {\n            ret.push(value);\n          }\n        } // Go through every key on the object,\n\n      } else {\n        for (i in elems) {\n          value = callback(elems[i], i, arg);\n\n          if (value != null) {\n            ret.push(value);\n          }\n        }\n      } // Flatten any nested arrays\n\n\n      return flat(ret);\n    },\n    // A global GUID counter for objects\n    guid: 1,\n    // jQuery.support is not used in Core but other projects attach their\n    // properties to it so it needs to exist.\n    support: support\n  });\n\n  if (typeof Symbol === "function") {\n    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];\n  } // Populate the class2type map\n\n\n  jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (_i, name) {\n    class2type["[object " + name + "]"] = name.toLowerCase();\n  });\n\n  function isArrayLike(obj) {\n    // Support: real iOS 8.2 only (not reproducible in simulator)\n    // `in` check used to prevent JIT error (gh-2145)\n    // hasOwn isn\'t used here due to false negatives\n    // regarding Nodelist length in IE\n    var length = !!obj && "length" in obj && obj.length,\n        type = toType(obj);\n\n    if (isFunction(obj) || isWindow(obj)) {\n      return false;\n    }\n\n    return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;\n  }\n\n  var Sizzle =\n  /*!\n   * Sizzle CSS Selector Engine v2.3.6\n   * https://sizzlejs.com/\n   *\n   * Copyright JS Foundation and other contributors\n   * Released under the MIT license\n   * https://js.foundation/\n   *\n   * Date: 2021-02-16\n   */\n  function (window) {\n    var i,\n        support,\n        Expr,\n        getText,\n        isXML,\n        tokenize,\n        compile,\n        select,\n        outermostContext,\n        sortInput,\n        hasDuplicate,\n        // Local document vars\n    setDocument,\n        document,\n        docElem,\n        documentIsHTML,\n        rbuggyQSA,\n        rbuggyMatches,\n        matches,\n        contains,\n        // Instance-specific data\n    expando = "sizzle" + 1 * new Date(),\n        preferredDoc = window.document,\n        dirruns = 0,\n        done = 0,\n        classCache = createCache(),\n        tokenCache = createCache(),\n        compilerCache = createCache(),\n        nonnativeSelectorCache = createCache(),\n        sortOrder = function sortOrder(a, b) {\n      if (a === b) {\n        hasDuplicate = true;\n      }\n\n      return 0;\n    },\n        // Instance methods\n    hasOwn = {}.hasOwnProperty,\n        arr = [],\n        pop = arr.pop,\n        pushNative = arr.push,\n        push = arr.push,\n        slice = arr.slice,\n        // Use a stripped-down indexOf as it\'s faster than native\n    // https://jsperf.com/thor-indexof-vs-for/5\n    indexOf = function indexOf(list, elem) {\n      var i = 0,\n          len = list.length;\n\n      for (; i < len; i++) {\n        if (list[i] === elem) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n        booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" + "ismap|loop|multiple|open|readonly|required|scoped",\n        // Regular expressions\n    // http://www.w3.org/TR/css3-selectors/#whitespace\n    whitespace = "[\\\\x20\\\\t\\\\r\\\\n\\\\f]",\n        // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n    identifier = "(?:\\\\\\\\[\\\\da-fA-F]{1,6}" + whitespace + "?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+",\n        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n    attributes = "\\\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)\n    "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5]\n    // or strings [capture 3 or capture 4]"\n    "*(?:\'((?:\\\\\\\\.|[^\\\\\\\\\'])*)\'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\"|(" + identifier + "))|)" + whitespace + "*\\\\]",\n        pseudos = ":(" + identifier + ")(?:\\\\((" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n    // 1. quoted (capture 3; capture 4 or capture 5)\n    "(\'((?:\\\\\\\\.|[^\\\\\\\\\'])*)\'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\")|" + // 2. simple (capture 6)\n    "((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|" + attributes + ")*)|" + // 3. anything else (capture 2)\n    ".*" + ")\\\\)|)",\n        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n    rwhitespace = new RegExp(whitespace + "+", "g"),\n        rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)" + whitespace + "+$", "g"),\n        rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),\n        rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),\n        rdescend = new RegExp(whitespace + "|>"),\n        rpseudo = new RegExp(pseudos),\n        ridentifier = new RegExp("^" + identifier + "$"),\n        matchExpr = {\n      "ID": new RegExp("^#(" + identifier + ")"),\n      "CLASS": new RegExp("^\\\\.(" + identifier + ")"),\n      "TAG": new RegExp("^(" + identifier + "|[*])"),\n      "ATTR": new RegExp("^" + attributes),\n      "PSEUDO": new RegExp("^" + pseudos),\n      "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(" + whitespace + "*(even|odd|(([+-]|)(\\\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\\\d+)|))" + whitespace + "*\\\\)|)", "i"),\n      "bool": new RegExp("^(?:" + booleans + ")$", "i"),\n      // For use in libraries implementing .is()\n      // We use this for POS matching in `select`\n      "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(" + whitespace + "*((?:-\\\\d)?\\\\d*)" + whitespace + "*\\\\)|)(?=[^-]|$)", "i")\n    },\n        rhtml = /HTML$/i,\n        rinputs = /^(?:input|select|textarea|button)$/i,\n        rheader = /^h\\d$/i,\n        rnative = /^[^{]+\\{\\s*\\[native \\w/,\n        // Easily-parseable/retrievable ID or TAG or CLASS selectors\n    rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n        rsibling = /[+~]/,\n        // CSS escapes\n    // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n    runescape = new RegExp("\\\\\\\\[\\\\da-fA-F]{1,6}" + whitespace + "?|\\\\\\\\([^\\\\r\\\\n\\\\f])", "g"),\n        funescape = function funescape(escape, nonHex) {\n      var high = "0x" + escape.slice(1) - 0x10000;\n      return nonHex ? // Strip the backslash prefix from a non-hex escape sequence\n      nonHex : // Replace a hexadecimal escape sequence with the encoded Unicode code point\n      // Support: IE <=11+\n      // For values outside the Basic Multilingual Plane (BMP), manually construct a\n      // surrogate pair\n      high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);\n    },\n        // CSS string/identifier serialization\n    // https://drafts.csswg.org/cssom/#common-serializing-idioms\n    rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n        fcssescape = function fcssescape(ch, asCodePoint) {\n      if (asCodePoint) {\n        // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n        if (ch === "\\0") {\n          return "\\uFFFD";\n        } // Control characters and (dependent upon position) numbers get escaped as code points\n\n\n        return ch.slice(0, -1) + "\\\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";\n      } // Other potentially-special ASCII characters get backslash-escaped\n\n\n      return "\\\\" + ch;\n    },\n        // Used for iframes\n    // See setDocument()\n    // Removing the function wrapper causes a "Permission Denied"\n    // error in IE\n    unloadHandler = function unloadHandler() {\n      setDocument();\n    },\n        inDisabledFieldset = addCombinator(function (elem) {\n      return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";\n    }, {\n      dir: "parentNode",\n      next: "legend"\n    }); // Optimize for push.apply( _, NodeList )\n\n\n    try {\n      push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0\n      // Detect silently failing push.apply\n      // eslint-disable-next-line no-unused-expressions\n\n      arr[preferredDoc.childNodes.length].nodeType;\n    } catch (e) {\n      push = {\n        apply: arr.length ? // Leverage slice if possible\n        function (target, els) {\n          pushNative.apply(target, slice.call(els));\n        } : // Support: IE<9\n        // Otherwise append directly\n        function (target, els) {\n          var j = target.length,\n              i = 0; // Can\'t trust NodeList.length\n\n          while (target[j++] = els[i++]) {}\n\n          target.length = j - 1;\n        }\n      };\n    }\n\n    function Sizzle(selector, context, results, seed) {\n      var m,\n          i,\n          elem,\n          nid,\n          match,\n          groups,\n          newSelector,\n          newContext = context && context.ownerDocument,\n          // nodeType defaults to 9, since context defaults to document\n      nodeType = context ? context.nodeType : 9;\n      results = results || []; // Return early from calls with invalid selector or context\n\n      if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {\n        return results;\n      } // Try to shortcut find operations (as opposed to filters) in HTML documents\n\n\n      if (!seed) {\n        setDocument(context);\n        context = context || document;\n\n        if (documentIsHTML) {\n          // If the selector is sufficiently simple, try using a "get*By*" DOM method\n          // (excepting DocumentFragment context, where the methods don\'t exist)\n          if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {\n            // ID selector\n            if (m = match[1]) {\n              // Document context\n              if (nodeType === 9) {\n                if (elem = context.getElementById(m)) {\n                  // Support: IE, Opera, Webkit\n                  // TODO: identify versions\n                  // getElementById can match elements by name instead of ID\n                  if (elem.id === m) {\n                    results.push(elem);\n                    return results;\n                  }\n                } else {\n                  return results;\n                } // Element context\n\n              } else {\n                // Support: IE, Opera, Webkit\n                // TODO: identify versions\n                // getElementById can match elements by name instead of ID\n                if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {\n                  results.push(elem);\n                  return results;\n                }\n              } // Type selector\n\n            } else if (match[2]) {\n              push.apply(results, context.getElementsByTagName(selector));\n              return results; // Class selector\n            } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {\n              push.apply(results, context.getElementsByClassName(m));\n              return results;\n            }\n          } // Take advantage of querySelectorAll\n\n\n          if (support.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && (nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {\n            newSelector = selector;\n            newContext = context; // qSA considers elements outside a scoping root when evaluating child or\n            // descendant combinators, which is not what we want.\n            // In such cases, we work around the behavior by prefixing every selector in the\n            // list with an ID selector referencing the scope context.\n            // The technique has to be used as well when a leading combinator is used\n            // as such selectors are not recognized by querySelectorAll.\n            // Thanks to Andrew Dupont for this technique.\n\n            if (nodeType === 1 && (rdescend.test(selector) || rcombinators.test(selector))) {\n              // Expand context for sibling selectors\n              newContext = rsibling.test(selector) && testContext(context.parentNode) || context; // We can use :scope instead of the ID hack if the browser\n              // supports it & if we\'re not changing the context.\n\n              if (newContext !== context || !support.scope) {\n                // Capture the context ID, setting it first if necessary\n                if (nid = context.getAttribute("id")) {\n                  nid = nid.replace(rcssescape, fcssescape);\n                } else {\n                  context.setAttribute("id", nid = expando);\n                }\n              } // Prefix every selector in the list\n\n\n              groups = tokenize(selector);\n              i = groups.length;\n\n              while (i--) {\n                groups[i] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i]);\n              }\n\n              newSelector = groups.join(",");\n            }\n\n            try {\n              push.apply(results, newContext.querySelectorAll(newSelector));\n              return results;\n            } catch (qsaError) {\n              nonnativeSelectorCache(selector, true);\n            } finally {\n              if (nid === expando) {\n                context.removeAttribute("id");\n              }\n            }\n          }\n        }\n      } // All others\n\n\n      return select(selector.replace(rtrim, "$1"), context, results, seed);\n    }\n    /**\n     * Create key-value caches of limited size\n     * @returns {function(string, object)} Returns the Object data after storing it on itself with\n     *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n     *\tdeleting the oldest entry\n     */\n\n\n    function createCache() {\n      var keys = [];\n\n      function cache(key, value) {\n        // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)\n        if (keys.push(key + " ") > Expr.cacheLength) {\n          // Only keep the most recent entries\n          delete cache[keys.shift()];\n        }\n\n        return cache[key + " "] = value;\n      }\n\n      return cache;\n    }\n    /**\n     * Mark a function for special use by Sizzle\n     * @param {Function} fn The function to mark\n     */\n\n\n    function markFunction(fn) {\n      fn[expando] = true;\n      return fn;\n    }\n    /**\n     * Support testing using an element\n     * @param {Function} fn Passed the created element and returns a boolean result\n     */\n\n\n    function assert(fn) {\n      var el = document.createElement("fieldset");\n\n      try {\n        return !!fn(el);\n      } catch (e) {\n        return false;\n      } finally {\n        // Remove from its parent by default\n        if (el.parentNode) {\n          el.parentNode.removeChild(el);\n        } // release memory in IE\n\n\n        el = null;\n      }\n    }\n    /**\n     * Adds the same handler for all of the specified attrs\n     * @param {String} attrs Pipe-separated list of attributes\n     * @param {Function} handler The method that will be applied\n     */\n\n\n    function addHandle(attrs, handler) {\n      var arr = attrs.split("|"),\n          i = arr.length;\n\n      while (i--) {\n        Expr.attrHandle[arr[i]] = handler;\n      }\n    }\n    /**\n     * Checks document order of two siblings\n     * @param {Element} a\n     * @param {Element} b\n     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n     */\n\n\n    function siblingCheck(a, b) {\n      var cur = b && a,\n          diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex; // Use IE sourceIndex if available on both nodes\n\n      if (diff) {\n        return diff;\n      } // Check if b follows a\n\n\n      if (cur) {\n        while (cur = cur.nextSibling) {\n          if (cur === b) {\n            return -1;\n          }\n        }\n      }\n\n      return a ? 1 : -1;\n    }\n    /**\n     * Returns a function to use in pseudos for input types\n     * @param {String} type\n     */\n\n\n    function createInputPseudo(type) {\n      return function (elem) {\n        var name = elem.nodeName.toLowerCase();\n        return name === "input" && elem.type === type;\n      };\n    }\n    /**\n     * Returns a function to use in pseudos for buttons\n     * @param {String} type\n     */\n\n\n    function createButtonPseudo(type) {\n      return function (elem) {\n        var name = elem.nodeName.toLowerCase();\n        return (name === "input" || name === "button") && elem.type === type;\n      };\n    }\n    /**\n     * Returns a function to use in pseudos for :enabled/:disabled\n     * @param {Boolean} disabled true for :disabled; false for :enabled\n     */\n\n\n    function createDisabledPseudo(disabled) {\n      // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n      return function (elem) {\n        // Only certain elements can match :enabled or :disabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n        if ("form" in elem) {\n          // Check for inherited disabledness on relevant non-disabled elements:\n          // * listed form-associated elements in a disabled fieldset\n          //   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n          //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n          // * option elements in a disabled optgroup\n          //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n          // All such elements have a "form" property.\n          if (elem.parentNode && elem.disabled === false) {\n            // Option elements defer to a parent optgroup if present\n            if ("label" in elem) {\n              if ("label" in elem.parentNode) {\n                return elem.parentNode.disabled === disabled;\n              } else {\n                return elem.disabled === disabled;\n              }\n            } // Support: IE 6 - 11\n            // Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\n\n            return elem.isDisabled === disabled || // Where there is no isDisabled, check manually\n\n            /* jshint -W018 */\n            elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;\n          }\n\n          return elem.disabled === disabled; // Try to winnow out elements that can\'t be disabled before trusting the disabled property.\n          // Some victims get caught in our net (label, legend, menu, track), but it shouldn\'t\n          // even exist on them, let alone have a boolean value.\n        } else if ("label" in elem) {\n          return elem.disabled === disabled;\n        } // Remaining elements are neither :enabled nor :disabled\n\n\n        return false;\n      };\n    }\n    /**\n     * Returns a function to use in pseudos for positionals\n     * @param {Function} fn\n     */\n\n\n    function createPositionalPseudo(fn) {\n      return markFunction(function (argument) {\n        argument = +argument;\n        return markFunction(function (seed, matches) {\n          var j,\n              matchIndexes = fn([], seed.length, argument),\n              i = matchIndexes.length; // Match elements found at the specified indexes\n\n          while (i--) {\n            if (seed[j = matchIndexes[i]]) {\n              seed[j] = !(matches[j] = seed[j]);\n            }\n          }\n        });\n      });\n    }\n    /**\n     * Checks a node for validity as a Sizzle context\n     * @param {Element|Object=} context\n     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n     */\n\n\n    function testContext(context) {\n      return context && typeof context.getElementsByTagName !== "undefined" && context;\n    } // Expose support vars for convenience\n\n\n    support = Sizzle.support = {};\n    /**\n     * Detects XML nodes\n     * @param {Element|Object} elem An element or a document\n     * @returns {Boolean} True iff elem is a non-HTML XML node\n     */\n\n    isXML = Sizzle.isXML = function (elem) {\n      var namespace = elem && elem.namespaceURI,\n          docElem = elem && (elem.ownerDocument || elem).documentElement; // Support: IE <=8\n      // Assume HTML when documentElement doesn\'t yet exist, such as inside loading iframes\n      // https://bugs.jquery.com/ticket/4833\n\n      return !rhtml.test(namespace || docElem && docElem.nodeName || "HTML");\n    };\n    /**\n     * Sets document-related variables once based on the current document\n     * @param {Element|Object} [doc] An element or document object to use to set the document\n     * @returns {Object} Returns the current document\n     */\n\n\n    setDocument = Sizzle.setDocument = function (node) {\n      var hasCompare,\n          subWindow,\n          doc = node ? node.ownerDocument || node : preferredDoc; // Return early if doc is invalid or already selected\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n\n      if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {\n        return document;\n      } // Update global variables\n\n\n      document = doc;\n      docElem = document.documentElement;\n      documentIsHTML = !isXML(document); // Support: IE 9 - 11+, Edge 12 - 18+\n      // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n\n      if (preferredDoc != document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {\n        // Support: IE 11, Edge\n        if (subWindow.addEventListener) {\n          subWindow.addEventListener("unload", unloadHandler, false); // Support: IE 9 - 10 only\n        } else if (subWindow.attachEvent) {\n          subWindow.attachEvent("onunload", unloadHandler);\n        }\n      } // Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,\n      // Safari 4 - 5 only, Opera <=11.6 - 12.x only\n      // IE/Edge & older browsers don\'t support the :scope pseudo-class.\n      // Support: Safari 6.0 only\n      // Safari 6.0 supports :scope but it\'s an alias of :root there.\n\n\n      support.scope = assert(function (el) {\n        docElem.appendChild(el).appendChild(document.createElement("div"));\n        return typeof el.querySelectorAll !== "undefined" && !el.querySelectorAll(":scope fieldset div").length;\n      });\n      /* Attributes\n      ---------------------------------------------------------------------- */\n      // Support: IE<8\n      // Verify that getAttribute really returns attributes and not properties\n      // (excepting IE8 booleans)\n\n      support.attributes = assert(function (el) {\n        el.className = "i";\n        return !el.getAttribute("className");\n      });\n      /* getElement(s)By*\n      ---------------------------------------------------------------------- */\n      // Check if getElementsByTagName("*") returns only elements\n\n      support.getElementsByTagName = assert(function (el) {\n        el.appendChild(document.createComment(""));\n        return !el.getElementsByTagName("*").length;\n      }); // Support: IE<9\n\n      support.getElementsByClassName = rnative.test(document.getElementsByClassName); // Support: IE<10\n      // Check if getElementById returns elements by name\n      // The broken getElementById methods don\'t pick up programmatically-set names,\n      // so use a roundabout getElementsByName test\n\n      support.getById = assert(function (el) {\n        docElem.appendChild(el).id = expando;\n        return !document.getElementsByName || !document.getElementsByName(expando).length;\n      }); // ID filter and find\n\n      if (support.getById) {\n        Expr.filter["ID"] = function (id) {\n          var attrId = id.replace(runescape, funescape);\n          return function (elem) {\n            return elem.getAttribute("id") === attrId;\n          };\n        };\n\n        Expr.find["ID"] = function (id, context) {\n          if (typeof context.getElementById !== "undefined" && documentIsHTML) {\n            var elem = context.getElementById(id);\n            return elem ? [elem] : [];\n          }\n        };\n      } else {\n        Expr.filter["ID"] = function (id) {\n          var attrId = id.replace(runescape, funescape);\n          return function (elem) {\n            var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");\n            return node && node.value === attrId;\n          };\n        }; // Support: IE 6 - 7 only\n        // getElementById is not reliable as a find shortcut\n\n\n        Expr.find["ID"] = function (id, context) {\n          if (typeof context.getElementById !== "undefined" && documentIsHTML) {\n            var node,\n                i,\n                elems,\n                elem = context.getElementById(id);\n\n            if (elem) {\n              // Verify the id attribute\n              node = elem.getAttributeNode("id");\n\n              if (node && node.value === id) {\n                return [elem];\n              } // Fall back on getElementsByName\n\n\n              elems = context.getElementsByName(id);\n              i = 0;\n\n              while (elem = elems[i++]) {\n                node = elem.getAttributeNode("id");\n\n                if (node && node.value === id) {\n                  return [elem];\n                }\n              }\n            }\n\n            return [];\n          }\n        };\n      } // Tag\n\n\n      Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {\n        if (typeof context.getElementsByTagName !== "undefined") {\n          return context.getElementsByTagName(tag); // DocumentFragment nodes don\'t have gEBTN\n        } else if (support.qsa) {\n          return context.querySelectorAll(tag);\n        }\n      } : function (tag, context) {\n        var elem,\n            tmp = [],\n            i = 0,\n            // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n        results = context.getElementsByTagName(tag); // Filter out possible comments\n\n        if (tag === "*") {\n          while (elem = results[i++]) {\n            if (elem.nodeType === 1) {\n              tmp.push(elem);\n            }\n          }\n\n          return tmp;\n        }\n\n        return results;\n      }; // Class\n\n      Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {\n        if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {\n          return context.getElementsByClassName(className);\n        }\n      };\n      /* QSA/matchesSelector\n      ---------------------------------------------------------------------- */\n      // QSA and matchesSelector support\n      // matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\n\n      rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)\n      // We allow this because of a bug in IE8/9 that throws an error\n      // whenever `document.activeElement` is accessed on an iframe\n      // So, we allow :focus to pass through QSA all the time to avoid the IE error\n      // See https://bugs.jquery.com/ticket/13378\n\n      rbuggyQSA = [];\n\n      if (support.qsa = rnative.test(document.querySelectorAll)) {\n        // Build QSA regex\n        // Regex strategy adopted from Diego Perini\n        assert(function (el) {\n          var input; // Select is set to empty string on purpose\n          // This is to test IE\'s treatment of not explicitly\n          // setting a boolean content attribute,\n          // since its presence should be enough\n          // https://bugs.jquery.com/ticket/12359\n\n          docElem.appendChild(el).innerHTML = "<a id=\'" + expando + "\'></a>" + "<select id=\'" + expando + "-\\r\\\\\' msallowcapture=\'\'>" + "<option selected=\'\'></option></select>"; // Support: IE8, Opera 11-12.16\n          // Nothing should be selected when empty strings follow ^= or $= or *=\n          // The test attribute must be unknown in Opera but "safe" for WinRT\n          // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\n          if (el.querySelectorAll("[msallowcapture^=\'\']").length) {\n            rbuggyQSA.push("[*^$]=" + whitespace + "*(?:\'\'|\\"\\")");\n          } // Support: IE8\n          // Boolean attributes and "value" are not treated correctly\n\n\n          if (!el.querySelectorAll("[selected]").length) {\n            rbuggyQSA.push("\\\\[" + whitespace + "*(?:value|" + booleans + ")");\n          } // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\n\n          if (!el.querySelectorAll("[id~=" + expando + "-]").length) {\n            rbuggyQSA.push("~=");\n          } // Support: IE 11+, Edge 15 - 18+\n          // IE 11/Edge don\'t find elements on a `[name=\'\']` query in some cases.\n          // Adding a temporary attribute to the document before the selection works\n          // around the issue.\n          // Interestingly, IE 10 & older don\'t seem to have the issue.\n\n\n          input = document.createElement("input");\n          input.setAttribute("name", "");\n          el.appendChild(input);\n\n          if (!el.querySelectorAll("[name=\'\']").length) {\n            rbuggyQSA.push("\\\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + "*(?:\'\'|\\"\\")");\n          } // Webkit/Opera - :checked should return selected option elements\n          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n          // IE8 throws error here and will not see later tests\n\n\n          if (!el.querySelectorAll(":checked").length) {\n            rbuggyQSA.push(":checked");\n          } // Support: Safari 8+, iOS 8+\n          // https://bugs.webkit.org/show_bug.cgi?id=136851\n          // In-page `selector#id sibling-combinator selector` fails\n\n\n          if (!el.querySelectorAll("a#" + expando + "+*").length) {\n            rbuggyQSA.push(".#.+[+~]");\n          } // Support: Firefox <=3.6 - 5 only\n          // Old Firefox doesn\'t throw on a badly-escaped identifier.\n\n\n          el.querySelectorAll("\\\\\\f");\n          rbuggyQSA.push("[\\\\r\\\\n\\\\f]");\n        });\n        assert(function (el) {\n          el.innerHTML = "<a href=\'\' disabled=\'disabled\'></a>" + "<select disabled=\'disabled\'><option/></select>"; // Support: Windows 8 Native Apps\n          // The type and name attributes are restricted during .innerHTML assignment\n\n          var input = document.createElement("input");\n          input.setAttribute("type", "hidden");\n          el.appendChild(input).setAttribute("name", "D"); // Support: IE8\n          // Enforce case-sensitivity of name attribute\n\n          if (el.querySelectorAll("[name=d]").length) {\n            rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");\n          } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n          // IE8 throws error here and will not see later tests\n\n\n          if (el.querySelectorAll(":enabled").length !== 2) {\n            rbuggyQSA.push(":enabled", ":disabled");\n          } // Support: IE9-11+\n          // IE\'s :disabled selector does not pick up the children of disabled fieldsets\n\n\n          docElem.appendChild(el).disabled = true;\n\n          if (el.querySelectorAll(":disabled").length !== 2) {\n            rbuggyQSA.push(":enabled", ":disabled");\n          } // Support: Opera 10 - 11 only\n          // Opera 10-11 does not throw on post-comma invalid pseudos\n\n\n          el.querySelectorAll("*,:x");\n          rbuggyQSA.push(",.*:");\n        });\n      }\n\n      if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {\n        assert(function (el) {\n          // Check to see if it\'s possible to do matchesSelector\n          // on a disconnected node (IE 9)\n          support.disconnectedMatch = matches.call(el, "*"); // This should fail with an exception\n          // Gecko does not error, returns false instead\n\n          matches.call(el, "[s!=\'\']:x");\n          rbuggyMatches.push("!=", pseudos);\n        });\n      }\n\n      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));\n      rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));\n      /* Contains\n      ---------------------------------------------------------------------- */\n\n      hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another\n      // Purposefully self-exclusive\n      // As in, an element does not contain itself\n\n      contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {\n        var adown = a.nodeType === 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\n      } : function (a, b) {\n        if (b) {\n          while (b = b.parentNode) {\n            if (b === a) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      };\n      /* Sorting\n      ---------------------------------------------------------------------- */\n      // Document order sorting\n\n      sortOrder = hasCompare ? function (a, b) {\n        // Flag for duplicate removal\n        if (a === b) {\n          hasDuplicate = true;\n          return 0;\n        } // Sort on method existence if only one input has compareDocumentPosition\n\n\n        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\n        if (compare) {\n          return compare;\n        } // Calculate position if both inputs belong to the same document\n        // Support: IE 11+, Edge 17 - 18+\n        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n        // two documents; shallow comparisons work.\n        // eslint-disable-next-line eqeqeq\n\n\n        compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected\n        1; // Disconnected nodes\n\n        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {\n          // Choose the first element that is related to our preferred document\n          // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n          // two documents; shallow comparisons work.\n          // eslint-disable-next-line eqeqeq\n          if (a == document || a.ownerDocument == preferredDoc && contains(preferredDoc, a)) {\n            return -1;\n          } // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n          // two documents; shallow comparisons work.\n          // eslint-disable-next-line eqeqeq\n\n\n          if (b == document || b.ownerDocument == preferredDoc && contains(preferredDoc, b)) {\n            return 1;\n          } // Maintain original order\n\n\n          return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;\n        }\n\n        return compare & 4 ? -1 : 1;\n      } : function (a, b) {\n        // Exit early if the nodes are identical\n        if (a === b) {\n          hasDuplicate = true;\n          return 0;\n        }\n\n        var cur,\n            i = 0,\n            aup = a.parentNode,\n            bup = b.parentNode,\n            ap = [a],\n            bp = [b]; // Parentless nodes are either documents or disconnected\n\n        if (!aup || !bup) {\n          // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n          // two documents; shallow comparisons work.\n\n          /* eslint-disable eqeqeq */\n          return a == document ? -1 : b == document ? 1 :\n          /* eslint-enable eqeqeq */\n          aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check\n        } else if (aup === bup) {\n          return siblingCheck(a, b);\n        } // Otherwise we need full lists of their ancestors for comparison\n\n\n        cur = a;\n\n        while (cur = cur.parentNode) {\n          ap.unshift(cur);\n        }\n\n        cur = b;\n\n        while (cur = cur.parentNode) {\n          bp.unshift(cur);\n        } // Walk down the tree looking for a discrepancy\n\n\n        while (ap[i] === bp[i]) {\n          i++;\n        }\n\n        return i ? // Do a sibling check if the nodes have a common ancestor\n        siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first\n        // Support: IE 11+, Edge 17 - 18+\n        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n        // two documents; shallow comparisons work.\n\n        /* eslint-disable eqeqeq */\n        ap[i] == preferredDoc ? -1 : bp[i] == preferredDoc ? 1 :\n        /* eslint-enable eqeqeq */\n        0;\n      };\n      return document;\n    };\n\n    Sizzle.matches = function (expr, elements) {\n      return Sizzle(expr, null, null, elements);\n    };\n\n    Sizzle.matchesSelector = function (elem, expr) {\n      setDocument(elem);\n\n      if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {\n        try {\n          var ret = matches.call(elem, expr); // IE 9\'s matchesSelector returns false on disconnected nodes\n\n          if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document\n          // fragment in IE 9\n          elem.document && elem.document.nodeType !== 11) {\n            return ret;\n          }\n        } catch (e) {\n          nonnativeSelectorCache(expr, true);\n        }\n      }\n\n      return Sizzle(expr, document, null, [elem]).length > 0;\n    };\n\n    Sizzle.contains = function (context, elem) {\n      // Set document vars if needed\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n      if ((context.ownerDocument || context) != document) {\n        setDocument(context);\n      }\n\n      return contains(context, elem);\n    };\n\n    Sizzle.attr = function (elem, name) {\n      // Set document vars if needed\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n      if ((elem.ownerDocument || elem) != document) {\n        setDocument(elem);\n      }\n\n      var fn = Expr.attrHandle[name.toLowerCase()],\n          // Don\'t get fooled by Object.prototype properties (jQuery #13807)\n      val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;\n      return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n    };\n\n    Sizzle.escape = function (sel) {\n      return (sel + "").replace(rcssescape, fcssescape);\n    };\n\n    Sizzle.error = function (msg) {\n      throw new Error("Syntax error, unrecognized expression: " + msg);\n    };\n    /**\n     * Document sorting and removing duplicates\n     * @param {ArrayLike} results\n     */\n\n\n    Sizzle.uniqueSort = function (results) {\n      var elem,\n          duplicates = [],\n          j = 0,\n          i = 0; // Unless we *know* we can detect duplicates, assume their presence\n\n      hasDuplicate = !support.detectDuplicates;\n      sortInput = !support.sortStable && results.slice(0);\n      results.sort(sortOrder);\n\n      if (hasDuplicate) {\n        while (elem = results[i++]) {\n          if (elem === results[i]) {\n            j = duplicates.push(i);\n          }\n        }\n\n        while (j--) {\n          results.splice(duplicates[j], 1);\n        }\n      } // Clear input after sorting to release objects\n      // See https://github.com/jquery/sizzle/pull/225\n\n\n      sortInput = null;\n      return results;\n    };\n    /**\n     * Utility function for retrieving the text value of an array of DOM nodes\n     * @param {Array|Element} elem\n     */\n\n\n    getText = Sizzle.getText = function (elem) {\n      var node,\n          ret = "",\n          i = 0,\n          nodeType = elem.nodeType;\n\n      if (!nodeType) {\n        // If no nodeType, this is expected to be an array\n        while (node = elem[i++]) {\n          // Do not traverse comment nodes\n          ret += getText(node);\n        }\n      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\n        // Use textContent for elements\n        // innerText usage removed for consistency of new lines (jQuery #11153)\n        if (typeof elem.textContent === "string") {\n          return elem.textContent;\n        } else {\n          // Traverse its children\n          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n            ret += getText(elem);\n          }\n        }\n      } else if (nodeType === 3 || nodeType === 4) {\n        return elem.nodeValue;\n      } // Do not include comment or processing instruction nodes\n\n\n      return ret;\n    };\n\n    Expr = Sizzle.selectors = {\n      // Can be adjusted by the user\n      cacheLength: 50,\n      createPseudo: markFunction,\n      match: matchExpr,\n      attrHandle: {},\n      find: {},\n      relative: {\n        ">": {\n          dir: "parentNode",\n          first: true\n        },\n        " ": {\n          dir: "parentNode"\n        },\n        "+": {\n          dir: "previousSibling",\n          first: true\n        },\n        "~": {\n          dir: "previousSibling"\n        }\n      },\n      preFilter: {\n        "ATTR": function ATTR(match) {\n          match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted\n\n          match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);\n\n          if (match[2] === "~=") {\n            match[3] = " " + match[3] + " ";\n          }\n\n          return match.slice(0, 4);\n        },\n        "CHILD": function CHILD(match) {\n          /* matches from matchExpr["CHILD"]\n          \t1 type (only|nth|...)\n          \t2 what (child|of-type)\n          \t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n          \t4 xn-component of xn+y argument ([+-]?\\d*n|)\n          \t5 sign of xn-component\n          \t6 x of xn-component\n          \t7 sign of y-component\n          \t8 y of y-component\n          */\n          match[1] = match[1].toLowerCase();\n\n          if (match[1].slice(0, 3) === "nth") {\n            // nth-* requires argument\n            if (!match[3]) {\n              Sizzle.error(match[0]);\n            } // numeric x and y parameters for Expr.filter.CHILD\n            // remember that false/true cast respectively to 0/1\n\n\n            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));\n            match[5] = +(match[7] + match[8] || match[3] === "odd"); // other types prohibit arguments\n          } else if (match[3]) {\n            Sizzle.error(match[0]);\n          }\n\n          return match;\n        },\n        "PSEUDO": function PSEUDO(match) {\n          var excess,\n              unquoted = !match[6] && match[2];\n\n          if (matchExpr["CHILD"].test(match[0])) {\n            return null;\n          } // Accept quoted arguments as-is\n\n\n          if (match[3]) {\n            match[2] = match[4] || match[5] || ""; // Strip excess characters from unquoted arguments\n          } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {\n            // excess is a negative index\n            match[0] = match[0].slice(0, excess);\n            match[2] = unquoted.slice(0, excess);\n          } // Return only captures needed by the pseudo filter method (type and argument)\n\n\n          return match.slice(0, 3);\n        }\n      },\n      filter: {\n        "TAG": function TAG(nodeNameSelector) {\n          var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();\n          return nodeNameSelector === "*" ? function () {\n            return true;\n          } : function (elem) {\n            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n          };\n        },\n        "CLASS": function CLASS(className) {\n          var pattern = classCache[className + " "];\n          return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {\n            return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");\n          });\n        },\n        "ATTR": function ATTR(name, operator, check) {\n          return function (elem) {\n            var result = Sizzle.attr(elem, name);\n\n            if (result == null) {\n              return operator === "!=";\n            }\n\n            if (!operator) {\n              return true;\n            }\n\n            result += "";\n            /* eslint-disable max-len */\n\n            return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;\n            /* eslint-enable max-len */\n          };\n        },\n        "CHILD": function CHILD(type, what, _argument, first, last) {\n          var simple = type.slice(0, 3) !== "nth",\n              forward = type.slice(-4) !== "last",\n              ofType = what === "of-type";\n          return first === 1 && last === 0 ? // Shortcut for :nth-*(n)\n          function (elem) {\n            return !!elem.parentNode;\n          } : function (elem, _context, xml) {\n            var cache,\n                uniqueCache,\n                outerCache,\n                node,\n                nodeIndex,\n                start,\n                dir = simple !== forward ? "nextSibling" : "previousSibling",\n                parent = elem.parentNode,\n                name = ofType && elem.nodeName.toLowerCase(),\n                useCache = !xml && !ofType,\n                diff = false;\n\n            if (parent) {\n              // :(first|last|only)-(child|of-type)\n              if (simple) {\n                while (dir) {\n                  node = elem;\n\n                  while (node = node[dir]) {\n                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {\n                      return false;\n                    }\n                  } // Reverse direction for :only-* (if we haven\'t yet done so)\n\n\n                  start = dir = type === "only" && !start && "nextSibling";\n                }\n\n                return true;\n              }\n\n              start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`\n\n              if (forward && useCache) {\n                // Seek `elem` from a previously-cached index\n                // ...in a gzip-friendly way\n                node = parent;\n                outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                // Defend against cloned attroperties (jQuery gh-1709)\n\n                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                cache = uniqueCache[type] || [];\n                nodeIndex = cache[0] === dirruns && cache[1];\n                diff = nodeIndex && cache[2];\n                node = nodeIndex && parent.childNodes[nodeIndex];\n\n                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {\n                  // When found, cache indexes on `parent` and break\n                  if (node.nodeType === 1 && ++diff && node === elem) {\n                    uniqueCache[type] = [dirruns, nodeIndex, diff];\n                    break;\n                  }\n                }\n              } else {\n                // Use previously-cached element index if available\n                if (useCache) {\n                  // ...in a gzip-friendly way\n                  node = elem;\n                  outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                  // Defend against cloned attroperties (jQuery gh-1709)\n\n                  uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                  cache = uniqueCache[type] || [];\n                  nodeIndex = cache[0] === dirruns && cache[1];\n                  diff = nodeIndex;\n                } // xml :nth-child(...)\n                // or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\n\n                if (diff === false) {\n                  // Use the same loop as above to seek `elem` from the start\n                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {\n                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {\n                      // Cache the index of each encountered element\n                      if (useCache) {\n                        outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                        // Defend against cloned attroperties (jQuery gh-1709)\n\n                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                        uniqueCache[type] = [dirruns, diff];\n                      }\n\n                      if (node === elem) {\n                        break;\n                      }\n                    }\n                  }\n                }\n              } // Incorporate the offset, then check against cycle size\n\n\n              diff -= last;\n              return diff === first || diff % first === 0 && diff / first >= 0;\n            }\n          };\n        },\n        "PSEUDO": function PSEUDO(pseudo, argument) {\n          // pseudo-class names are case-insensitive\n          // http://www.w3.org/TR/selectors/#pseudo-classes\n          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n          // Remember that setFilters inherits from pseudos\n          var args,\n              fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo); // The user may use createPseudo to indicate that\n          // arguments are needed to create the filter function\n          // just as Sizzle does\n\n          if (fn[expando]) {\n            return fn(argument);\n          } // But maintain support for old signatures\n\n\n          if (fn.length > 1) {\n            args = [pseudo, pseudo, "", argument];\n            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {\n              var idx,\n                  matched = fn(seed, argument),\n                  i = matched.length;\n\n              while (i--) {\n                idx = indexOf(seed, matched[i]);\n                seed[idx] = !(matches[idx] = matched[i]);\n              }\n            }) : function (elem) {\n              return fn(elem, 0, args);\n            };\n          }\n\n          return fn;\n        }\n      },\n      pseudos: {\n        // Potentially complex pseudos\n        "not": markFunction(function (selector) {\n          // Trim the selector passed to compile\n          // to avoid treating leading and trailing\n          // spaces as combinators\n          var input = [],\n              results = [],\n              matcher = compile(selector.replace(rtrim, "$1"));\n          return matcher[expando] ? markFunction(function (seed, matches, _context, xml) {\n            var elem,\n                unmatched = matcher(seed, null, xml, []),\n                i = seed.length; // Match elements unmatched by `matcher`\n\n            while (i--) {\n              if (elem = unmatched[i]) {\n                seed[i] = !(matches[i] = elem);\n              }\n            }\n          }) : function (elem, _context, xml) {\n            input[0] = elem;\n            matcher(input, null, xml, results); // Don\'t keep the element (issue #299)\n\n            input[0] = null;\n            return !results.pop();\n          };\n        }),\n        "has": markFunction(function (selector) {\n          return function (elem) {\n            return Sizzle(selector, elem).length > 0;\n          };\n        }),\n        "contains": markFunction(function (text) {\n          text = text.replace(runescape, funescape);\n          return function (elem) {\n            return (elem.textContent || getText(elem)).indexOf(text) > -1;\n          };\n        }),\n        // "Whether an element is represented by a :lang() selector\n        // is based solely on the element\'s language value\n        // being equal to the identifier C,\n        // or beginning with the identifier C immediately followed by "-".\n        // The matching of C against the element\'s language value is performed case-insensitively.\n        // The identifier C does not have to be a valid language name."\n        // http://www.w3.org/TR/selectors/#lang-pseudo\n        "lang": markFunction(function (lang) {\n          // lang value must be a valid identifier\n          if (!ridentifier.test(lang || "")) {\n            Sizzle.error("unsupported lang: " + lang);\n          }\n\n          lang = lang.replace(runescape, funescape).toLowerCase();\n          return function (elem) {\n            var elemLang;\n\n            do {\n              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {\n                elemLang = elemLang.toLowerCase();\n                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;\n              }\n            } while ((elem = elem.parentNode) && elem.nodeType === 1);\n\n            return false;\n          };\n        }),\n        // Miscellaneous\n        "target": function target(elem) {\n          var hash = window.location && window.location.hash;\n          return hash && hash.slice(1) === elem.id;\n        },\n        "root": function root(elem) {\n          return elem === docElem;\n        },\n        "focus": function focus(elem) {\n          return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n        },\n        // Boolean properties\n        "enabled": createDisabledPseudo(false),\n        "disabled": createDisabledPseudo(true),\n        "checked": function checked(elem) {\n          // In CSS3, :checked should return both checked and selected elements\n          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n          var nodeName = elem.nodeName.toLowerCase();\n          return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;\n        },\n        "selected": function selected(elem) {\n          // Accessing this property makes selected-by-default\n          // options in Safari work properly\n          if (elem.parentNode) {\n            // eslint-disable-next-line no-unused-expressions\n            elem.parentNode.selectedIndex;\n          }\n\n          return elem.selected === true;\n        },\n        // Contents\n        "empty": function empty(elem) {\n          // http://www.w3.org/TR/selectors/#empty-pseudo\n          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n          //   but not by others (comment: 8; processing instruction: 7; etc.)\n          // nodeType < 6 works because attributes (2) do not appear as children\n          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n            if (elem.nodeType < 6) {\n              return false;\n            }\n          }\n\n          return true;\n        },\n        "parent": function parent(elem) {\n          return !Expr.pseudos["empty"](elem);\n        },\n        // Element/input types\n        "header": function header(elem) {\n          return rheader.test(elem.nodeName);\n        },\n        "input": function input(elem) {\n          return rinputs.test(elem.nodeName);\n        },\n        "button": function button(elem) {\n          var name = elem.nodeName.toLowerCase();\n          return name === "input" && elem.type === "button" || name === "button";\n        },\n        "text": function text(elem) {\n          var attr;\n          return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");\n        },\n        // Position-in-collection\n        "first": createPositionalPseudo(function () {\n          return [0];\n        }),\n        "last": createPositionalPseudo(function (_matchIndexes, length) {\n          return [length - 1];\n        }),\n        "eq": createPositionalPseudo(function (_matchIndexes, length, argument) {\n          return [argument < 0 ? argument + length : argument];\n        }),\n        "even": createPositionalPseudo(function (matchIndexes, length) {\n          var i = 0;\n\n          for (; i < length; i += 2) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        }),\n        "odd": createPositionalPseudo(function (matchIndexes, length) {\n          var i = 1;\n\n          for (; i < length; i += 2) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        }),\n        "lt": createPositionalPseudo(function (matchIndexes, length, argument) {\n          var i = argument < 0 ? argument + length : argument > length ? length : argument;\n\n          for (; --i >= 0;) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        }),\n        "gt": createPositionalPseudo(function (matchIndexes, length, argument) {\n          var i = argument < 0 ? argument + length : argument;\n\n          for (; ++i < length;) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        })\n      }\n    };\n    Expr.pseudos["nth"] = Expr.pseudos["eq"]; // Add button/input type pseudos\n\n    for (i in {\n      radio: true,\n      checkbox: true,\n      file: true,\n      password: true,\n      image: true\n    }) {\n      Expr.pseudos[i] = createInputPseudo(i);\n    }\n\n    for (i in {\n      submit: true,\n      reset: true\n    }) {\n      Expr.pseudos[i] = createButtonPseudo(i);\n    } // Easy API for creating new setFilters\n\n\n    function setFilters() {}\n\n    setFilters.prototype = Expr.filters = Expr.pseudos;\n    Expr.setFilters = new setFilters();\n\n    tokenize = Sizzle.tokenize = function (selector, parseOnly) {\n      var matched,\n          match,\n          tokens,\n          type,\n          soFar,\n          groups,\n          preFilters,\n          cached = tokenCache[selector + " "];\n\n      if (cached) {\n        return parseOnly ? 0 : cached.slice(0);\n      }\n\n      soFar = selector;\n      groups = [];\n      preFilters = Expr.preFilter;\n\n      while (soFar) {\n        // Comma and first run\n        if (!matched || (match = rcomma.exec(soFar))) {\n          if (match) {\n            // Don\'t consume trailing commas as valid\n            soFar = soFar.slice(match[0].length) || soFar;\n          }\n\n          groups.push(tokens = []);\n        }\n\n        matched = false; // Combinators\n\n        if (match = rcombinators.exec(soFar)) {\n          matched = match.shift();\n          tokens.push({\n            value: matched,\n            // Cast descendant combinators to space\n            type: match[0].replace(rtrim, " ")\n          });\n          soFar = soFar.slice(matched.length);\n        } // Filters\n\n\n        for (type in Expr.filter) {\n          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {\n            matched = match.shift();\n            tokens.push({\n              value: matched,\n              type: type,\n              matches: match\n            });\n            soFar = soFar.slice(matched.length);\n          }\n        }\n\n        if (!matched) {\n          break;\n        }\n      } // Return the length of the invalid excess\n      // if we\'re just parsing\n      // Otherwise, throw an error or return tokens\n\n\n      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens\n      tokenCache(selector, groups).slice(0);\n    };\n\n    function toSelector(tokens) {\n      var i = 0,\n          len = tokens.length,\n          selector = "";\n\n      for (; i < len; i++) {\n        selector += tokens[i].value;\n      }\n\n      return selector;\n    }\n\n    function addCombinator(matcher, combinator, base) {\n      var dir = combinator.dir,\n          skip = combinator.next,\n          key = skip || dir,\n          checkNonElements = base && key === "parentNode",\n          doneName = done++;\n      return combinator.first ? // Check against closest ancestor/preceding element\n      function (elem, context, xml) {\n        while (elem = elem[dir]) {\n          if (elem.nodeType === 1 || checkNonElements) {\n            return matcher(elem, context, xml);\n          }\n        }\n\n        return false;\n      } : // Check against all ancestor/preceding elements\n      function (elem, context, xml) {\n        var oldCache,\n            uniqueCache,\n            outerCache,\n            newCache = [dirruns, doneName]; // We can\'t set arbitrary data on XML nodes, so they don\'t benefit from combinator caching\n\n        if (xml) {\n          while (elem = elem[dir]) {\n            if (elem.nodeType === 1 || checkNonElements) {\n              if (matcher(elem, context, xml)) {\n                return true;\n              }\n            }\n          }\n        } else {\n          while (elem = elem[dir]) {\n            if (elem.nodeType === 1 || checkNonElements) {\n              outerCache = elem[expando] || (elem[expando] = {}); // Support: IE <9 only\n              // Defend against cloned attroperties (jQuery gh-1709)\n\n              uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});\n\n              if (skip && skip === elem.nodeName.toLowerCase()) {\n                elem = elem[dir] || elem;\n              } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {\n                // Assign to newCache so results back-propagate to previous elements\n                return newCache[2] = oldCache[2];\n              } else {\n                // Reuse newcache so results back-propagate to previous elements\n                uniqueCache[key] = newCache; // A match means we\'re done; a fail means we have to keep checking\n\n                if (newCache[2] = matcher(elem, context, xml)) {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n\n        return false;\n      };\n    }\n\n    function elementMatcher(matchers) {\n      return matchers.length > 1 ? function (elem, context, xml) {\n        var i = matchers.length;\n\n        while (i--) {\n          if (!matchers[i](elem, context, xml)) {\n            return false;\n          }\n        }\n\n        return true;\n      } : matchers[0];\n    }\n\n    function multipleContexts(selector, contexts, results) {\n      var i = 0,\n          len = contexts.length;\n\n      for (; i < len; i++) {\n        Sizzle(selector, contexts[i], results);\n      }\n\n      return results;\n    }\n\n    function condense(unmatched, map, filter, context, xml) {\n      var elem,\n          newUnmatched = [],\n          i = 0,\n          len = unmatched.length,\n          mapped = map != null;\n\n      for (; i < len; i++) {\n        if (elem = unmatched[i]) {\n          if (!filter || filter(elem, context, xml)) {\n            newUnmatched.push(elem);\n\n            if (mapped) {\n              map.push(i);\n            }\n          }\n        }\n      }\n\n      return newUnmatched;\n    }\n\n    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {\n      if (postFilter && !postFilter[expando]) {\n        postFilter = setMatcher(postFilter);\n      }\n\n      if (postFinder && !postFinder[expando]) {\n        postFinder = setMatcher(postFinder, postSelector);\n      }\n\n      return markFunction(function (seed, results, context, xml) {\n        var temp,\n            i,\n            elem,\n            preMap = [],\n            postMap = [],\n            preexisting = results.length,\n            // Get initial elements from seed or context\n        elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),\n            // Prefilter to get matcher input, preserving a map for seed-results synchronization\n        matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,\n            matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n        postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary\n        [] : // ...otherwise use results directly\n        results : matcherIn; // Find primary matches\n\n        if (matcher) {\n          matcher(matcherIn, matcherOut, context, xml);\n        } // Apply postFilter\n\n\n        if (postFilter) {\n          temp = condense(matcherOut, postMap);\n          postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn\n\n          i = temp.length;\n\n          while (i--) {\n            if (elem = temp[i]) {\n              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);\n            }\n          }\n        }\n\n        if (seed) {\n          if (postFinder || preFilter) {\n            if (postFinder) {\n              // Get the final matcherOut by condensing this intermediate into postFinder contexts\n              temp = [];\n              i = matcherOut.length;\n\n              while (i--) {\n                if (elem = matcherOut[i]) {\n                  // Restore matcherIn since elem is not yet a final match\n                  temp.push(matcherIn[i] = elem);\n                }\n              }\n\n              postFinder(null, matcherOut = [], temp, xml);\n            } // Move matched elements from seed to results to keep them synchronized\n\n\n            i = matcherOut.length;\n\n            while (i--) {\n              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {\n                seed[temp] = !(results[temp] = elem);\n              }\n            }\n          } // Add elements to results, through postFinder if defined\n\n        } else {\n          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);\n\n          if (postFinder) {\n            postFinder(null, results, matcherOut, xml);\n          } else {\n            push.apply(results, matcherOut);\n          }\n        }\n      });\n    }\n\n    function matcherFromTokens(tokens) {\n      var checkContext,\n          matcher,\n          j,\n          len = tokens.length,\n          leadingRelative = Expr.relative[tokens[0].type],\n          implicitRelative = leadingRelative || Expr.relative[" "],\n          i = leadingRelative ? 1 : 0,\n          // The foundational matcher ensures that elements are reachable from top-level context(s)\n      matchContext = addCombinator(function (elem) {\n        return elem === checkContext;\n      }, implicitRelative, true),\n          matchAnyContext = addCombinator(function (elem) {\n        return indexOf(checkContext, elem) > -1;\n      }, implicitRelative, true),\n          matchers = [function (elem, context, xml) {\n        var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)\n\n        checkContext = null;\n        return ret;\n      }];\n\n      for (; i < len; i++) {\n        if (matcher = Expr.relative[tokens[i].type]) {\n          matchers = [addCombinator(elementMatcher(matchers), matcher)];\n        } else {\n          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher\n\n          if (matcher[expando]) {\n            // Find the next relative operator (if any) for proper handling\n            j = ++i;\n\n            for (; j < len; j++) {\n              if (Expr.relative[tokens[j].type]) {\n                break;\n              }\n            }\n\n            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`\n            tokens.slice(0, i - 1).concat({\n              value: tokens[i - 2].type === " " ? "*" : ""\n            })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));\n          }\n\n          matchers.push(matcher);\n        }\n      }\n\n      return elementMatcher(matchers);\n    }\n\n    function matcherFromGroupMatchers(elementMatchers, setMatchers) {\n      var bySet = setMatchers.length > 0,\n          byElement = elementMatchers.length > 0,\n          superMatcher = function superMatcher(seed, context, xml, results, outermost) {\n        var elem,\n            j,\n            matcher,\n            matchedCount = 0,\n            i = "0",\n            unmatched = seed && [],\n            setMatched = [],\n            contextBackup = outermostContext,\n            // We must always have either seed elements or outermost context\n        elems = seed || byElement && Expr.find["TAG"]("*", outermost),\n            // Use integer dirruns iff this is the outermost matcher\n        dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,\n            len = elems.length;\n\n        if (outermost) {\n          // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n          // two documents; shallow comparisons work.\n          // eslint-disable-next-line eqeqeq\n          outermostContext = context == document || context || outermost;\n        } // Add elements passing elementMatchers directly to results\n        // Support: IE<9, Safari\n        // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id\n\n\n        for (; i !== len && (elem = elems[i]) != null; i++) {\n          if (byElement && elem) {\n            j = 0; // Support: IE 11+, Edge 17 - 18+\n            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n            // two documents; shallow comparisons work.\n            // eslint-disable-next-line eqeqeq\n\n            if (!context && elem.ownerDocument != document) {\n              setDocument(elem);\n              xml = !documentIsHTML;\n            }\n\n            while (matcher = elementMatchers[j++]) {\n              if (matcher(elem, context || document, xml)) {\n                results.push(elem);\n                break;\n              }\n            }\n\n            if (outermost) {\n              dirruns = dirrunsUnique;\n            }\n          } // Track unmatched elements for set filters\n\n\n          if (bySet) {\n            // They will have gone through all possible matchers\n            if (elem = !matcher && elem) {\n              matchedCount--;\n            } // Lengthen the array for every element, matched or not\n\n\n            if (seed) {\n              unmatched.push(elem);\n            }\n          }\n        } // `i` is now the count of elements visited above, and adding it to `matchedCount`\n        // makes the latter nonnegative.\n\n\n        matchedCount += i; // Apply set filters to unmatched elements\n        // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n        // equals `i`), unless we didn\'t visit _any_ elements in the above loop because we have\n        // no element matchers and no seed.\n        // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that\n        // case, which will result in a "00" `matchedCount` that differs from `i` but is also\n        // numerically zero.\n\n        if (bySet && i !== matchedCount) {\n          j = 0;\n\n          while (matcher = setMatchers[j++]) {\n            matcher(unmatched, setMatched, context, xml);\n          }\n\n          if (seed) {\n            // Reintegrate element matches to eliminate the need for sorting\n            if (matchedCount > 0) {\n              while (i--) {\n                if (!(unmatched[i] || setMatched[i])) {\n                  setMatched[i] = pop.call(results);\n                }\n              }\n            } // Discard index placeholder values to get only actual matches\n\n\n            setMatched = condense(setMatched);\n          } // Add matches to results\n\n\n          push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting\n\n          if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {\n            Sizzle.uniqueSort(results);\n          }\n        } // Override manipulation of globals by nested matchers\n\n\n        if (outermost) {\n          dirruns = dirrunsUnique;\n          outermostContext = contextBackup;\n        }\n\n        return unmatched;\n      };\n\n      return bySet ? markFunction(superMatcher) : superMatcher;\n    }\n\n    compile = Sizzle.compile = function (selector, match\n    /* Internal Use Only */\n    ) {\n      var i,\n          setMatchers = [],\n          elementMatchers = [],\n          cached = compilerCache[selector + " "];\n\n      if (!cached) {\n        // Generate a function of recursive functions that can be used to check each element\n        if (!match) {\n          match = tokenize(selector);\n        }\n\n        i = match.length;\n\n        while (i--) {\n          cached = matcherFromTokens(match[i]);\n\n          if (cached[expando]) {\n            setMatchers.push(cached);\n          } else {\n            elementMatchers.push(cached);\n          }\n        } // Cache the compiled function\n\n\n        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization\n\n        cached.selector = selector;\n      }\n\n      return cached;\n    };\n    /**\n     * A low-level selection function that works with Sizzle\'s compiled\n     *  selector functions\n     * @param {String|Function} selector A selector or a pre-compiled\n     *  selector function built with Sizzle.compile\n     * @param {Element} context\n     * @param {Array} [results]\n     * @param {Array} [seed] A set of elements to match against\n     */\n\n\n    select = Sizzle.select = function (selector, context, results, seed) {\n      var i,\n          tokens,\n          token,\n          type,\n          find,\n          compiled = typeof selector === "function" && selector,\n          match = !seed && tokenize(selector = compiled.selector || selector);\n      results = results || []; // Try to minimize operations if there is only one selector in the list and no seed\n      // (the latter of which guarantees us context)\n\n      if (match.length === 1) {\n        // Reduce context if the leading compound selector is an ID\n        tokens = match[0] = match[0].slice(0);\n\n        if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {\n          context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];\n\n          if (!context) {\n            return results; // Precompiled matchers will still verify ancestry, so step up a level\n          } else if (compiled) {\n            context = context.parentNode;\n          }\n\n          selector = selector.slice(tokens.shift().value.length);\n        } // Fetch a seed set for right-to-left matching\n\n\n        i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;\n\n        while (i--) {\n          token = tokens[i]; // Abort if we hit a combinator\n\n          if (Expr.relative[type = token.type]) {\n            break;\n          }\n\n          if (find = Expr.find[type]) {\n            // Search, expanding context for leading sibling combinators\n            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {\n              // If seed is empty or no tokens remain, we can return early\n              tokens.splice(i, 1);\n              selector = seed.length && toSelector(tokens);\n\n              if (!selector) {\n                push.apply(results, seed);\n                return results;\n              }\n\n              break;\n            }\n          }\n        }\n      } // Compile and execute a filtering function if one is not provided\n      // Provide `match` to avoid retokenization if we modified the selector above\n\n\n      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);\n      return results;\n    }; // One-time assignments\n    // Sort stability\n\n\n    support.sortStable = expando.split("").sort(sortOrder).join("") === expando; // Support: Chrome 14-35+\n    // Always assume duplicates if they aren\'t passed to the comparison function\n\n    support.detectDuplicates = !!hasDuplicate; // Initialize against the default document\n\n    setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n    // Detached nodes confoundingly follow *each other*\n\n    support.sortDetached = assert(function (el) {\n      // Should return 1, but returns 4 (following)\n      return el.compareDocumentPosition(document.createElement("fieldset")) & 1;\n    }); // Support: IE<8\n    // Prevent attribute/property "interpolation"\n    // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\n\n    if (!assert(function (el) {\n      el.innerHTML = "<a href=\'#\'></a>";\n      return el.firstChild.getAttribute("href") === "#";\n    })) {\n      addHandle("type|href|height|width", function (elem, name, isXML) {\n        if (!isXML) {\n          return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);\n        }\n      });\n    } // Support: IE<9\n    // Use defaultValue in place of getAttribute("value")\n\n\n    if (!support.attributes || !assert(function (el) {\n      el.innerHTML = "<input/>";\n      el.firstChild.setAttribute("value", "");\n      return el.firstChild.getAttribute("value") === "";\n    })) {\n      addHandle("value", function (elem, _name, isXML) {\n        if (!isXML && elem.nodeName.toLowerCase() === "input") {\n          return elem.defaultValue;\n        }\n      });\n    } // Support: IE<9\n    // Use getAttributeNode to fetch booleans when getAttribute lies\n\n\n    if (!assert(function (el) {\n      return el.getAttribute("disabled") == null;\n    })) {\n      addHandle(booleans, function (elem, name, isXML) {\n        var val;\n\n        if (!isXML) {\n          return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n        }\n      });\n    }\n\n    return Sizzle;\n  }(window);\n\n  jQuery.find = Sizzle;\n  jQuery.expr = Sizzle.selectors; // Deprecated\n\n  jQuery.expr[":"] = jQuery.expr.pseudos;\n  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\n  jQuery.text = Sizzle.getText;\n  jQuery.isXMLDoc = Sizzle.isXML;\n  jQuery.contains = Sizzle.contains;\n  jQuery.escapeSelector = Sizzle.escape;\n\n  var dir = function dir(elem, _dir, until) {\n    var matched = [],\n        truncate = until !== undefined;\n\n    while ((elem = elem[_dir]) && elem.nodeType !== 9) {\n      if (elem.nodeType === 1) {\n        if (truncate && jQuery(elem).is(until)) {\n          break;\n        }\n\n        matched.push(elem);\n      }\n    }\n\n    return matched;\n  };\n\n  var _siblings = function siblings(n, elem) {\n    var matched = [];\n\n    for (; n; n = n.nextSibling) {\n      if (n.nodeType === 1 && n !== elem) {\n        matched.push(n);\n      }\n    }\n\n    return matched;\n  };\n\n  var rneedsContext = jQuery.expr.match.needsContext;\n\n  function nodeName(elem, name) {\n    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n  }\n\n  var rsingleTag = /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i; // Implement the identical functionality for filter and not\n\n  function winnow(elements, qualifier, not) {\n    if (isFunction(qualifier)) {\n      return jQuery.grep(elements, function (elem, i) {\n        return !!qualifier.call(elem, i, elem) !== not;\n      });\n    } // Single element\n\n\n    if (qualifier.nodeType) {\n      return jQuery.grep(elements, function (elem) {\n        return elem === qualifier !== not;\n      });\n    } // Arraylike of elements (jQuery, arguments, Array)\n\n\n    if (typeof qualifier !== "string") {\n      return jQuery.grep(elements, function (elem) {\n        return indexOf.call(qualifier, elem) > -1 !== not;\n      });\n    } // Filtered directly for both simple and complex selectors\n\n\n    return jQuery.filter(qualifier, elements, not);\n  }\n\n  jQuery.filter = function (expr, elems, not) {\n    var elem = elems[0];\n\n    if (not) {\n      expr = ":not(" + expr + ")";\n    }\n\n    if (elems.length === 1 && elem.nodeType === 1) {\n      return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];\n    }\n\n    return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {\n      return elem.nodeType === 1;\n    }));\n  };\n\n  jQuery.fn.extend({\n    find: function find(selector) {\n      var i,\n          ret,\n          len = this.length,\n          self = this;\n\n      if (typeof selector !== "string") {\n        return this.pushStack(jQuery(selector).filter(function () {\n          for (i = 0; i < len; i++) {\n            if (jQuery.contains(self[i], this)) {\n              return true;\n            }\n          }\n        }));\n      }\n\n      ret = this.pushStack([]);\n\n      for (i = 0; i < len; i++) {\n        jQuery.find(selector, self[i], ret);\n      }\n\n      return len > 1 ? jQuery.uniqueSort(ret) : ret;\n    },\n    filter: function filter(selector) {\n      return this.pushStack(winnow(this, selector || [], false));\n    },\n    not: function not(selector) {\n      return this.pushStack(winnow(this, selector || [], true));\n    },\n    is: function is(selector) {\n      return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set\n      // so $("p:first").is("p:last") won\'t return true for a doc with two "p".\n      typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;\n    }\n  }); // Initialize a jQuery object\n  // A central reference to the root jQuery(document)\n\n  var rootjQuery,\n      // A simple way to check for HTML strings\n  // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n  // Strict HTML recognition (#11290: must start with <)\n  // Shortcut simple #id case for speed\n  rquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n      init = jQuery.fn.init = function (selector, context, root) {\n    var match, elem; // HANDLE: $(""), $(null), $(undefined), $(false)\n\n    if (!selector) {\n      return this;\n    } // Method init() accepts an alternate rootjQuery\n    // so migrate can support jQuery.sub (gh-2101)\n\n\n    root = root || rootjQuery; // Handle HTML strings\n\n    if (typeof selector === "string") {\n      if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {\n        // Assume that strings that start and end with <> are HTML and skip the regex check\n        match = [null, selector, null];\n      } else {\n        match = rquickExpr.exec(selector);\n      } // Match html or make sure no context is specified for #id\n\n\n      if (match && (match[1] || !context)) {\n        // HANDLE: $(html) -> $(array)\n        if (match[1]) {\n          context = context instanceof jQuery ? context[0] : context; // Option to run scripts is true for back-compat\n          // Intentionally let the error be thrown if parseHTML is not present\n\n          jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)); // HANDLE: $(html, props)\n\n          if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n            for (match in context) {\n              // Properties of context are called as methods if possible\n              if (isFunction(this[match])) {\n                this[match](context[match]); // ...and otherwise set as attributes\n              } else {\n                this.attr(match, context[match]);\n              }\n            }\n          }\n\n          return this; // HANDLE: $(#id)\n        } else {\n          elem = document.getElementById(match[2]);\n\n          if (elem) {\n            // Inject the element directly into the jQuery object\n            this[0] = elem;\n            this.length = 1;\n          }\n\n          return this;\n        } // HANDLE: $(expr, $(...))\n\n      } else if (!context || context.jquery) {\n        return (context || root).find(selector); // HANDLE: $(expr, context)\n        // (which is just equivalent to: $(context).find(expr)\n      } else {\n        return this.constructor(context).find(selector);\n      } // HANDLE: $(DOMElement)\n\n    } else if (selector.nodeType) {\n      this[0] = selector;\n      this.length = 1;\n      return this; // HANDLE: $(function)\n      // Shortcut for document ready\n    } else if (isFunction(selector)) {\n      return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present\n      selector(jQuery);\n    }\n\n    return jQuery.makeArray(selector, this);\n  }; // Give the init function the jQuery prototype for later instantiation\n\n\n  init.prototype = jQuery.fn; // Initialize central reference\n\n  rootjQuery = jQuery(document);\n  var rparentsprev = /^(?:parents|prev(?:Until|All))/,\n      // Methods guaranteed to produce a unique set when starting from a unique set\n  guaranteedUnique = {\n    children: true,\n    contents: true,\n    next: true,\n    prev: true\n  };\n  jQuery.fn.extend({\n    has: function has(target) {\n      var targets = jQuery(target, this),\n          l = targets.length;\n      return this.filter(function () {\n        var i = 0;\n\n        for (; i < l; i++) {\n          if (jQuery.contains(this, targets[i])) {\n            return true;\n          }\n        }\n      });\n    },\n    closest: function closest(selectors, context) {\n      var cur,\n          i = 0,\n          l = this.length,\n          matched = [],\n          targets = typeof selectors !== "string" && jQuery(selectors); // Positional selectors never match, since there\'s no _selection_ context\n\n      if (!rneedsContext.test(selectors)) {\n        for (; i < l; i++) {\n          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {\n            // Always skip document fragments\n            if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don\'t pass non-elements to Sizzle\n            cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {\n              matched.push(cur);\n              break;\n            }\n          }\n        }\n      }\n\n      return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);\n    },\n    // Determine the position of an element within the set\n    index: function index(elem) {\n      // No argument, return index in parent\n      if (!elem) {\n        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n      } // Index in selector\n\n\n      if (typeof elem === "string") {\n        return indexOf.call(jQuery(elem), this[0]);\n      } // Locate the position of the desired element\n\n\n      return indexOf.call(this, // If it receives a jQuery object, the first element is used\n      elem.jquery ? elem[0] : elem);\n    },\n    add: function add(selector, context) {\n      return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));\n    },\n    addBack: function addBack(selector) {\n      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n    }\n  });\n\n  function sibling(cur, dir) {\n    while ((cur = cur[dir]) && cur.nodeType !== 1) {}\n\n    return cur;\n  }\n\n  jQuery.each({\n    parent: function parent(elem) {\n      var parent = elem.parentNode;\n      return parent && parent.nodeType !== 11 ? parent : null;\n    },\n    parents: function parents(elem) {\n      return dir(elem, "parentNode");\n    },\n    parentsUntil: function parentsUntil(elem, _i, until) {\n      return dir(elem, "parentNode", until);\n    },\n    next: function next(elem) {\n      return sibling(elem, "nextSibling");\n    },\n    prev: function prev(elem) {\n      return sibling(elem, "previousSibling");\n    },\n    nextAll: function nextAll(elem) {\n      return dir(elem, "nextSibling");\n    },\n    prevAll: function prevAll(elem) {\n      return dir(elem, "previousSibling");\n    },\n    nextUntil: function nextUntil(elem, _i, until) {\n      return dir(elem, "nextSibling", until);\n    },\n    prevUntil: function prevUntil(elem, _i, until) {\n      return dir(elem, "previousSibling", until);\n    },\n    siblings: function siblings(elem) {\n      return _siblings((elem.parentNode || {}).firstChild, elem);\n    },\n    children: function children(elem) {\n      return _siblings(elem.firstChild);\n    },\n    contents: function contents(elem) {\n      if (elem.contentDocument != null && // Support: IE 11+\n      // <object> elements with no `data` attribute has an object\n      // `contentDocument` with a `null` prototype.\n      getProto(elem.contentDocument)) {\n        return elem.contentDocument;\n      } // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n      // Treat the template element as a regular one in browsers that\n      // don\'t support it.\n\n\n      if (nodeName(elem, "template")) {\n        elem = elem.content || elem;\n      }\n\n      return jQuery.merge([], elem.childNodes);\n    }\n  }, function (name, fn) {\n    jQuery.fn[name] = function (until, selector) {\n      var matched = jQuery.map(this, fn, until);\n\n      if (name.slice(-5) !== "Until") {\n        selector = until;\n      }\n\n      if (selector && typeof selector === "string") {\n        matched = jQuery.filter(selector, matched);\n      }\n\n      if (this.length > 1) {\n        // Remove duplicates\n        if (!guaranteedUnique[name]) {\n          jQuery.uniqueSort(matched);\n        } // Reverse order for parents* and prev-derivatives\n\n\n        if (rparentsprev.test(name)) {\n          matched.reverse();\n        }\n      }\n\n      return this.pushStack(matched);\n    };\n  });\n  var rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g; // Convert String-formatted options into Object-formatted ones\n\n  function createOptions(options) {\n    var object = {};\n    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {\n      object[flag] = true;\n    });\n    return object;\n  }\n  /*\n   * Create a callback list using the following parameters:\n   *\n   *\toptions: an optional list of space-separated options that will change how\n   *\t\t\tthe callback list behaves or a more traditional option object\n   *\n   * By default a callback list will act like an event callback list and can be\n   * "fired" multiple times.\n   *\n   * Possible options:\n   *\n   *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n   *\n   *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n   *\t\t\t\t\tafter the list has been fired right away with the latest "memorized"\n   *\t\t\t\t\tvalues (like a Deferred)\n   *\n   *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n   *\n   *\tstopOnFalse:\tinterrupt callings when a callback returns false\n   *\n   */\n\n\n  jQuery.Callbacks = function (options) {\n    // Convert options from String-formatted to Object-formatted if needed\n    // (we check in cache first)\n    options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);\n\n    var // Flag to know if list is currently firing\n    firing,\n        // Last fire value for non-forgettable lists\n    memory,\n        // Flag to know if list was already fired\n    _fired,\n        // Flag to prevent firing\n    _locked,\n        // Actual callback list\n    list = [],\n        // Queue of execution data for repeatable lists\n    queue = [],\n        // Index of currently firing callback (modified by add/remove as needed)\n    firingIndex = -1,\n        // Fire callbacks\n    fire = function fire() {\n      // Enforce single-firing\n      _locked = _locked || options.once; // Execute callbacks for all pending executions,\n      // respecting firingIndex overrides and runtime changes\n\n      _fired = firing = true;\n\n      for (; queue.length; firingIndex = -1) {\n        memory = queue.shift();\n\n        while (++firingIndex < list.length) {\n          // Run callback and check for early termination\n          if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {\n            // Jump to end and forget the data so .add doesn\'t re-fire\n            firingIndex = list.length;\n            memory = false;\n          }\n        }\n      } // Forget the data if we\'re done with it\n\n\n      if (!options.memory) {\n        memory = false;\n      }\n\n      firing = false; // Clean up if we\'re done firing for good\n\n      if (_locked) {\n        // Keep an empty list if we have data for future add calls\n        if (memory) {\n          list = []; // Otherwise, this object is spent\n        } else {\n          list = "";\n        }\n      }\n    },\n        // Actual Callbacks object\n    self = {\n      // Add a callback or a collection of callbacks to the list\n      add: function add() {\n        if (list) {\n          // If we have memory from a past run, we should fire after adding\n          if (memory && !firing) {\n            firingIndex = list.length - 1;\n            queue.push(memory);\n          }\n\n          (function add(args) {\n            jQuery.each(args, function (_, arg) {\n              if (isFunction(arg)) {\n                if (!options.unique || !self.has(arg)) {\n                  list.push(arg);\n                }\n              } else if (arg && arg.length && toType(arg) !== "string") {\n                // Inspect recursively\n                add(arg);\n              }\n            });\n          })(arguments);\n\n          if (memory && !firing) {\n            fire();\n          }\n        }\n\n        return this;\n      },\n      // Remove a callback from the list\n      remove: function remove() {\n        jQuery.each(arguments, function (_, arg) {\n          var index;\n\n          while ((index = jQuery.inArray(arg, list, index)) > -1) {\n            list.splice(index, 1); // Handle firing indexes\n\n            if (index <= firingIndex) {\n              firingIndex--;\n            }\n          }\n        });\n        return this;\n      },\n      // Check if a given callback is in the list.\n      // If no argument is given, return whether or not list has callbacks attached.\n      has: function has(fn) {\n        return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;\n      },\n      // Remove all callbacks from the list\n      empty: function empty() {\n        if (list) {\n          list = [];\n        }\n\n        return this;\n      },\n      // Disable .fire and .add\n      // Abort any current/pending executions\n      // Clear all callbacks and values\n      disable: function disable() {\n        _locked = queue = [];\n        list = memory = "";\n        return this;\n      },\n      disabled: function disabled() {\n        return !list;\n      },\n      // Disable .fire\n      // Also disable .add unless we have memory (since it would have no effect)\n      // Abort any pending executions\n      lock: function lock() {\n        _locked = queue = [];\n\n        if (!memory && !firing) {\n          list = memory = "";\n        }\n\n        return this;\n      },\n      locked: function locked() {\n        return !!_locked;\n      },\n      // Call all callbacks with the given context and arguments\n      fireWith: function fireWith(context, args) {\n        if (!_locked) {\n          args = args || [];\n          args = [context, args.slice ? args.slice() : args];\n          queue.push(args);\n\n          if (!firing) {\n            fire();\n          }\n        }\n\n        return this;\n      },\n      // Call all the callbacks with the given arguments\n      fire: function fire() {\n        self.fireWith(this, arguments);\n        return this;\n      },\n      // To know if the callbacks have already been called at least once\n      fired: function fired() {\n        return !!_fired;\n      }\n    };\n\n    return self;\n  };\n\n  function Identity(v) {\n    return v;\n  }\n\n  function Thrower(ex) {\n    throw ex;\n  }\n\n  function adoptValue(value, resolve, reject, noValue) {\n    var method;\n\n    try {\n      // Check for promise aspect first to privilege synchronous behavior\n      if (value && isFunction(method = value.promise)) {\n        method.call(value).done(resolve).fail(reject); // Other thenables\n      } else if (value && isFunction(method = value.then)) {\n        method.call(value, resolve, reject); // Other non-thenables\n      } else {\n        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n        // * false: [ value ].slice( 0 ) => resolve( value )\n        // * true: [ value ].slice( 1 ) => resolve()\n        resolve.apply(undefined, [value].slice(noValue));\n      } // For Promises/A+, convert exceptions into rejections\n      // Since jQuery.when doesn\'t unwrap thenables, we can skip the extra checks appearing in\n      // Deferred#then to conditionally suppress rejection.\n\n    } catch (value) {\n      // Support: Android 4.0 only\n      // Strict mode functions invoked without .call/.apply get global-object context\n      reject.apply(undefined, [value]);\n    }\n  }\n\n  jQuery.extend({\n    Deferred: function Deferred(func) {\n      var tuples = [// action, add listener, callbacks,\n      // ... .then handlers, argument index, [final state]\n      ["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],\n          _state = "pending",\n          _promise = {\n        state: function state() {\n          return _state;\n        },\n        always: function always() {\n          deferred.done(arguments).fail(arguments);\n          return this;\n        },\n        "catch": function _catch(fn) {\n          return _promise.then(null, fn);\n        },\n        // Keep pipe for back-compat\n        pipe: function pipe() {\n          var fns = arguments;\n          return jQuery.Deferred(function (newDefer) {\n            jQuery.each(tuples, function (_i, tuple) {\n              // Map tuples (progress, done, fail) to arguments (done, fail, progress)\n              var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]]; // deferred.progress(function() { bind to newDefer or newDefer.notify })\n              // deferred.done(function() { bind to newDefer or newDefer.resolve })\n              // deferred.fail(function() { bind to newDefer or newDefer.reject })\n\n              deferred[tuple[1]](function () {\n                var returned = fn && fn.apply(this, arguments);\n\n                if (returned && isFunction(returned.promise)) {\n                  returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);\n                } else {\n                  newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);\n                }\n              });\n            });\n            fns = null;\n          }).promise();\n        },\n        then: function then(onFulfilled, onRejected, onProgress) {\n          var maxDepth = 0;\n\n          function resolve(depth, deferred, handler, special) {\n            return function () {\n              var that = this,\n                  args = arguments,\n                  mightThrow = function mightThrow() {\n                var returned, then; // Support: Promises/A+ section 2.3.3.3.3\n                // https://promisesaplus.com/#point-59\n                // Ignore double-resolution attempts\n\n                if (depth < maxDepth) {\n                  return;\n                }\n\n                returned = handler.apply(that, args); // Support: Promises/A+ section 2.3.1\n                // https://promisesaplus.com/#point-48\n\n                if (returned === deferred.promise()) {\n                  throw new TypeError("Thenable self-resolution");\n                } // Support: Promises/A+ sections 2.3.3.1, 3.5\n                // https://promisesaplus.com/#point-54\n                // https://promisesaplus.com/#point-75\n                // Retrieve `then` only once\n\n\n                then = returned && (_typeof(returned) === "object" || typeof returned === "function") && returned.then; // Handle a returned thenable\n\n                if (isFunction(then)) {\n                  // Special processors (notify) just wait for resolution\n                  if (special) {\n                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special)); // Normal processors (resolve) also hook into progress\n                  } else {\n                    // ...and disregard older resolution values\n                    maxDepth++;\n                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));\n                  } // Handle all other returned values\n\n                } else {\n                  // Only substitute handlers pass on context\n                  // and multiple values (non-spec behavior)\n                  if (handler !== Identity) {\n                    that = undefined;\n                    args = [returned];\n                  } // Process the value(s)\n                  // Default process is resolve\n\n\n                  (special || deferred.resolveWith)(that, args);\n                }\n              },\n                  // Only normal processors (resolve) catch and reject exceptions\n              process = special ? mightThrow : function () {\n                try {\n                  mightThrow();\n                } catch (e) {\n                  if (jQuery.Deferred.exceptionHook) {\n                    jQuery.Deferred.exceptionHook(e, process.stackTrace);\n                  } // Support: Promises/A+ section 2.3.3.3.4.1\n                  // https://promisesaplus.com/#point-61\n                  // Ignore post-resolution exceptions\n\n\n                  if (depth + 1 >= maxDepth) {\n                    // Only substitute handlers pass on context\n                    // and multiple values (non-spec behavior)\n                    if (handler !== Thrower) {\n                      that = undefined;\n                      args = [e];\n                    }\n\n                    deferred.rejectWith(that, args);\n                  }\n                }\n              }; // Support: Promises/A+ section 2.3.3.3.1\n              // https://promisesaplus.com/#point-57\n              // Re-resolve promises immediately to dodge false rejection from\n              // subsequent errors\n\n\n              if (depth) {\n                process();\n              } else {\n                // Call an optional hook to record the stack, in case of exception\n                // since it\'s otherwise lost when execution goes async\n                if (jQuery.Deferred.getStackHook) {\n                  process.stackTrace = jQuery.Deferred.getStackHook();\n                }\n\n                window.setTimeout(process);\n              }\n            };\n          }\n\n          return jQuery.Deferred(function (newDefer) {\n            // progress_handlers.add( ... )\n            tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith)); // fulfilled_handlers.add( ... )\n\n            tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity)); // rejected_handlers.add( ... )\n\n            tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));\n          }).promise();\n        },\n        // Get a promise for this deferred\n        // If obj is provided, the promise aspect is added to the object\n        promise: function promise(obj) {\n          return obj != null ? jQuery.extend(obj, _promise) : _promise;\n        }\n      },\n          deferred = {}; // Add list-specific methods\n\n      jQuery.each(tuples, function (i, tuple) {\n        var list = tuple[2],\n            stateString = tuple[5]; // promise.progress = list.add\n        // promise.done = list.add\n        // promise.fail = list.add\n\n        _promise[tuple[1]] = list.add; // Handle state\n\n        if (stateString) {\n          list.add(function () {\n            // state = "resolved" (i.e., fulfilled)\n            // state = "rejected"\n            _state = stateString;\n          }, // rejected_callbacks.disable\n          // fulfilled_callbacks.disable\n          tuples[3 - i][2].disable, // rejected_handlers.disable\n          // fulfilled_handlers.disable\n          tuples[3 - i][3].disable, // progress_callbacks.lock\n          tuples[0][2].lock, // progress_handlers.lock\n          tuples[0][3].lock);\n        } // progress_handlers.fire\n        // fulfilled_handlers.fire\n        // rejected_handlers.fire\n\n\n        list.add(tuple[3].fire); // deferred.notify = function() { deferred.notifyWith(...) }\n        // deferred.resolve = function() { deferred.resolveWith(...) }\n        // deferred.reject = function() { deferred.rejectWith(...) }\n\n        deferred[tuple[0]] = function () {\n          deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);\n          return this;\n        }; // deferred.notifyWith = list.fireWith\n        // deferred.resolveWith = list.fireWith\n        // deferred.rejectWith = list.fireWith\n\n\n        deferred[tuple[0] + "With"] = list.fireWith;\n      }); // Make the deferred a promise\n\n      _promise.promise(deferred); // Call given func if any\n\n\n      if (func) {\n        func.call(deferred, deferred);\n      } // All done!\n\n\n      return deferred;\n    },\n    // Deferred helper\n    when: function when(singleValue) {\n      var // count of uncompleted subordinates\n      remaining = arguments.length,\n          // count of unprocessed arguments\n      i = remaining,\n          // subordinate fulfillment data\n      resolveContexts = Array(i),\n          resolveValues = _slice.call(arguments),\n          // the primary Deferred\n      primary = jQuery.Deferred(),\n          // subordinate callback factory\n      updateFunc = function updateFunc(i) {\n        return function (value) {\n          resolveContexts[i] = this;\n          resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;\n\n          if (! --remaining) {\n            primary.resolveWith(resolveContexts, resolveValues);\n          }\n        };\n      }; // Single- and empty arguments are adopted like Promise.resolve\n\n\n      if (remaining <= 1) {\n        adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject, !remaining); // Use .then() to unwrap secondary thenables (cf. gh-3000)\n\n        if (primary.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {\n          return primary.then();\n        }\n      } // Multiple arguments are aggregated like Promise.all array elements\n\n\n      while (i--) {\n        adoptValue(resolveValues[i], updateFunc(i), primary.reject);\n      }\n\n      return primary.promise();\n    }\n  }); // These usually indicate a programmer mistake during development,\n  // warn about them ASAP rather than swallowing them by default.\n\n  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\n  jQuery.Deferred.exceptionHook = function (error, stack) {\n    // Support: IE 8 - 9 only\n    // Console exists when dev tools are open, which can happen at any time\n    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {\n      window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);\n    }\n  };\n\n  jQuery.readyException = function (error) {\n    window.setTimeout(function () {\n      throw error;\n    });\n  }; // The deferred used on DOM ready\n\n\n  var readyList = jQuery.Deferred();\n\n  jQuery.fn.ready = function (fn) {\n    readyList.then(fn) // Wrap jQuery.readyException in a function so that the lookup\n    // happens at the time of error handling instead of callback\n    // registration.\n    .catch(function (error) {\n      jQuery.readyException(error);\n    });\n    return this;\n  };\n\n  jQuery.extend({\n    // Is the DOM ready to be used? Set to true once it occurs.\n    isReady: false,\n    // A counter to track how many items to wait for before\n    // the ready event fires. See #6781\n    readyWait: 1,\n    // Handle when the DOM is ready\n    ready: function ready(wait) {\n      // Abort if there are pending holds or we\'re already ready\n      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {\n        return;\n      } // Remember that the DOM is ready\n\n\n      jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be\n\n      if (wait !== true && --jQuery.readyWait > 0) {\n        return;\n      } // If there are functions bound, to execute\n\n\n      readyList.resolveWith(document, [jQuery]);\n    }\n  });\n  jQuery.ready.then = readyList.then; // The ready event handler and self cleanup method\n\n  function completed() {\n    document.removeEventListener("DOMContentLoaded", completed);\n    window.removeEventListener("load", completed);\n    jQuery.ready();\n  } // Catch cases where $(document).ready() is called\n  // after the browser event has already occurred.\n  // Support: IE <=9 - 10 only\n  // Older IE sometimes signals "interactive" too soon\n\n\n  if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {\n    // Handle it asynchronously to allow scripts the opportunity to delay ready\n    window.setTimeout(jQuery.ready);\n  } else {\n    // Use the handy event callback\n    document.addEventListener("DOMContentLoaded", completed); // A fallback to window.onload, that will always work\n\n    window.addEventListener("load", completed);\n  } // Multifunctional method to get and set values of a collection\n  // The value/s can optionally be executed if it\'s a function\n\n\n  var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {\n    var i = 0,\n        len = elems.length,\n        bulk = key == null; // Sets many values\n\n    if (toType(key) === "object") {\n      chainable = true;\n\n      for (i in key) {\n        access(elems, fn, i, key[i], true, emptyGet, raw);\n      } // Sets one value\n\n    } else if (value !== undefined) {\n      chainable = true;\n\n      if (!isFunction(value)) {\n        raw = true;\n      }\n\n      if (bulk) {\n        // Bulk operations run against the entire set\n        if (raw) {\n          fn.call(elems, value);\n          fn = null; // ...except when executing function values\n        } else {\n          bulk = fn;\n\n          fn = function fn(elem, _key, value) {\n            return bulk.call(jQuery(elem), value);\n          };\n        }\n      }\n\n      if (fn) {\n        for (; i < len; i++) {\n          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));\n        }\n      }\n    }\n\n    if (chainable) {\n      return elems;\n    } // Gets\n\n\n    if (bulk) {\n      return fn.call(elems);\n    }\n\n    return len ? fn(elems[0], key) : emptyGet;\n  }; // Matches dashed string for camelizing\n\n\n  var rmsPrefix = /^-ms-/,\n      rdashAlpha = /-([a-z])/g; // Used by camelCase as callback to replace()\n\n  function fcamelCase(_all, letter) {\n    return letter.toUpperCase();\n  } // Convert dashed to camelCase; used by the css and data modules\n  // Support: IE <=9 - 11, Edge 12 - 15\n  // Microsoft forgot to hump their vendor prefix (#9572)\n\n\n  function camelCase(string) {\n    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);\n  }\n\n  var acceptData = function acceptData(owner) {\n    // Accepts only:\n    //  - Node\n    //    - Node.ELEMENT_NODE\n    //    - Node.DOCUMENT_NODE\n    //  - Object\n    //    - Any\n    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;\n  };\n\n  function Data() {\n    this.expando = jQuery.expando + Data.uid++;\n  }\n\n  Data.uid = 1;\n  Data.prototype = {\n    cache: function cache(owner) {\n      // Check if the owner object already has a cache\n      var value = owner[this.expando]; // If not, create one\n\n      if (!value) {\n        value = {}; // We can accept data for non-element nodes in modern browsers,\n        // but we should not, see #8335.\n        // Always return an empty object.\n\n        if (acceptData(owner)) {\n          // If it is a node unlikely to be stringify-ed or looped over\n          // use plain assignment\n          if (owner.nodeType) {\n            owner[this.expando] = value; // Otherwise secure it in a non-enumerable property\n            // configurable must be true to allow the property to be\n            // deleted when data is removed\n          } else {\n            Object.defineProperty(owner, this.expando, {\n              value: value,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      return value;\n    },\n    set: function set(owner, data, value) {\n      var prop,\n          cache = this.cache(owner); // Handle: [ owner, key, value ] args\n      // Always use camelCase key (gh-2257)\n\n      if (typeof data === "string") {\n        cache[camelCase(data)] = value; // Handle: [ owner, { properties } ] args\n      } else {\n        // Copy the properties one-by-one to the cache object\n        for (prop in data) {\n          cache[camelCase(prop)] = data[prop];\n        }\n      }\n\n      return cache;\n    },\n    get: function get(owner, key) {\n      return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)\n      owner[this.expando] && owner[this.expando][camelCase(key)];\n    },\n    access: function access(owner, key, value) {\n      // In cases where either:\n      //\n      //   1. No key was specified\n      //   2. A string key was specified, but no value provided\n      //\n      // Take the "read" path and allow the get method to determine\n      // which value to return, respectively either:\n      //\n      //   1. The entire cache object\n      //   2. The data stored at the key\n      //\n      if (key === undefined || key && typeof key === "string" && value === undefined) {\n        return this.get(owner, key);\n      } // When the key is not a string, or both a key and value\n      // are specified, set or extend (existing objects) with either:\n      //\n      //   1. An object of properties\n      //   2. A key and value\n      //\n\n\n      this.set(owner, key, value); // Since the "set" path can have two possible entry points\n      // return the expected data based on which path was taken[*]\n\n      return value !== undefined ? value : key;\n    },\n    remove: function remove(owner, key) {\n      var i,\n          cache = owner[this.expando];\n\n      if (cache === undefined) {\n        return;\n      }\n\n      if (key !== undefined) {\n        // Support array or space separated string of keys\n        if (Array.isArray(key)) {\n          // If key is an array of keys...\n          // We always set camelCase keys, so remove that.\n          key = key.map(camelCase);\n        } else {\n          key = camelCase(key); // If a key with the spaces exists, use it.\n          // Otherwise, create an array by matching non-whitespace\n\n          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];\n        }\n\n        i = key.length;\n\n        while (i--) {\n          delete cache[key[i]];\n        }\n      } // Remove the expando if there\'s no more data\n\n\n      if (key === undefined || jQuery.isEmptyObject(cache)) {\n        // Support: Chrome <=35 - 45\n        // Webkit & Blink performance suffers when deleting properties\n        // from DOM nodes, so set to undefined instead\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n        if (owner.nodeType) {\n          owner[this.expando] = undefined;\n        } else {\n          delete owner[this.expando];\n        }\n      }\n    },\n    hasData: function hasData(owner) {\n      var cache = owner[this.expando];\n      return cache !== undefined && !jQuery.isEmptyObject(cache);\n    }\n  };\n  var dataPriv = new Data();\n  var dataUser = new Data(); //\tImplementation Summary\n  //\n  //\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n  //\t2. Improve the module\'s maintainability by reducing the storage\n  //\t\tpaths to a single mechanism.\n  //\t3. Use the same single mechanism to support "private" and "user" data.\n  //\t4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)\n  //\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n  //\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\n  var rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n      rmultiDash = /[A-Z]/g;\n\n  function getData(data) {\n    if (data === "true") {\n      return true;\n    }\n\n    if (data === "false") {\n      return false;\n    }\n\n    if (data === "null") {\n      return null;\n    } // Only convert to a number if it doesn\'t change the string\n\n\n    if (data === +data + "") {\n      return +data;\n    }\n\n    if (rbrace.test(data)) {\n      return JSON.parse(data);\n    }\n\n    return data;\n  }\n\n  function dataAttr(elem, key, data) {\n    var name; // If nothing was found internally, try to fetch any\n    // data from the HTML5 data-* attribute\n\n    if (data === undefined && elem.nodeType === 1) {\n      name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();\n      data = elem.getAttribute(name);\n\n      if (typeof data === "string") {\n        try {\n          data = getData(data);\n        } catch (e) {} // Make sure we set the data so it isn\'t changed later\n\n\n        dataUser.set(elem, key, data);\n      } else {\n        data = undefined;\n      }\n    }\n\n    return data;\n  }\n\n  jQuery.extend({\n    hasData: function hasData(elem) {\n      return dataUser.hasData(elem) || dataPriv.hasData(elem);\n    },\n    data: function data(elem, name, _data) {\n      return dataUser.access(elem, name, _data);\n    },\n    removeData: function removeData(elem, name) {\n      dataUser.remove(elem, name);\n    },\n    // TODO: Now that all calls to _data and _removeData have been replaced\n    // with direct calls to dataPriv methods, these can be deprecated.\n    _data: function _data(elem, name, data) {\n      return dataPriv.access(elem, name, data);\n    },\n    _removeData: function _removeData(elem, name) {\n      dataPriv.remove(elem, name);\n    }\n  });\n  jQuery.fn.extend({\n    data: function data(key, value) {\n      var i,\n          name,\n          data,\n          elem = this[0],\n          attrs = elem && elem.attributes; // Gets all values\n\n      if (key === undefined) {\n        if (this.length) {\n          data = dataUser.get(elem);\n\n          if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {\n            i = attrs.length;\n\n            while (i--) {\n              // Support: IE 11 only\n              // The attrs elements can be null (#14894)\n              if (attrs[i]) {\n                name = attrs[i].name;\n\n                if (name.indexOf("data-") === 0) {\n                  name = camelCase(name.slice(5));\n                  dataAttr(elem, name, data[name]);\n                }\n              }\n            }\n\n            dataPriv.set(elem, "hasDataAttrs", true);\n          }\n        }\n\n        return data;\n      } // Sets multiple values\n\n\n      if (_typeof(key) === "object") {\n        return this.each(function () {\n          dataUser.set(this, key);\n        });\n      }\n\n      return access(this, function (value) {\n        var data; // The calling jQuery object (element matches) is not empty\n        // (and therefore has an element appears at this[ 0 ]) and the\n        // `value` parameter was not undefined. An empty jQuery object\n        // will result in `undefined` for elem = this[ 0 ] which will\n        // throw an exception if an attempt to read a data cache is made.\n\n        if (elem && value === undefined) {\n          // Attempt to get data from the cache\n          // The key will always be camelCased in Data\n          data = dataUser.get(elem, key);\n\n          if (data !== undefined) {\n            return data;\n          } // Attempt to "discover" the data in\n          // HTML5 custom data-* attrs\n\n\n          data = dataAttr(elem, key);\n\n          if (data !== undefined) {\n            return data;\n          } // We tried really hard, but the data doesn\'t exist.\n\n\n          return;\n        } // Set the data...\n\n\n        this.each(function () {\n          // We always store the camelCased key\n          dataUser.set(this, key, value);\n        });\n      }, null, value, arguments.length > 1, null, true);\n    },\n    removeData: function removeData(key) {\n      return this.each(function () {\n        dataUser.remove(this, key);\n      });\n    }\n  });\n  jQuery.extend({\n    queue: function queue(elem, type, data) {\n      var queue;\n\n      if (elem) {\n        type = (type || "fx") + "queue";\n        queue = dataPriv.get(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup\n\n        if (data) {\n          if (!queue || Array.isArray(data)) {\n            queue = dataPriv.access(elem, type, jQuery.makeArray(data));\n          } else {\n            queue.push(data);\n          }\n        }\n\n        return queue || [];\n      }\n    },\n    dequeue: function dequeue(elem, type) {\n      type = type || "fx";\n\n      var queue = jQuery.queue(elem, type),\n          startLength = queue.length,\n          fn = queue.shift(),\n          hooks = jQuery._queueHooks(elem, type),\n          next = function next() {\n        jQuery.dequeue(elem, type);\n      }; // If the fx queue is dequeued, always remove the progress sentinel\n\n\n      if (fn === "inprogress") {\n        fn = queue.shift();\n        startLength--;\n      }\n\n      if (fn) {\n        // Add a progress sentinel to prevent the fx queue from being\n        // automatically dequeued\n        if (type === "fx") {\n          queue.unshift("inprogress");\n        } // Clear up the last queue stop function\n\n\n        delete hooks.stop;\n        fn.call(elem, next, hooks);\n      }\n\n      if (!startLength && hooks) {\n        hooks.empty.fire();\n      }\n    },\n    // Not public - generate a queueHooks object, or return the current one\n    _queueHooks: function _queueHooks(elem, type) {\n      var key = type + "queueHooks";\n      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {\n        empty: jQuery.Callbacks("once memory").add(function () {\n          dataPriv.remove(elem, [type + "queue", key]);\n        })\n      });\n    }\n  });\n  jQuery.fn.extend({\n    queue: function queue(type, data) {\n      var setter = 2;\n\n      if (typeof type !== "string") {\n        data = type;\n        type = "fx";\n        setter--;\n      }\n\n      if (arguments.length < setter) {\n        return jQuery.queue(this[0], type);\n      }\n\n      return data === undefined ? this : this.each(function () {\n        var queue = jQuery.queue(this, type, data); // Ensure a hooks for this queue\n\n        jQuery._queueHooks(this, type);\n\n        if (type === "fx" && queue[0] !== "inprogress") {\n          jQuery.dequeue(this, type);\n        }\n      });\n    },\n    dequeue: function dequeue(type) {\n      return this.each(function () {\n        jQuery.dequeue(this, type);\n      });\n    },\n    clearQueue: function clearQueue(type) {\n      return this.queue(type || "fx", []);\n    },\n    // Get a promise resolved when queues of a certain type\n    // are emptied (fx is the type by default)\n    promise: function promise(type, obj) {\n      var tmp,\n          count = 1,\n          defer = jQuery.Deferred(),\n          elements = this,\n          i = this.length,\n          resolve = function resolve() {\n        if (! --count) {\n          defer.resolveWith(elements, [elements]);\n        }\n      };\n\n      if (typeof type !== "string") {\n        obj = type;\n        type = undefined;\n      }\n\n      type = type || "fx";\n\n      while (i--) {\n        tmp = dataPriv.get(elements[i], type + "queueHooks");\n\n        if (tmp && tmp.empty) {\n          count++;\n          tmp.empty.add(resolve);\n        }\n      }\n\n      resolve();\n      return defer.promise(obj);\n    }\n  });\n  var pnum = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source;\n  var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");\n  var cssExpand = ["Top", "Right", "Bottom", "Left"];\n  var documentElement = document.documentElement;\n\n  var isAttached = function isAttached(elem) {\n    return jQuery.contains(elem.ownerDocument, elem);\n  },\n      composed = {\n    composed: true\n  }; // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n  // Check attachment across shadow DOM boundaries when possible (gh-3504)\n  // Support: iOS 10.0-10.2 only\n  // Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n  // leading to errors. We need to check for `getRootNode`.\n\n\n  if (documentElement.getRootNode) {\n    isAttached = function isAttached(elem) {\n      return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;\n    };\n  }\n\n  var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {\n    // isHiddenWithinTree might be called from jQuery#filter function;\n    // in that case, element will be second argument\n    elem = el || elem; // Inline style trumps all\n\n    return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style\n    // Support: Firefox <=43 - 45\n    // Disconnected elements can have computed display: none, so first confirm that elem is\n    // in the document.\n    isAttached(elem) && jQuery.css(elem, "display") === "none";\n  };\n\n  function adjustCSS(elem, prop, valueParts, tween) {\n    var adjusted,\n        scale,\n        maxIterations = 20,\n        currentValue = tween ? function () {\n      return tween.cur();\n    } : function () {\n      return jQuery.css(elem, prop, "");\n    },\n        initial = currentValue(),\n        unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),\n        // Starting value computation is required for potential unit mismatches\n    initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));\n\n    if (initialInUnit && initialInUnit[3] !== unit) {\n      // Support: Firefox <=54\n      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n      initial = initial / 2; // Trust units reported by jQuery.css\n\n      unit = unit || initialInUnit[3]; // Iteratively approximate from a nonzero starting point\n\n      initialInUnit = +initial || 1;\n\n      while (maxIterations--) {\n        // Evaluate and update our best guess (doubling guesses that zero out).\n        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n        jQuery.style(elem, prop, initialInUnit + unit);\n\n        if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {\n          maxIterations = 0;\n        }\n\n        initialInUnit = initialInUnit / scale;\n      }\n\n      initialInUnit = initialInUnit * 2;\n      jQuery.style(elem, prop, initialInUnit + unit); // Make sure we update the tween properties later on\n\n      valueParts = valueParts || [];\n    }\n\n    if (valueParts) {\n      initialInUnit = +initialInUnit || +initial || 0; // Apply relative offset (+=/-=) if specified\n\n      adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];\n\n      if (tween) {\n        tween.unit = unit;\n        tween.start = initialInUnit;\n        tween.end = adjusted;\n      }\n    }\n\n    return adjusted;\n  }\n\n  var defaultDisplayMap = {};\n\n  function getDefaultDisplay(elem) {\n    var temp,\n        doc = elem.ownerDocument,\n        nodeName = elem.nodeName,\n        display = defaultDisplayMap[nodeName];\n\n    if (display) {\n      return display;\n    }\n\n    temp = doc.body.appendChild(doc.createElement(nodeName));\n    display = jQuery.css(temp, "display");\n    temp.parentNode.removeChild(temp);\n\n    if (display === "none") {\n      display = "block";\n    }\n\n    defaultDisplayMap[nodeName] = display;\n    return display;\n  }\n\n  function showHide(elements, show) {\n    var display,\n        elem,\n        values = [],\n        index = 0,\n        length = elements.length; // Determine new display value for elements that need to change\n\n    for (; index < length; index++) {\n      elem = elements[index];\n\n      if (!elem.style) {\n        continue;\n      }\n\n      display = elem.style.display;\n\n      if (show) {\n        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n        // check is required in this first loop unless we have a nonempty display value (either\n        // inline or about-to-be-restored)\n        if (display === "none") {\n          values[index] = dataPriv.get(elem, "display") || null;\n\n          if (!values[index]) {\n            elem.style.display = "";\n          }\n        }\n\n        if (elem.style.display === "" && isHiddenWithinTree(elem)) {\n          values[index] = getDefaultDisplay(elem);\n        }\n      } else {\n        if (display !== "none") {\n          values[index] = "none"; // Remember what we\'re overwriting\n\n          dataPriv.set(elem, "display", display);\n        }\n      }\n    } // Set the display of the elements in a second loop to avoid constant reflow\n\n\n    for (index = 0; index < length; index++) {\n      if (values[index] != null) {\n        elements[index].style.display = values[index];\n      }\n    }\n\n    return elements;\n  }\n\n  jQuery.fn.extend({\n    show: function show() {\n      return showHide(this, true);\n    },\n    hide: function hide() {\n      return showHide(this);\n    },\n    toggle: function toggle(state) {\n      if (typeof state === "boolean") {\n        return state ? this.show() : this.hide();\n      }\n\n      return this.each(function () {\n        if (isHiddenWithinTree(this)) {\n          jQuery(this).show();\n        } else {\n          jQuery(this).hide();\n        }\n      });\n    }\n  });\n  var rcheckableType = /^(?:checkbox|radio)$/i;\n  var rtagName = /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i;\n  var rscriptType = /^$|^module$|\\/(?:java|ecma)script/i;\n\n  (function () {\n    var fragment = document.createDocumentFragment(),\n        div = fragment.appendChild(document.createElement("div")),\n        input = document.createElement("input"); // Support: Android 4.0 - 4.3 only\n    // Check state lost if the name is set (#11217)\n    // Support: Windows Web Apps (WWA)\n    // `name` and `type` must use .setAttribute for WWA (#14901)\n\n    input.setAttribute("type", "radio");\n    input.setAttribute("checked", "checked");\n    input.setAttribute("name", "t");\n    div.appendChild(input); // Support: Android <=4.1 only\n    // Older WebKit doesn\'t clone checked state correctly in fragments\n\n    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE <=11 only\n    // Make sure textarea (and checkbox) defaultValue is properly cloned\n\n    div.innerHTML = "<textarea>x</textarea>";\n    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue; // Support: IE <=9 only\n    // IE <=9 replaces <option> tags with their contents when inserted outside of\n    // the select element.\n\n    div.innerHTML = "<option></option>";\n    support.option = !!div.lastChild;\n  })(); // We have to close these tags to support XHTML (#13200)\n\n\n  var wrapMap = {\n    // XHTML parsers do not magically insert elements in the\n    // same way that tag soup parsers do. So we cannot shorten\n    // this by omitting <tbody> or other required elements.\n    thead: [1, "<table>", "</table>"],\n    col: [2, "<table><colgroup>", "</colgroup></table>"],\n    tr: [2, "<table><tbody>", "</tbody></table>"],\n    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],\n    _default: [0, "", ""]\n  };\n  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\n  wrapMap.th = wrapMap.td; // Support: IE <=9 only\n\n  if (!support.option) {\n    wrapMap.optgroup = wrapMap.option = [1, "<select multiple=\'multiple\'>", "</select>"];\n  }\n\n  function getAll(context, tag) {\n    // Support: IE <=9 - 11 only\n    // Use typeof to avoid zero-argument method invocation on host objects (#15151)\n    var ret;\n\n    if (typeof context.getElementsByTagName !== "undefined") {\n      ret = context.getElementsByTagName(tag || "*");\n    } else if (typeof context.querySelectorAll !== "undefined") {\n      ret = context.querySelectorAll(tag || "*");\n    } else {\n      ret = [];\n    }\n\n    if (tag === undefined || tag && nodeName(context, tag)) {\n      return jQuery.merge([context], ret);\n    }\n\n    return ret;\n  } // Mark scripts as having already been evaluated\n\n\n  function setGlobalEval(elems, refElements) {\n    var i = 0,\n        l = elems.length;\n\n    for (; i < l; i++) {\n      dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));\n    }\n  }\n\n  var rhtml = /<|&#?\\w+;/;\n\n  function buildFragment(elems, context, scripts, selection, ignored) {\n    var elem,\n        tmp,\n        tag,\n        wrap,\n        attached,\n        j,\n        fragment = context.createDocumentFragment(),\n        nodes = [],\n        i = 0,\n        l = elems.length;\n\n    for (; i < l; i++) {\n      elem = elems[i];\n\n      if (elem || elem === 0) {\n        // Add nodes directly\n        if (toType(elem) === "object") {\n          // Support: Android <=4.0 only, PhantomJS 1 only\n          // push.apply(_, arraylike) throws on ancient WebKit\n          jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node\n        } else if (!rhtml.test(elem)) {\n          nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes\n        } else {\n          tmp = tmp || fragment.appendChild(context.createElement("div")); // Deserialize a standard representation\n\n          tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();\n          wrap = wrapMap[tag] || wrapMap._default;\n          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]; // Descend through wrappers to the right content\n\n          j = wrap[0];\n\n          while (j--) {\n            tmp = tmp.lastChild;\n          } // Support: Android <=4.0 only, PhantomJS 1 only\n          // push.apply(_, arraylike) throws on ancient WebKit\n\n\n          jQuery.merge(nodes, tmp.childNodes); // Remember the top-level container\n\n          tmp = fragment.firstChild; // Ensure the created nodes are orphaned (#12392)\n\n          tmp.textContent = "";\n        }\n      }\n    } // Remove wrapper from fragment\n\n\n    fragment.textContent = "";\n    i = 0;\n\n    while (elem = nodes[i++]) {\n      // Skip elements already in the context collection (trac-4087)\n      if (selection && jQuery.inArray(elem, selection) > -1) {\n        if (ignored) {\n          ignored.push(elem);\n        }\n\n        continue;\n      }\n\n      attached = isAttached(elem); // Append to fragment\n\n      tmp = getAll(fragment.appendChild(elem), "script"); // Preserve script evaluation history\n\n      if (attached) {\n        setGlobalEval(tmp);\n      } // Capture executables\n\n\n      if (scripts) {\n        j = 0;\n\n        while (elem = tmp[j++]) {\n          if (rscriptType.test(elem.type || "")) {\n            scripts.push(elem);\n          }\n        }\n      }\n    }\n\n    return fragment;\n  }\n\n  var rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\n  function returnTrue() {\n    return true;\n  }\n\n  function returnFalse() {\n    return false;\n  } // Support: IE <=9 - 11+\n  // focus() and blur() are asynchronous, except when they are no-op.\n  // So expect focus to be synchronous when the element is already active,\n  // and blur to be synchronous when the element is not already active.\n  // (focus and blur are always synchronous in other supported browsers,\n  // this just defines when we can count on it).\n\n\n  function expectSync(elem, type) {\n    return elem === safeActiveElement() === (type === "focus");\n  } // Support: IE <=9 only\n  // Accessing document.activeElement can throw unexpectedly\n  // https://bugs.jquery.com/ticket/13393\n\n\n  function safeActiveElement() {\n    try {\n      return document.activeElement;\n    } catch (err) {}\n  }\n\n  function _on(elem, types, selector, data, fn, one) {\n    var origFn, type; // Types can be a map of types/handlers\n\n    if (_typeof(types) === "object") {\n      // ( types-Object, selector, data )\n      if (typeof selector !== "string") {\n        // ( types-Object, data )\n        data = data || selector;\n        selector = undefined;\n      }\n\n      for (type in types) {\n        _on(elem, type, selector, data, types[type], one);\n      }\n\n      return elem;\n    }\n\n    if (data == null && fn == null) {\n      // ( types, fn )\n      fn = selector;\n      data = selector = undefined;\n    } else if (fn == null) {\n      if (typeof selector === "string") {\n        // ( types, selector, fn )\n        fn = data;\n        data = undefined;\n      } else {\n        // ( types, data, fn )\n        fn = data;\n        data = selector;\n        selector = undefined;\n      }\n    }\n\n    if (fn === false) {\n      fn = returnFalse;\n    } else if (!fn) {\n      return elem;\n    }\n\n    if (one === 1) {\n      origFn = fn;\n\n      fn = function fn(event) {\n        // Can use an empty set, since event contains the info\n        jQuery().off(event);\n        return origFn.apply(this, arguments);\n      }; // Use same guid so caller can remove using origFn\n\n\n      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);\n    }\n\n    return elem.each(function () {\n      jQuery.event.add(this, types, fn, data, selector);\n    });\n  }\n  /*\n   * Helper functions for managing events -- not part of the public interface.\n   * Props to Dean Edwards\' addEvent library for many of the ideas.\n   */\n\n\n  jQuery.event = {\n    global: {},\n    add: function add(elem, types, handler, data, selector) {\n      var handleObjIn,\n          eventHandle,\n          tmp,\n          events,\n          t,\n          handleObj,\n          special,\n          handlers,\n          type,\n          namespaces,\n          origType,\n          elemData = dataPriv.get(elem); // Only attach events to objects that accept data\n\n      if (!acceptData(elem)) {\n        return;\n      } // Caller can pass in an object of custom data in lieu of the handler\n\n\n      if (handler.handler) {\n        handleObjIn = handler;\n        handler = handleObjIn.handler;\n        selector = handleObjIn.selector;\n      } // Ensure that invalid selectors throw exceptions at attach time\n      // Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\n\n      if (selector) {\n        jQuery.find.matchesSelector(documentElement, selector);\n      } // Make sure that the handler has a unique ID, used to find/remove it later\n\n\n      if (!handler.guid) {\n        handler.guid = jQuery.guid++;\n      } // Init the element\'s event structure and main handler, if this is the first\n\n\n      if (!(events = elemData.events)) {\n        events = elemData.events = Object.create(null);\n      }\n\n      if (!(eventHandle = elemData.handle)) {\n        eventHandle = elemData.handle = function (e) {\n          // Discard the second event of a jQuery.event.trigger() and\n          // when an event is called after a page has unloaded\n          return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;\n        };\n      } // Handle multiple events separated by a space\n\n\n      types = (types || "").match(rnothtmlwhite) || [""];\n      t = types.length;\n\n      while (t--) {\n        tmp = rtypenamespace.exec(types[t]) || [];\n        type = origType = tmp[1];\n        namespaces = (tmp[2] || "").split(".").sort(); // There *must* be a type, no attaching namespace-only handlers\n\n        if (!type) {\n          continue;\n        } // If event changes its type, use the special event handlers for the changed type\n\n\n        special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type\n\n        type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type\n\n        special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers\n\n        handleObj = jQuery.extend({\n          type: type,\n          origType: origType,\n          data: data,\n          handler: handler,\n          guid: handler.guid,\n          selector: selector,\n          needsContext: selector && jQuery.expr.match.needsContext.test(selector),\n          namespace: namespaces.join(".")\n        }, handleObjIn); // Init the event handler queue if we\'re the first\n\n        if (!(handlers = events[type])) {\n          handlers = events[type] = [];\n          handlers.delegateCount = 0; // Only use addEventListener if the special events handler returns false\n\n          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {\n            if (elem.addEventListener) {\n              elem.addEventListener(type, eventHandle);\n            }\n          }\n        }\n\n        if (special.add) {\n          special.add.call(elem, handleObj);\n\n          if (!handleObj.handler.guid) {\n            handleObj.handler.guid = handler.guid;\n          }\n        } // Add to the element\'s handler list, delegates in front\n\n\n        if (selector) {\n          handlers.splice(handlers.delegateCount++, 0, handleObj);\n        } else {\n          handlers.push(handleObj);\n        } // Keep track of which events have ever been used, for event optimization\n\n\n        jQuery.event.global[type] = true;\n      }\n    },\n    // Detach an event or set of events from an element\n    remove: function remove(elem, types, handler, selector, mappedTypes) {\n      var j,\n          origCount,\n          tmp,\n          events,\n          t,\n          handleObj,\n          special,\n          handlers,\n          type,\n          namespaces,\n          origType,\n          elemData = dataPriv.hasData(elem) && dataPriv.get(elem);\n\n      if (!elemData || !(events = elemData.events)) {\n        return;\n      } // Once for each type.namespace in types; type may be omitted\n\n\n      types = (types || "").match(rnothtmlwhite) || [""];\n      t = types.length;\n\n      while (t--) {\n        tmp = rtypenamespace.exec(types[t]) || [];\n        type = origType = tmp[1];\n        namespaces = (tmp[2] || "").split(".").sort(); // Unbind all events (on this namespace, if provided) for the element\n\n        if (!type) {\n          for (type in events) {\n            jQuery.event.remove(elem, type + types[t], handler, selector, true);\n          }\n\n          continue;\n        }\n\n        special = jQuery.event.special[type] || {};\n        type = (selector ? special.delegateType : special.bindType) || type;\n        handlers = events[type] || [];\n        tmp = tmp[2] && new RegExp("(^|\\\\.)" + namespaces.join("\\\\.(?:.*\\\\.|)") + "(\\\\.|$)"); // Remove matching events\n\n        origCount = j = handlers.length;\n\n        while (j--) {\n          handleObj = handlers[j];\n\n          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {\n            handlers.splice(j, 1);\n\n            if (handleObj.selector) {\n              handlers.delegateCount--;\n            }\n\n            if (special.remove) {\n              special.remove.call(elem, handleObj);\n            }\n          }\n        } // Remove generic event handler if we removed something and no more handlers exist\n        // (avoids potential for endless recursion during removal of special event handlers)\n\n\n        if (origCount && !handlers.length) {\n          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {\n            jQuery.removeEvent(elem, type, elemData.handle);\n          }\n\n          delete events[type];\n        }\n      } // Remove data and the expando if it\'s no longer used\n\n\n      if (jQuery.isEmptyObject(events)) {\n        dataPriv.remove(elem, "handle events");\n      }\n    },\n    dispatch: function dispatch(nativeEvent) {\n      var i,\n          j,\n          ret,\n          matched,\n          handleObj,\n          handlerQueue,\n          args = new Array(arguments.length),\n          // Make a writable jQuery.Event from the native event object\n      event = jQuery.event.fix(nativeEvent),\n          handlers = (dataPriv.get(this, "events") || Object.create(null))[event.type] || [],\n          special = jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event\n\n      args[0] = event;\n\n      for (i = 1; i < arguments.length; i++) {\n        args[i] = arguments[i];\n      }\n\n      event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired\n\n      if (special.preDispatch && special.preDispatch.call(this, event) === false) {\n        return;\n      } // Determine handlers\n\n\n      handlerQueue = jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us\n\n      i = 0;\n\n      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {\n        event.currentTarget = matched.elem;\n        j = 0;\n\n        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {\n          // If the event is namespaced, then each handler is only invoked if it is\n          // specially universal or its namespaces are a superset of the event\'s.\n          if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {\n            event.handleObj = handleObj;\n            event.data = handleObj.data;\n            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);\n\n            if (ret !== undefined) {\n              if ((event.result = ret) === false) {\n                event.preventDefault();\n                event.stopPropagation();\n              }\n            }\n          }\n        }\n      } // Call the postDispatch hook for the mapped type\n\n\n      if (special.postDispatch) {\n        special.postDispatch.call(this, event);\n      }\n\n      return event.result;\n    },\n    handlers: function handlers(event, _handlers) {\n      var i,\n          handleObj,\n          sel,\n          matchedHandlers,\n          matchedSelectors,\n          handlerQueue = [],\n          delegateCount = _handlers.delegateCount,\n          cur = event.target; // Find delegate handlers\n\n      if (delegateCount && // Support: IE <=9\n      // Black-hole SVG <use> instance trees (trac-13180)\n      cur.nodeType && // Support: Firefox <=42\n      // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n      // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n      // Support: IE 11 only\n      // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)\n      !(event.type === "click" && event.button >= 1)) {\n        for (; cur !== this; cur = cur.parentNode || this) {\n          // Don\'t check non-elements (#13208)\n          // Don\'t process clicks on disabled elements (#6911, #8165, #11382, #11764)\n          if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {\n            matchedHandlers = [];\n            matchedSelectors = {};\n\n            for (i = 0; i < delegateCount; i++) {\n              handleObj = _handlers[i]; // Don\'t conflict with Object.prototype properties (#13203)\n\n              sel = handleObj.selector + " ";\n\n              if (matchedSelectors[sel] === undefined) {\n                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;\n              }\n\n              if (matchedSelectors[sel]) {\n                matchedHandlers.push(handleObj);\n              }\n            }\n\n            if (matchedHandlers.length) {\n              handlerQueue.push({\n                elem: cur,\n                handlers: matchedHandlers\n              });\n            }\n          }\n        }\n      } // Add the remaining (directly-bound) handlers\n\n\n      cur = this;\n\n      if (delegateCount < _handlers.length) {\n        handlerQueue.push({\n          elem: cur,\n          handlers: _handlers.slice(delegateCount)\n        });\n      }\n\n      return handlerQueue;\n    },\n    addProp: function addProp(name, hook) {\n      Object.defineProperty(jQuery.Event.prototype, name, {\n        enumerable: true,\n        configurable: true,\n        get: isFunction(hook) ? function () {\n          if (this.originalEvent) {\n            return hook(this.originalEvent);\n          }\n        } : function () {\n          if (this.originalEvent) {\n            return this.originalEvent[name];\n          }\n        },\n        set: function set(value) {\n          Object.defineProperty(this, name, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: value\n          });\n        }\n      });\n    },\n    fix: function fix(originalEvent) {\n      return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);\n    },\n    special: {\n      load: {\n        // Prevent triggered image.load events from bubbling to window.load\n        noBubble: true\n      },\n      click: {\n        // Utilize native event to ensure correct state for checkable inputs\n        setup: function setup(data) {\n          // For mutual compressibility with _default, replace `this` access with a local var.\n          // `|| data` is dead code meant only to preserve the variable through minification.\n          var el = this || data; // Claim the first handler\n\n          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {\n            // dataPriv.set( el, "click", ... )\n            leverageNative(el, "click", returnTrue);\n          } // Return false to allow normal processing in the caller\n\n\n          return false;\n        },\n        trigger: function trigger(data) {\n          // For mutual compressibility with _default, replace `this` access with a local var.\n          // `|| data` is dead code meant only to preserve the variable through minification.\n          var el = this || data; // Force setup before triggering a click\n\n          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {\n            leverageNative(el, "click");\n          } // Return non-false to allow normal event-path propagation\n\n\n          return true;\n        },\n        // For cross-browser consistency, suppress native .click() on links\n        // Also prevent it if we\'re currently inside a leveraged native-event stack\n        _default: function _default(event) {\n          var target = event.target;\n          return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");\n        }\n      },\n      beforeunload: {\n        postDispatch: function postDispatch(event) {\n          // Support: Firefox 20+\n          // Firefox doesn\'t alert if the returnValue field is not set.\n          if (event.result !== undefined && event.originalEvent) {\n            event.originalEvent.returnValue = event.result;\n          }\n        }\n      }\n    }\n  }; // Ensure the presence of an event listener that handles manually-triggered\n  // synthetic events by interrupting progress until reinvoked in response to\n  // *native* events that it fires directly, ensuring that state changes have\n  // already occurred before other listeners are invoked.\n\n  function leverageNative(el, type, expectSync) {\n    // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\n    if (!expectSync) {\n      if (dataPriv.get(el, type) === undefined) {\n        jQuery.event.add(el, type, returnTrue);\n      }\n\n      return;\n    } // Register the controller as a special universal handler for all event namespaces\n\n\n    dataPriv.set(el, type, false);\n    jQuery.event.add(el, type, {\n      namespace: false,\n      handler: function handler(event) {\n        var notAsync,\n            result,\n            saved = dataPriv.get(this, type);\n\n        if (event.isTrigger & 1 && this[type]) {\n          // Interrupt processing of the outer synthetic .trigger()ed event\n          // Saved data should be false in such cases, but might be a leftover capture object\n          // from an async native handler (gh-4350)\n          if (!saved.length) {\n            // Store arguments for use when handling the inner native event\n            // There will always be at least one argument (an event object), so this array\n            // will not be confused with a leftover capture object.\n            saved = _slice.call(arguments);\n            dataPriv.set(this, type, saved); // Trigger the native event and capture its result\n            // Support: IE <=9 - 11+\n            // focus() and blur() are asynchronous\n\n            notAsync = expectSync(this, type);\n            this[type]();\n            result = dataPriv.get(this, type);\n\n            if (saved !== result || notAsync) {\n              dataPriv.set(this, type, false);\n            } else {\n              result = {};\n            }\n\n            if (saved !== result) {\n              // Cancel the outer synthetic event\n              event.stopImmediatePropagation();\n              event.preventDefault(); // Support: Chrome 86+\n              // In Chrome, if an element having a focusout handler is blurred by\n              // clicking outside of it, it invokes the handler synchronously. If\n              // that handler calls `.remove()` on the element, the data is cleared,\n              // leaving `result` undefined. We need to guard against this.\n\n              return result && result.value;\n            } // If this is an inner synthetic event for an event with a bubbling surrogate\n            // (focus or blur), assume that the surrogate already propagated from triggering the\n            // native event and prevent that from happening again here.\n            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n            // bubbling surrogate propagates *after* the non-bubbling base), but that seems\n            // less bad than duplication.\n\n          } else if ((jQuery.event.special[type] || {}).delegateType) {\n            event.stopPropagation();\n          } // If this is a native event triggered above, everything is now in order\n          // Fire an inner synthetic event with the original arguments\n\n        } else if (saved.length) {\n          // ...and capture the result\n          dataPriv.set(this, type, {\n            value: jQuery.event.trigger( // Support: IE <=9 - 11+\n            // Extend with the prototype to reset the above stopImmediatePropagation()\n            jQuery.extend(saved[0], jQuery.Event.prototype), saved.slice(1), this)\n          }); // Abort handling of the native event\n\n          event.stopImmediatePropagation();\n        }\n      }\n    });\n  }\n\n  jQuery.removeEvent = function (elem, type, handle) {\n    // This "if" is needed for plain objects\n    if (elem.removeEventListener) {\n      elem.removeEventListener(type, handle);\n    }\n  };\n\n  jQuery.Event = function (src, props) {\n    // Allow instantiation without the \'new\' keyword\n    if (!(this instanceof jQuery.Event)) {\n      return new jQuery.Event(src, props);\n    } // Event object\n\n\n    if (src && src.type) {\n      this.originalEvent = src;\n      this.type = src.type; // Events bubbling up the document may have been marked as prevented\n      // by a handler lower down the tree; reflect the correct value.\n\n      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only\n      src.returnValue === false ? returnTrue : returnFalse; // Create target properties\n      // Support: Safari <=6 - 7 only\n      // Target should not be a text node (#504, #13143)\n\n      this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;\n      this.currentTarget = src.currentTarget;\n      this.relatedTarget = src.relatedTarget; // Event type\n    } else {\n      this.type = src;\n    } // Put explicitly provided properties onto the event object\n\n\n    if (props) {\n      jQuery.extend(this, props);\n    } // Create a timestamp if incoming event doesn\'t have one\n\n\n    this.timeStamp = src && src.timeStamp || Date.now(); // Mark it as fixed\n\n    this[jQuery.expando] = true;\n  }; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n\n\n  jQuery.Event.prototype = {\n    constructor: jQuery.Event,\n    isDefaultPrevented: returnFalse,\n    isPropagationStopped: returnFalse,\n    isImmediatePropagationStopped: returnFalse,\n    isSimulated: false,\n    preventDefault: function preventDefault() {\n      var e = this.originalEvent;\n      this.isDefaultPrevented = returnTrue;\n\n      if (e && !this.isSimulated) {\n        e.preventDefault();\n      }\n    },\n    stopPropagation: function stopPropagation() {\n      var e = this.originalEvent;\n      this.isPropagationStopped = returnTrue;\n\n      if (e && !this.isSimulated) {\n        e.stopPropagation();\n      }\n    },\n    stopImmediatePropagation: function stopImmediatePropagation() {\n      var e = this.originalEvent;\n      this.isImmediatePropagationStopped = returnTrue;\n\n      if (e && !this.isSimulated) {\n        e.stopImmediatePropagation();\n      }\n\n      this.stopPropagation();\n    }\n  }; // Includes all common event props including KeyEvent and MouseEvent specific props\n\n  jQuery.each({\n    altKey: true,\n    bubbles: true,\n    cancelable: true,\n    changedTouches: true,\n    ctrlKey: true,\n    detail: true,\n    eventPhase: true,\n    metaKey: true,\n    pageX: true,\n    pageY: true,\n    shiftKey: true,\n    view: true,\n    "char": true,\n    code: true,\n    charCode: true,\n    key: true,\n    keyCode: true,\n    button: true,\n    buttons: true,\n    clientX: true,\n    clientY: true,\n    offsetX: true,\n    offsetY: true,\n    pointerId: true,\n    pointerType: true,\n    screenX: true,\n    screenY: true,\n    targetTouches: true,\n    toElement: true,\n    touches: true,\n    which: true\n  }, jQuery.event.addProp);\n  jQuery.each({\n    focus: "focusin",\n    blur: "focusout"\n  }, function (type, delegateType) {\n    jQuery.event.special[type] = {\n      // Utilize native event if possible so blur/focus sequence is correct\n      setup: function setup() {\n        // Claim the first handler\n        // dataPriv.set( this, "focus", ... )\n        // dataPriv.set( this, "blur", ... )\n        leverageNative(this, type, expectSync); // Return false to allow normal processing in the caller\n\n        return false;\n      },\n      trigger: function trigger() {\n        // Force setup before trigger\n        leverageNative(this, type); // Return non-false to allow normal event-path propagation\n\n        return true;\n      },\n      // Suppress native focus or blur as it\'s already being fired\n      // in leverageNative.\n      _default: function _default() {\n        return true;\n      },\n      delegateType: delegateType\n    };\n  }); // Create mouseenter/leave events using mouseover/out and event-time checks\n  // so that event delegation works in jQuery.\n  // Do the same for pointerenter/pointerleave and pointerover/pointerout\n  //\n  // Support: Safari 7 only\n  // Safari sends mouseenter too often; see:\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n  // for the description of the bug (it existed in older Chrome versions as well).\n\n  jQuery.each({\n    mouseenter: "mouseover",\n    mouseleave: "mouseout",\n    pointerenter: "pointerover",\n    pointerleave: "pointerout"\n  }, function (orig, fix) {\n    jQuery.event.special[orig] = {\n      delegateType: fix,\n      bindType: fix,\n      handle: function handle(event) {\n        var ret,\n            target = this,\n            related = event.relatedTarget,\n            handleObj = event.handleObj; // For mouseenter/leave call the handler if related is outside the target.\n        // NB: No relatedTarget if the mouse left/entered the browser window\n\n        if (!related || related !== target && !jQuery.contains(target, related)) {\n          event.type = handleObj.origType;\n          ret = handleObj.handler.apply(this, arguments);\n          event.type = fix;\n        }\n\n        return ret;\n      }\n    };\n  });\n  jQuery.fn.extend({\n    on: function on(types, selector, data, fn) {\n      return _on(this, types, selector, data, fn);\n    },\n    one: function one(types, selector, data, fn) {\n      return _on(this, types, selector, data, fn, 1);\n    },\n    off: function off(types, selector, fn) {\n      var handleObj, type;\n\n      if (types && types.preventDefault && types.handleObj) {\n        // ( event )  dispatched jQuery.Event\n        handleObj = types.handleObj;\n        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);\n        return this;\n      }\n\n      if (_typeof(types) === "object") {\n        // ( types-object [, selector] )\n        for (type in types) {\n          this.off(type, selector, types[type]);\n        }\n\n        return this;\n      }\n\n      if (selector === false || typeof selector === "function") {\n        // ( types [, fn] )\n        fn = selector;\n        selector = undefined;\n      }\n\n      if (fn === false) {\n        fn = returnFalse;\n      }\n\n      return this.each(function () {\n        jQuery.event.remove(this, types, fn, selector);\n      });\n    }\n  });\n  var // Support: IE <=10 - 11, Edge 12 - 13 only\n  // In IE/Edge using regex groups here causes severe slowdowns.\n  // See https://connect.microsoft.com/IE/feedback/details/1736512/\n  rnoInnerhtml = /<script|<style|<link/i,\n      // checked="checked" or checked\n  rchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n      rcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g; // Prefer a tbody over its parent table for containing new rows\n\n  function manipulationTarget(elem, content) {\n    if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {\n      return jQuery(elem).children("tbody")[0] || elem;\n    }\n\n    return elem;\n  } // Replace/restore the type attribute of script elements for safe DOM manipulation\n\n\n  function disableScript(elem) {\n    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;\n    return elem;\n  }\n\n  function restoreScript(elem) {\n    if ((elem.type || "").slice(0, 5) === "true/") {\n      elem.type = elem.type.slice(5);\n    } else {\n      elem.removeAttribute("type");\n    }\n\n    return elem;\n  }\n\n  function cloneCopyEvent(src, dest) {\n    var i, l, type, pdataOld, udataOld, udataCur, events;\n\n    if (dest.nodeType !== 1) {\n      return;\n    } // 1. Copy private data: events, handlers, etc.\n\n\n    if (dataPriv.hasData(src)) {\n      pdataOld = dataPriv.get(src);\n      events = pdataOld.events;\n\n      if (events) {\n        dataPriv.remove(dest, "handle events");\n\n        for (type in events) {\n          for (i = 0, l = events[type].length; i < l; i++) {\n            jQuery.event.add(dest, type, events[type][i]);\n          }\n        }\n      }\n    } // 2. Copy user data\n\n\n    if (dataUser.hasData(src)) {\n      udataOld = dataUser.access(src);\n      udataCur = jQuery.extend({}, udataOld);\n      dataUser.set(dest, udataCur);\n    }\n  } // Fix IE bugs, see support tests\n\n\n  function fixInput(src, dest) {\n    var nodeName = dest.nodeName.toLowerCase(); // Fails to persist the checked state of a cloned checkbox or radio button.\n\n    if (nodeName === "input" && rcheckableType.test(src.type)) {\n      dest.checked = src.checked; // Fails to return the selected option to the default selected state when cloning options\n    } else if (nodeName === "input" || nodeName === "textarea") {\n      dest.defaultValue = src.defaultValue;\n    }\n  }\n\n  function domManip(collection, args, callback, ignored) {\n    // Flatten any nested arrays\n    args = flat(args);\n    var fragment,\n        first,\n        scripts,\n        hasScripts,\n        node,\n        doc,\n        i = 0,\n        l = collection.length,\n        iNoClone = l - 1,\n        value = args[0],\n        valueIsFunction = isFunction(value); // We can\'t cloneNode fragments that contain checked, in WebKit\n\n    if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {\n      return collection.each(function (index) {\n        var self = collection.eq(index);\n\n        if (valueIsFunction) {\n          args[0] = value.call(this, index, self.html());\n        }\n\n        domManip(self, args, callback, ignored);\n      });\n    }\n\n    if (l) {\n      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);\n      first = fragment.firstChild;\n\n      if (fragment.childNodes.length === 1) {\n        fragment = first;\n      } // Require either new content or an interest in ignored elements to invoke the callback\n\n\n      if (first || ignored) {\n        scripts = jQuery.map(getAll(fragment, "script"), disableScript);\n        hasScripts = scripts.length; // Use the original fragment for the last item\n        // instead of the first because it can end up\n        // being emptied incorrectly in certain situations (#8070).\n\n        for (; i < l; i++) {\n          node = fragment;\n\n          if (i !== iNoClone) {\n            node = jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration\n\n            if (hasScripts) {\n              // Support: Android <=4.0 only, PhantomJS 1 only\n              // push.apply(_, arraylike) throws on ancient WebKit\n              jQuery.merge(scripts, getAll(node, "script"));\n            }\n          }\n\n          callback.call(collection[i], node, i);\n        }\n\n        if (hasScripts) {\n          doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts\n\n          jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion\n\n          for (i = 0; i < hasScripts; i++) {\n            node = scripts[i];\n\n            if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {\n              if (node.src && (node.type || "").toLowerCase() !== "module") {\n                // Optional AJAX dependency, but won\'t run scripts if not present\n                if (jQuery._evalUrl && !node.noModule) {\n                  jQuery._evalUrl(node.src, {\n                    nonce: node.nonce || node.getAttribute("nonce")\n                  }, doc);\n                }\n              } else {\n                DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return collection;\n  }\n\n  function _remove(elem, selector, keepData) {\n    var node,\n        nodes = selector ? jQuery.filter(selector, elem) : elem,\n        i = 0;\n\n    for (; (node = nodes[i]) != null; i++) {\n      if (!keepData && node.nodeType === 1) {\n        jQuery.cleanData(getAll(node));\n      }\n\n      if (node.parentNode) {\n        if (keepData && isAttached(node)) {\n          setGlobalEval(getAll(node, "script"));\n        }\n\n        node.parentNode.removeChild(node);\n      }\n    }\n\n    return elem;\n  }\n\n  jQuery.extend({\n    htmlPrefilter: function htmlPrefilter(html) {\n      return html;\n    },\n    clone: function clone(elem, dataAndEvents, deepDataAndEvents) {\n      var i,\n          l,\n          srcElements,\n          destElements,\n          clone = elem.cloneNode(true),\n          inPage = isAttached(elem); // Fix IE cloning issues\n\n      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {\n        // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n        destElements = getAll(clone);\n        srcElements = getAll(elem);\n\n        for (i = 0, l = srcElements.length; i < l; i++) {\n          fixInput(srcElements[i], destElements[i]);\n        }\n      } // Copy the events from the original to the clone\n\n\n      if (dataAndEvents) {\n        if (deepDataAndEvents) {\n          srcElements = srcElements || getAll(elem);\n          destElements = destElements || getAll(clone);\n\n          for (i = 0, l = srcElements.length; i < l; i++) {\n            cloneCopyEvent(srcElements[i], destElements[i]);\n          }\n        } else {\n          cloneCopyEvent(elem, clone);\n        }\n      } // Preserve script evaluation history\n\n\n      destElements = getAll(clone, "script");\n\n      if (destElements.length > 0) {\n        setGlobalEval(destElements, !inPage && getAll(elem, "script"));\n      } // Return the cloned set\n\n\n      return clone;\n    },\n    cleanData: function cleanData(elems) {\n      var data,\n          elem,\n          type,\n          special = jQuery.event.special,\n          i = 0;\n\n      for (; (elem = elems[i]) !== undefined; i++) {\n        if (acceptData(elem)) {\n          if (data = elem[dataPriv.expando]) {\n            if (data.events) {\n              for (type in data.events) {\n                if (special[type]) {\n                  jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove\'s overhead\n                } else {\n                  jQuery.removeEvent(elem, type, data.handle);\n                }\n              }\n            } // Support: Chrome <=35 - 45+\n            // Assign undefined instead of using delete, see Data#remove\n\n\n            elem[dataPriv.expando] = undefined;\n          }\n\n          if (elem[dataUser.expando]) {\n            // Support: Chrome <=35 - 45+\n            // Assign undefined instead of using delete, see Data#remove\n            elem[dataUser.expando] = undefined;\n          }\n        }\n      }\n    }\n  });\n  jQuery.fn.extend({\n    detach: function detach(selector) {\n      return _remove(this, selector, true);\n    },\n    remove: function remove(selector) {\n      return _remove(this, selector);\n    },\n    text: function text(value) {\n      return access(this, function (value) {\n        return value === undefined ? jQuery.text(this) : this.empty().each(function () {\n          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n            this.textContent = value;\n          }\n        });\n      }, null, value, arguments.length);\n    },\n    append: function append() {\n      return domManip(this, arguments, function (elem) {\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n          var target = manipulationTarget(this, elem);\n          target.appendChild(elem);\n        }\n      });\n    },\n    prepend: function prepend() {\n      return domManip(this, arguments, function (elem) {\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n          var target = manipulationTarget(this, elem);\n          target.insertBefore(elem, target.firstChild);\n        }\n      });\n    },\n    before: function before() {\n      return domManip(this, arguments, function (elem) {\n        if (this.parentNode) {\n          this.parentNode.insertBefore(elem, this);\n        }\n      });\n    },\n    after: function after() {\n      return domManip(this, arguments, function (elem) {\n        if (this.parentNode) {\n          this.parentNode.insertBefore(elem, this.nextSibling);\n        }\n      });\n    },\n    empty: function empty() {\n      var elem,\n          i = 0;\n\n      for (; (elem = this[i]) != null; i++) {\n        if (elem.nodeType === 1) {\n          // Prevent memory leaks\n          jQuery.cleanData(getAll(elem, false)); // Remove any remaining nodes\n\n          elem.textContent = "";\n        }\n      }\n\n      return this;\n    },\n    clone: function clone(dataAndEvents, deepDataAndEvents) {\n      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n      return this.map(function () {\n        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n      });\n    },\n    html: function html(value) {\n      return access(this, function (value) {\n        var elem = this[0] || {},\n            i = 0,\n            l = this.length;\n\n        if (value === undefined && elem.nodeType === 1) {\n          return elem.innerHTML;\n        } // See if we can take a shortcut and just use innerHTML\n\n\n        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {\n          value = jQuery.htmlPrefilter(value);\n\n          try {\n            for (; i < l; i++) {\n              elem = this[i] || {}; // Remove element nodes and prevent memory leaks\n\n              if (elem.nodeType === 1) {\n                jQuery.cleanData(getAll(elem, false));\n                elem.innerHTML = value;\n              }\n            }\n\n            elem = 0; // If using innerHTML throws an exception, use the fallback method\n          } catch (e) {}\n        }\n\n        if (elem) {\n          this.empty().append(value);\n        }\n      }, null, value, arguments.length);\n    },\n    replaceWith: function replaceWith() {\n      var ignored = []; // Make the changes, replacing each non-ignored context element with the new content\n\n      return domManip(this, arguments, function (elem) {\n        var parent = this.parentNode;\n\n        if (jQuery.inArray(this, ignored) < 0) {\n          jQuery.cleanData(getAll(this));\n\n          if (parent) {\n            parent.replaceChild(elem, this);\n          }\n        } // Force callback invocation\n\n      }, ignored);\n    }\n  });\n  jQuery.each({\n    appendTo: "append",\n    prependTo: "prepend",\n    insertBefore: "before",\n    insertAfter: "after",\n    replaceAll: "replaceWith"\n  }, function (name, original) {\n    jQuery.fn[name] = function (selector) {\n      var elems,\n          ret = [],\n          insert = jQuery(selector),\n          last = insert.length - 1,\n          i = 0;\n\n      for (; i <= last; i++) {\n        elems = i === last ? this : this.clone(true);\n        jQuery(insert[i])[original](elems); // Support: Android <=4.0 only, PhantomJS 1 only\n        // .get() because push.apply(_, arraylike) throws on ancient WebKit\n\n        push.apply(ret, elems.get());\n      }\n\n      return this.pushStack(ret);\n    };\n  });\n  var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");\n\n  var getStyles = function getStyles(elem) {\n    // Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n    // IE throws on elements created in popups\n    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"\n    var view = elem.ownerDocument.defaultView;\n\n    if (!view || !view.opener) {\n      view = window;\n    }\n\n    return view.getComputedStyle(elem);\n  };\n\n  var swap = function swap(elem, options, callback) {\n    var ret,\n        name,\n        old = {}; // Remember the old values, and insert the new ones\n\n    for (name in options) {\n      old[name] = elem.style[name];\n      elem.style[name] = options[name];\n    }\n\n    ret = callback.call(elem); // Revert the old values\n\n    for (name in options) {\n      elem.style[name] = old[name];\n    }\n\n    return ret;\n  };\n\n  var rboxStyle = new RegExp(cssExpand.join("|"), "i");\n\n  (function () {\n    // Executing both pixelPosition & boxSizingReliable tests require only one layout\n    // so they\'re executed at the same time to save the second computation.\n    function computeStyleTests() {\n      // This is a singleton, we need to execute it only once\n      if (!div) {\n        return;\n      }\n\n      container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";\n      div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";\n      documentElement.appendChild(container).appendChild(div);\n      var divStyle = window.getComputedStyle(div);\n      pixelPositionVal = divStyle.top !== "1%"; // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\n      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12; // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n      // Some styles come back with percentage values, even though they shouldn\'t\n\n      div.style.right = "60%";\n      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36; // Support: IE 9 - 11 only\n      // Detect misreporting of content dimensions for box-sizing:border-box elements\n\n      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36; // Support: IE 9 only\n      // Detect overflow:scroll screwiness (gh-3699)\n      // Support: Chrome <=64\n      // Don\'t get tricked when zoom affects offsetWidth (gh-4029)\n\n      div.style.position = "absolute";\n      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;\n      documentElement.removeChild(container); // Nullify the div so it wouldn\'t be stored in the memory and\n      // it will also be a sign that checks already performed\n\n      div = null;\n    }\n\n    function roundPixelMeasures(measure) {\n      return Math.round(parseFloat(measure));\n    }\n\n    var pixelPositionVal,\n        boxSizingReliableVal,\n        scrollboxSizeVal,\n        pixelBoxStylesVal,\n        reliableTrDimensionsVal,\n        reliableMarginLeftVal,\n        container = document.createElement("div"),\n        div = document.createElement("div"); // Finish early in limited (non-browser) environments\n\n    if (!div.style) {\n      return;\n    } // Support: IE <=9 - 11 only\n    // Style of cloned element affects source element cloned (#8908)\n\n\n    div.style.backgroundClip = "content-box";\n    div.cloneNode(true).style.backgroundClip = "";\n    support.clearCloneStyle = div.style.backgroundClip === "content-box";\n    jQuery.extend(support, {\n      boxSizingReliable: function boxSizingReliable() {\n        computeStyleTests();\n        return boxSizingReliableVal;\n      },\n      pixelBoxStyles: function pixelBoxStyles() {\n        computeStyleTests();\n        return pixelBoxStylesVal;\n      },\n      pixelPosition: function pixelPosition() {\n        computeStyleTests();\n        return pixelPositionVal;\n      },\n      reliableMarginLeft: function reliableMarginLeft() {\n        computeStyleTests();\n        return reliableMarginLeftVal;\n      },\n      scrollboxSize: function scrollboxSize() {\n        computeStyleTests();\n        return scrollboxSizeVal;\n      },\n      // Support: IE 9 - 11+, Edge 15 - 18+\n      // IE/Edge misreport `getComputedStyle` of table rows with width/height\n      // set in CSS while `offset*` properties report correct values.\n      // Behavior in IE 9 is more subtle than in newer versions & it passes\n      // some versions of this test; make sure not to make it pass there!\n      //\n      // Support: Firefox 70+\n      // Only Firefox includes border widths\n      // in computed dimensions. (gh-4529)\n      reliableTrDimensions: function reliableTrDimensions() {\n        var table, tr, trChild, trStyle;\n\n        if (reliableTrDimensionsVal == null) {\n          table = document.createElement("table");\n          tr = document.createElement("tr");\n          trChild = document.createElement("div");\n          table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";\n          tr.style.cssText = "border:1px solid"; // Support: Chrome 86+\n          // Height set through cssText does not get applied.\n          // Computed height then comes back as 0.\n\n          tr.style.height = "1px";\n          trChild.style.height = "9px"; // Support: Android 8 Chrome 86+\n          // In our bodyBackground.html iframe,\n          // display for all div elements is set to "inline",\n          // which causes a problem only in Android 8 Chrome 86.\n          // Ensuring the div is display: block\n          // gets around this issue.\n\n          trChild.style.display = "block";\n          documentElement.appendChild(table).appendChild(tr).appendChild(trChild);\n          trStyle = window.getComputedStyle(tr);\n          reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;\n          documentElement.removeChild(table);\n        }\n\n        return reliableTrDimensionsVal;\n      }\n    });\n  })();\n\n  function curCSS(elem, name, computed) {\n    var width,\n        minWidth,\n        maxWidth,\n        ret,\n        // Support: Firefox 51+\n    // Retrieving style before computed somehow\n    // fixes an issue with getting wrong values\n    // on detached elements\n    style = elem.style;\n    computed = computed || getStyles(elem); // getPropertyValue is needed for:\n    //   .css(\'filter\') (IE 9 only, #12537)\n    //   .css(\'--customProperty) (#3144)\n\n    if (computed) {\n      ret = computed.getPropertyValue(name) || computed[name];\n\n      if (ret === "" && !isAttached(elem)) {\n        ret = jQuery.style(elem, name);\n      } // A tribute to the "awesome hack by Dean Edwards"\n      // Android Browser returns percentage for some values,\n      // but width seems to be reliably pixels.\n      // This is against the CSSOM draft spec:\n      // https://drafts.csswg.org/cssom/#resolved-values\n\n\n      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {\n        // Remember the original values\n        width = style.width;\n        minWidth = style.minWidth;\n        maxWidth = style.maxWidth; // Put in the new values to get a computed value out\n\n        style.minWidth = style.maxWidth = style.width = ret;\n        ret = computed.width; // Revert the changed values\n\n        style.width = width;\n        style.minWidth = minWidth;\n        style.maxWidth = maxWidth;\n      }\n    }\n\n    return ret !== undefined ? // Support: IE <=9 - 11 only\n    // IE returns zIndex value as an integer.\n    ret + "" : ret;\n  }\n\n  function addGetHookIf(conditionFn, hookFn) {\n    // Define the hook, we\'ll check on the first run if it\'s really needed.\n    return {\n      get: function get() {\n        if (conditionFn()) {\n          // Hook not needed (or it\'s not possible to use it due\n          // to missing dependency), remove it.\n          delete this.get;\n          return;\n        } // Hook needed; redefine it so that the support test is not executed again.\n\n\n        return (this.get = hookFn).apply(this, arguments);\n      }\n    };\n  }\n\n  var cssPrefixes = ["Webkit", "Moz", "ms"],\n      emptyStyle = document.createElement("div").style,\n      vendorProps = {}; // Return a vendor-prefixed property or undefined\n\n  function vendorPropName(name) {\n    // Check for vendor prefixed names\n    var capName = name[0].toUpperCase() + name.slice(1),\n        i = cssPrefixes.length;\n\n    while (i--) {\n      name = cssPrefixes[i] + capName;\n\n      if (name in emptyStyle) {\n        return name;\n      }\n    }\n  } // Return a potentially-mapped jQuery.cssProps or vendor prefixed property\n\n\n  function finalPropName(name) {\n    var final = jQuery.cssProps[name] || vendorProps[name];\n\n    if (final) {\n      return final;\n    }\n\n    if (name in emptyStyle) {\n      return name;\n    }\n\n    return vendorProps[name] = vendorPropName(name) || name;\n  }\n\n  var // Swappable if display is none or starts with table\n  // except "table", "table-cell", or "table-caption"\n  // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n  rdisplayswap = /^(none|table(?!-c[ea]).+)/,\n      rcustomProp = /^--/,\n      cssShow = {\n    position: "absolute",\n    visibility: "hidden",\n    display: "block"\n  },\n      cssNormalTransform = {\n    letterSpacing: "0",\n    fontWeight: "400"\n  };\n\n  function setPositiveNumber(_elem, value, subtract) {\n    // Any relative (+/-) values have already been\n    // normalized at this point\n    var matches = rcssNum.exec(value);\n    return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks\n    Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;\n  }\n\n  function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {\n    var i = dimension === "width" ? 1 : 0,\n        extra = 0,\n        delta = 0; // Adjustment may not be necessary\n\n    if (box === (isBorderBox ? "border" : "content")) {\n      return 0;\n    }\n\n    for (; i < 4; i += 2) {\n      // Both box models exclude margin\n      if (box === "margin") {\n        delta += jQuery.css(elem, box + cssExpand[i], true, styles);\n      } // If we get here with a content-box, we\'re seeking "padding" or "border" or "margin"\n\n\n      if (!isBorderBox) {\n        // Add padding\n        delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles); // For "border" or "margin", add border\n\n        if (box !== "padding") {\n          delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles); // But still keep track of it otherwise\n        } else {\n          extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);\n        } // If we get here with a border-box (content + padding + border), we\'re seeking "content" or\n        // "padding" or "margin"\n\n      } else {\n        // For "content", subtract padding\n        if (box === "content") {\n          delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);\n        } // For "content" or "padding", subtract border\n\n\n        if (box !== "margin") {\n          delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);\n        }\n      }\n    } // Account for positive content-box scroll gutter when requested by providing computedVal\n\n\n    if (!isBorderBox && computedVal >= 0) {\n      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n      // Assuming integer scroll gutter, subtract the rest and round down\n      delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5 // If offsetWidth/offsetHeight is unknown, then we can\'t determine content-box scroll gutter\n      // Use an explicit zero to avoid NaN (gh-3964)\n      )) || 0;\n    }\n\n    return delta;\n  }\n\n  function getWidthOrHeight(elem, dimension, extra) {\n    // Start with computed style\n    var styles = getStyles(elem),\n        // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n    // Fake content-box until we know it\'s needed to know the true value.\n    boxSizingNeeded = !support.boxSizingReliable() || extra,\n        isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",\n        valueIsBorderBox = isBorderBox,\n        val = curCSS(elem, dimension, styles),\n        offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1); // Support: Firefox <=54\n    // Return a confounding non-pixel value or feign ignorance, as appropriate.\n\n    if (rnumnonpx.test(val)) {\n      if (!extra) {\n        return val;\n      }\n\n      val = "auto";\n    } // Support: IE 9 - 11 only\n    // Use offsetWidth/offsetHeight for when box sizing is unreliable.\n    // In those cases, the computed value can be trusted to be border-box.\n\n\n    if ((!support.boxSizingReliable() && isBorderBox || // Support: IE 10 - 11+, Edge 15 - 18+\n    // IE/Edge misreport `getComputedStyle` of table rows with width/height\n    // set in CSS while `offset*` properties report correct values.\n    // Interestingly, in some cases IE 9 doesn\'t suffer from this issue.\n    !support.reliableTrDimensions() && nodeName(elem, "tr") || // Fall back to offsetWidth/offsetHeight when value is "auto"\n    // This happens for inline elements with no explicit setting (gh-3571)\n    val === "auto" || // Support: Android <=4.1 - 4.3 only\n    // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n    !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") && // Make sure the element is visible & connected\n    elem.getClientRects().length) {\n      isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box"; // Where available, offsetWidth/offsetHeight approximate border box dimensions.\n      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n      // retrieved value as a content box dimension.\n\n      valueIsBorderBox = offsetProp in elem;\n\n      if (valueIsBorderBox) {\n        val = elem[offsetProp];\n      }\n    } // Normalize "" and auto\n\n\n    val = parseFloat(val) || 0; // Adjust for the element\'s box model\n\n    return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, // Provide the current computed size to request scroll gutter calculation (gh-3589)\n    val) + "px";\n  }\n\n  jQuery.extend({\n    // Add in style property hooks for overriding the default\n    // behavior of getting and setting a style property\n    cssHooks: {\n      opacity: {\n        get: function get(elem, computed) {\n          if (computed) {\n            // We should always get a number back from opacity\n            var ret = curCSS(elem, "opacity");\n            return ret === "" ? "1" : ret;\n          }\n        }\n      }\n    },\n    // Don\'t automatically add "px" to these possibly-unitless properties\n    cssNumber: {\n      "animationIterationCount": true,\n      "columnCount": true,\n      "fillOpacity": true,\n      "flexGrow": true,\n      "flexShrink": true,\n      "fontWeight": true,\n      "gridArea": true,\n      "gridColumn": true,\n      "gridColumnEnd": true,\n      "gridColumnStart": true,\n      "gridRow": true,\n      "gridRowEnd": true,\n      "gridRowStart": true,\n      "lineHeight": true,\n      "opacity": true,\n      "order": true,\n      "orphans": true,\n      "widows": true,\n      "zIndex": true,\n      "zoom": true\n    },\n    // Add in properties whose names you wish to fix before\n    // setting or getting the value\n    cssProps: {},\n    // Get and set the style property on a DOM Node\n    style: function style(elem, name, value, extra) {\n      // Don\'t set styles on text and comment nodes\n      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {\n        return;\n      } // Make sure that we\'re working with the right name\n\n\n      var ret,\n          type,\n          hooks,\n          origName = camelCase(name),\n          isCustomProp = rcustomProp.test(name),\n          style = elem.style; // Make sure that we\'re working with the right name. We don\'t\n      // want to query the value if it is a CSS custom property\n      // since they are user-defined.\n\n      if (!isCustomProp) {\n        name = finalPropName(origName);\n      } // Gets hook for the prefixed version, then unprefixed version\n\n\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we\'re setting a value\n\n      if (value !== undefined) {\n        type = _typeof(value); // Convert "+=" or "-=" to relative numbers (#7345)\n\n        if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {\n          value = adjustCSS(elem, name, ret); // Fixes bug #9237\n\n          type = "number";\n        } // Make sure that null and NaN values aren\'t set (#7116)\n\n\n        if (value == null || value !== value) {\n          return;\n        } // If a number was passed in, add the unit (except for certain CSS properties)\n        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n        // "px" to a few hardcoded values.\n\n\n        if (type === "number" && !isCustomProp) {\n          value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");\n        } // background-* props affect original clone\'s values\n\n\n        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {\n          style[name] = "inherit";\n        } // If a hook was provided, use that value, otherwise just set the specified value\n\n\n        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {\n          if (isCustomProp) {\n            style.setProperty(name, value);\n          } else {\n            style[name] = value;\n          }\n        }\n      } else {\n        // If a hook was provided get the non-computed value from there\n        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {\n          return ret;\n        } // Otherwise just get the value from the style object\n\n\n        return style[name];\n      }\n    },\n    css: function css(elem, name, extra, styles) {\n      var val,\n          num,\n          hooks,\n          origName = camelCase(name),\n          isCustomProp = rcustomProp.test(name); // Make sure that we\'re working with the right name. We don\'t\n      // want to modify the value if it is a CSS custom property\n      // since they are user-defined.\n\n      if (!isCustomProp) {\n        name = finalPropName(origName);\n      } // Try prefixed name followed by the unprefixed name\n\n\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there\n\n      if (hooks && "get" in hooks) {\n        val = hooks.get(elem, true, extra);\n      } // Otherwise, if a way to get the computed value exists, use that\n\n\n      if (val === undefined) {\n        val = curCSS(elem, name, styles);\n      } // Convert "normal" to computed value\n\n\n      if (val === "normal" && name in cssNormalTransform) {\n        val = cssNormalTransform[name];\n      } // Make numeric if forced or a qualifier was provided and val looks numeric\n\n\n      if (extra === "" || extra) {\n        num = parseFloat(val);\n        return extra === true || isFinite(num) ? num || 0 : val;\n      }\n\n      return val;\n    }\n  });\n  jQuery.each(["height", "width"], function (_i, dimension) {\n    jQuery.cssHooks[dimension] = {\n      get: function get(elem, computed, extra) {\n        if (computed) {\n          // Certain elements can have dimension info if we invisibly show them\n          // but it must have a current display style that would benefit\n          return rdisplayswap.test(jQuery.css(elem, "display")) && (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {\n            return getWidthOrHeight(elem, dimension, extra);\n          }) : getWidthOrHeight(elem, dimension, extra);\n        }\n      },\n      set: function set(elem, value, extra) {\n        var matches,\n            styles = getStyles(elem),\n            // Only read styles.position if the test has a chance to fail\n        // to avoid forcing a reflow.\n        scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute",\n            // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n        boxSizingNeeded = scrollboxSizeBuggy || extra,\n            isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",\n            subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0; // Account for unreliable border-box dimensions by comparing offset* to computed and\n        // faking a content-box to get border and padding (gh-3699)\n\n        if (isBorderBox && scrollboxSizeBuggy) {\n          subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);\n        } // Convert to pixels if value adjustment is needed\n\n\n        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {\n          elem.style[dimension] = value;\n          value = jQuery.css(elem, dimension);\n        }\n\n        return setPositiveNumber(elem, value, subtract);\n      }\n    };\n  });\n  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {\n    if (computed) {\n      return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {\n        marginLeft: 0\n      }, function () {\n        return elem.getBoundingClientRect().left;\n      })) + "px";\n    }\n  }); // These hooks are used by animate to expand properties\n\n  jQuery.each({\n    margin: "",\n    padding: "",\n    border: "Width"\n  }, function (prefix, suffix) {\n    jQuery.cssHooks[prefix + suffix] = {\n      expand: function expand(value) {\n        var i = 0,\n            expanded = {},\n            // Assumes a single number if not a string\n        parts = typeof value === "string" ? value.split(" ") : [value];\n\n        for (; i < 4; i++) {\n          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];\n        }\n\n        return expanded;\n      }\n    };\n\n    if (prefix !== "margin") {\n      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;\n    }\n  });\n  jQuery.fn.extend({\n    css: function css(name, value) {\n      return access(this, function (elem, name, value) {\n        var styles,\n            len,\n            map = {},\n            i = 0;\n\n        if (Array.isArray(name)) {\n          styles = getStyles(elem);\n          len = name.length;\n\n          for (; i < len; i++) {\n            map[name[i]] = jQuery.css(elem, name[i], false, styles);\n          }\n\n          return map;\n        }\n\n        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\n      }, name, value, arguments.length > 1);\n    }\n  });\n\n  function Tween(elem, options, prop, end, easing) {\n    return new Tween.prototype.init(elem, options, prop, end, easing);\n  }\n\n  jQuery.Tween = Tween;\n  Tween.prototype = {\n    constructor: Tween,\n    init: function init(elem, options, prop, end, easing, unit) {\n      this.elem = elem;\n      this.prop = prop;\n      this.easing = easing || jQuery.easing._default;\n      this.options = options;\n      this.start = this.now = this.cur();\n      this.end = end;\n      this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");\n    },\n    cur: function cur() {\n      var hooks = Tween.propHooks[this.prop];\n      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);\n    },\n    run: function run(percent) {\n      var eased,\n          hooks = Tween.propHooks[this.prop];\n\n      if (this.options.duration) {\n        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);\n      } else {\n        this.pos = eased = percent;\n      }\n\n      this.now = (this.end - this.start) * eased + this.start;\n\n      if (this.options.step) {\n        this.options.step.call(this.elem, this.now, this);\n      }\n\n      if (hooks && hooks.set) {\n        hooks.set(this);\n      } else {\n        Tween.propHooks._default.set(this);\n      }\n\n      return this;\n    }\n  };\n  Tween.prototype.init.prototype = Tween.prototype;\n  Tween.propHooks = {\n    _default: {\n      get: function get(tween) {\n        var result; // Use a property on the element directly when it is not a DOM element,\n        // or when there is no matching style property that exists.\n\n        if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {\n          return tween.elem[tween.prop];\n        } // Passing an empty string as a 3rd parameter to .css will automatically\n        // attempt a parseFloat and fallback to a string if the parse fails.\n        // Simple values such as "10px" are parsed to Float;\n        // complex values such as "rotate(1rad)" are returned as-is.\n\n\n        result = jQuery.css(tween.elem, tween.prop, ""); // Empty strings, null, undefined and "auto" are converted to 0.\n\n        return !result || result === "auto" ? 0 : result;\n      },\n      set: function set(tween) {\n        // Use step hook for back compat.\n        // Use cssHook if its there.\n        // Use .style if available and use plain properties where available.\n        if (jQuery.fx.step[tween.prop]) {\n          jQuery.fx.step[tween.prop](tween);\n        } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {\n          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);\n        } else {\n          tween.elem[tween.prop] = tween.now;\n        }\n      }\n    }\n  }; // Support: IE <=9 only\n  // Panic based approach to setting things on disconnected nodes\n\n  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n    set: function set(tween) {\n      if (tween.elem.nodeType && tween.elem.parentNode) {\n        tween.elem[tween.prop] = tween.now;\n      }\n    }\n  };\n  jQuery.easing = {\n    linear: function linear(p) {\n      return p;\n    },\n    swing: function swing(p) {\n      return 0.5 - Math.cos(p * Math.PI) / 2;\n    },\n    _default: "swing"\n  };\n  jQuery.fx = Tween.prototype.init; // Back compat <1.8 extension point\n\n  jQuery.fx.step = {};\n  var fxNow,\n      inProgress,\n      rfxtypes = /^(?:toggle|show|hide)$/,\n      rrun = /queueHooks$/;\n\n  function schedule() {\n    if (inProgress) {\n      if (document.hidden === false && window.requestAnimationFrame) {\n        window.requestAnimationFrame(schedule);\n      } else {\n        window.setTimeout(schedule, jQuery.fx.interval);\n      }\n\n      jQuery.fx.tick();\n    }\n  } // Animations created synchronously will run synchronously\n\n\n  function createFxNow() {\n    window.setTimeout(function () {\n      fxNow = undefined;\n    });\n    return fxNow = Date.now();\n  } // Generate parameters to create a standard animation\n\n\n  function genFx(type, includeWidth) {\n    var which,\n        i = 0,\n        attrs = {\n      height: type\n    }; // If we include width, step value is 1 to do all cssExpand values,\n    // otherwise step value is 2 to skip over Left and Right\n\n    includeWidth = includeWidth ? 1 : 0;\n\n    for (; i < 4; i += 2 - includeWidth) {\n      which = cssExpand[i];\n      attrs["margin" + which] = attrs["padding" + which] = type;\n    }\n\n    if (includeWidth) {\n      attrs.opacity = attrs.width = type;\n    }\n\n    return attrs;\n  }\n\n  function createTween(value, prop, animation) {\n    var tween,\n        collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),\n        index = 0,\n        length = collection.length;\n\n    for (; index < length; index++) {\n      if (tween = collection[index].call(animation, prop, value)) {\n        // We\'re done with this property\n        return tween;\n      }\n    }\n  }\n\n  function defaultPrefilter(elem, props, opts) {\n    var prop,\n        value,\n        toggle,\n        hooks,\n        oldfire,\n        propTween,\n        restoreDisplay,\n        display,\n        isBox = "width" in props || "height" in props,\n        anim = this,\n        orig = {},\n        style = elem.style,\n        hidden = elem.nodeType && isHiddenWithinTree(elem),\n        dataShow = dataPriv.get(elem, "fxshow"); // Queue-skipping animations hijack the fx hooks\n\n    if (!opts.queue) {\n      hooks = jQuery._queueHooks(elem, "fx");\n\n      if (hooks.unqueued == null) {\n        hooks.unqueued = 0;\n        oldfire = hooks.empty.fire;\n\n        hooks.empty.fire = function () {\n          if (!hooks.unqueued) {\n            oldfire();\n          }\n        };\n      }\n\n      hooks.unqueued++;\n      anim.always(function () {\n        // Ensure the complete handler is called before this completes\n        anim.always(function () {\n          hooks.unqueued--;\n\n          if (!jQuery.queue(elem, "fx").length) {\n            hooks.empty.fire();\n          }\n        });\n      });\n    } // Detect show/hide animations\n\n\n    for (prop in props) {\n      value = props[prop];\n\n      if (rfxtypes.test(value)) {\n        delete props[prop];\n        toggle = toggle || value === "toggle";\n\n        if (value === (hidden ? "hide" : "show")) {\n          // Pretend to be hidden if this is a "show" and\n          // there is still data from a stopped show/hide\n          if (value === "show" && dataShow && dataShow[prop] !== undefined) {\n            hidden = true; // Ignore all other no-op show/hide data\n          } else {\n            continue;\n          }\n        }\n\n        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);\n      }\n    } // Bail out if this is a no-op like .hide().hide()\n\n\n    propTween = !jQuery.isEmptyObject(props);\n\n    if (!propTween && jQuery.isEmptyObject(orig)) {\n      return;\n    } // Restrict "overflow" and "display" styles during box animations\n\n\n    if (isBox && elem.nodeType === 1) {\n      // Support: IE <=9 - 11, Edge 12 - 15\n      // Record all 3 overflow attributes because IE does not infer the shorthand\n      // from identically-valued overflowX and overflowY and Edge just mirrors\n      // the overflowX value there.\n      opts.overflow = [style.overflow, style.overflowX, style.overflowY]; // Identify a display type, preferring old show/hide data over the CSS cascade\n\n      restoreDisplay = dataShow && dataShow.display;\n\n      if (restoreDisplay == null) {\n        restoreDisplay = dataPriv.get(elem, "display");\n      }\n\n      display = jQuery.css(elem, "display");\n\n      if (display === "none") {\n        if (restoreDisplay) {\n          display = restoreDisplay;\n        } else {\n          // Get nonempty value(s) by temporarily forcing visibility\n          showHide([elem], true);\n          restoreDisplay = elem.style.display || restoreDisplay;\n          display = jQuery.css(elem, "display");\n          showHide([elem]);\n        }\n      } // Animate inline elements as inline-block\n\n\n      if (display === "inline" || display === "inline-block" && restoreDisplay != null) {\n        if (jQuery.css(elem, "float") === "none") {\n          // Restore the original display value at the end of pure show/hide animations\n          if (!propTween) {\n            anim.done(function () {\n              style.display = restoreDisplay;\n            });\n\n            if (restoreDisplay == null) {\n              display = style.display;\n              restoreDisplay = display === "none" ? "" : display;\n            }\n          }\n\n          style.display = "inline-block";\n        }\n      }\n    }\n\n    if (opts.overflow) {\n      style.overflow = "hidden";\n      anim.always(function () {\n        style.overflow = opts.overflow[0];\n        style.overflowX = opts.overflow[1];\n        style.overflowY = opts.overflow[2];\n      });\n    } // Implement show/hide animations\n\n\n    propTween = false;\n\n    for (prop in orig) {\n      // General show/hide setup for this element animation\n      if (!propTween) {\n        if (dataShow) {\n          if ("hidden" in dataShow) {\n            hidden = dataShow.hidden;\n          }\n        } else {\n          dataShow = dataPriv.access(elem, "fxshow", {\n            display: restoreDisplay\n          });\n        } // Store hidden/visible for toggle so `.stop().toggle()` "reverses"\n\n\n        if (toggle) {\n          dataShow.hidden = !hidden;\n        } // Show elements before animating them\n\n\n        if (hidden) {\n          showHide([elem], true);\n        }\n        /* eslint-disable no-loop-func */\n\n\n        anim.done(function () {\n          /* eslint-enable no-loop-func */\n          // The final step of a "hide" animation is actually hiding the element\n          if (!hidden) {\n            showHide([elem]);\n          }\n\n          dataPriv.remove(elem, "fxshow");\n\n          for (prop in orig) {\n            jQuery.style(elem, prop, orig[prop]);\n          }\n        });\n      } // Per-property setup\n\n\n      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);\n\n      if (!(prop in dataShow)) {\n        dataShow[prop] = propTween.start;\n\n        if (hidden) {\n          propTween.end = propTween.start;\n          propTween.start = 0;\n        }\n      }\n    }\n  }\n\n  function propFilter(props, specialEasing) {\n    var index, name, easing, value, hooks; // camelCase, specialEasing and expand cssHook pass\n\n    for (index in props) {\n      name = camelCase(index);\n      easing = specialEasing[name];\n      value = props[index];\n\n      if (Array.isArray(value)) {\n        easing = value[1];\n        value = props[index] = value[0];\n      }\n\n      if (index !== name) {\n        props[name] = value;\n        delete props[index];\n      }\n\n      hooks = jQuery.cssHooks[name];\n\n      if (hooks && "expand" in hooks) {\n        value = hooks.expand(value);\n        delete props[name]; // Not quite $.extend, this won\'t overwrite existing keys.\n        // Reusing \'index\' because we have the correct "name"\n\n        for (index in value) {\n          if (!(index in props)) {\n            props[index] = value[index];\n            specialEasing[index] = easing;\n          }\n        }\n      } else {\n        specialEasing[name] = easing;\n      }\n    }\n  }\n\n  function Animation(elem, properties, options) {\n    var result,\n        stopped,\n        index = 0,\n        length = Animation.prefilters.length,\n        deferred = jQuery.Deferred().always(function () {\n      // Don\'t match elem in the :animated selector\n      delete tick.elem;\n    }),\n        tick = function tick() {\n      if (stopped) {\n        return false;\n      }\n\n      var currentTime = fxNow || createFxNow(),\n          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),\n          // Support: Android 2.3 only\n      // Archaic crash bug won\'t allow us to use `1 - ( 0.5 || 0 )` (#12497)\n      temp = remaining / animation.duration || 0,\n          percent = 1 - temp,\n          index = 0,\n          length = animation.tweens.length;\n\n      for (; index < length; index++) {\n        animation.tweens[index].run(percent);\n      }\n\n      deferred.notifyWith(elem, [animation, percent, remaining]); // If there\'s more to do, yield\n\n      if (percent < 1 && length) {\n        return remaining;\n      } // If this was an empty animation, synthesize a final progress notification\n\n\n      if (!length) {\n        deferred.notifyWith(elem, [animation, 1, 0]);\n      } // Resolve the animation and report its conclusion\n\n\n      deferred.resolveWith(elem, [animation]);\n      return false;\n    },\n        animation = deferred.promise({\n      elem: elem,\n      props: jQuery.extend({}, properties),\n      opts: jQuery.extend(true, {\n        specialEasing: {},\n        easing: jQuery.easing._default\n      }, options),\n      originalProperties: properties,\n      originalOptions: options,\n      startTime: fxNow || createFxNow(),\n      duration: options.duration,\n      tweens: [],\n      createTween: function createTween(prop, end) {\n        var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);\n        animation.tweens.push(tween);\n        return tween;\n      },\n      stop: function stop(gotoEnd) {\n        var index = 0,\n            // If we are going to the end, we want to run all the tweens\n        // otherwise we skip this part\n        length = gotoEnd ? animation.tweens.length : 0;\n\n        if (stopped) {\n          return this;\n        }\n\n        stopped = true;\n\n        for (; index < length; index++) {\n          animation.tweens[index].run(1);\n        } // Resolve when we played the last frame; otherwise, reject\n\n\n        if (gotoEnd) {\n          deferred.notifyWith(elem, [animation, 1, 0]);\n          deferred.resolveWith(elem, [animation, gotoEnd]);\n        } else {\n          deferred.rejectWith(elem, [animation, gotoEnd]);\n        }\n\n        return this;\n      }\n    }),\n        props = animation.props;\n\n    propFilter(props, animation.opts.specialEasing);\n\n    for (; index < length; index++) {\n      result = Animation.prefilters[index].call(animation, elem, props, animation.opts);\n\n      if (result) {\n        if (isFunction(result.stop)) {\n          jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);\n        }\n\n        return result;\n      }\n    }\n\n    jQuery.map(props, createTween, animation);\n\n    if (isFunction(animation.opts.start)) {\n      animation.opts.start.call(elem, animation);\n    } // Attach callbacks from options\n\n\n    animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);\n    jQuery.fx.timer(jQuery.extend(tick, {\n      elem: elem,\n      anim: animation,\n      queue: animation.opts.queue\n    }));\n    return animation;\n  }\n\n  jQuery.Animation = jQuery.extend(Animation, {\n    tweeners: {\n      "*": [function (prop, value) {\n        var tween = this.createTween(prop, value);\n        adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);\n        return tween;\n      }]\n    },\n    tweener: function tweener(props, callback) {\n      if (isFunction(props)) {\n        callback = props;\n        props = ["*"];\n      } else {\n        props = props.match(rnothtmlwhite);\n      }\n\n      var prop,\n          index = 0,\n          length = props.length;\n\n      for (; index < length; index++) {\n        prop = props[index];\n        Animation.tweeners[prop] = Animation.tweeners[prop] || [];\n        Animation.tweeners[prop].unshift(callback);\n      }\n    },\n    prefilters: [defaultPrefilter],\n    prefilter: function prefilter(callback, prepend) {\n      if (prepend) {\n        Animation.prefilters.unshift(callback);\n      } else {\n        Animation.prefilters.push(callback);\n      }\n    }\n  });\n\n  jQuery.speed = function (speed, easing, fn) {\n    var opt = speed && _typeof(speed) === "object" ? jQuery.extend({}, speed) : {\n      complete: fn || !fn && easing || isFunction(speed) && speed,\n      duration: speed,\n      easing: fn && easing || easing && !isFunction(easing) && easing\n    }; // Go to the end state if fx are off\n\n    if (jQuery.fx.off) {\n      opt.duration = 0;\n    } else {\n      if (typeof opt.duration !== "number") {\n        if (opt.duration in jQuery.fx.speeds) {\n          opt.duration = jQuery.fx.speeds[opt.duration];\n        } else {\n          opt.duration = jQuery.fx.speeds._default;\n        }\n      }\n    } // Normalize opt.queue - true/undefined/null -> "fx"\n\n\n    if (opt.queue == null || opt.queue === true) {\n      opt.queue = "fx";\n    } // Queueing\n\n\n    opt.old = opt.complete;\n\n    opt.complete = function () {\n      if (isFunction(opt.old)) {\n        opt.old.call(this);\n      }\n\n      if (opt.queue) {\n        jQuery.dequeue(this, opt.queue);\n      }\n    };\n\n    return opt;\n  };\n\n  jQuery.fn.extend({\n    fadeTo: function fadeTo(speed, to, easing, callback) {\n      // Show any hidden elements after setting opacity to 0\n      return this.filter(isHiddenWithinTree).css("opacity", 0).show() // Animate to the value specified\n      .end().animate({\n        opacity: to\n      }, speed, easing, callback);\n    },\n    animate: function animate(prop, speed, easing, callback) {\n      var empty = jQuery.isEmptyObject(prop),\n          optall = jQuery.speed(speed, easing, callback),\n          doAnimation = function doAnimation() {\n        // Operate on a copy of prop so per-property easing won\'t be lost\n        var anim = Animation(this, jQuery.extend({}, prop), optall); // Empty animations, or finishing resolves immediately\n\n        if (empty || dataPriv.get(this, "finish")) {\n          anim.stop(true);\n        }\n      };\n\n      doAnimation.finish = doAnimation;\n      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);\n    },\n    stop: function stop(type, clearQueue, gotoEnd) {\n      var stopQueue = function stopQueue(hooks) {\n        var stop = hooks.stop;\n        delete hooks.stop;\n        stop(gotoEnd);\n      };\n\n      if (typeof type !== "string") {\n        gotoEnd = clearQueue;\n        clearQueue = type;\n        type = undefined;\n      }\n\n      if (clearQueue) {\n        this.queue(type || "fx", []);\n      }\n\n      return this.each(function () {\n        var dequeue = true,\n            index = type != null && type + "queueHooks",\n            timers = jQuery.timers,\n            data = dataPriv.get(this);\n\n        if (index) {\n          if (data[index] && data[index].stop) {\n            stopQueue(data[index]);\n          }\n        } else {\n          for (index in data) {\n            if (data[index] && data[index].stop && rrun.test(index)) {\n              stopQueue(data[index]);\n            }\n          }\n        }\n\n        for (index = timers.length; index--;) {\n          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {\n            timers[index].anim.stop(gotoEnd);\n            dequeue = false;\n            timers.splice(index, 1);\n          }\n        } // Start the next in the queue if the last step wasn\'t forced.\n        // Timers currently will call their complete callbacks, which\n        // will dequeue but only if they were gotoEnd.\n\n\n        if (dequeue || !gotoEnd) {\n          jQuery.dequeue(this, type);\n        }\n      });\n    },\n    finish: function finish(type) {\n      if (type !== false) {\n        type = type || "fx";\n      }\n\n      return this.each(function () {\n        var index,\n            data = dataPriv.get(this),\n            queue = data[type + "queue"],\n            hooks = data[type + "queueHooks"],\n            timers = jQuery.timers,\n            length = queue ? queue.length : 0; // Enable finishing flag on private data\n\n        data.finish = true; // Empty the queue first\n\n        jQuery.queue(this, type, []);\n\n        if (hooks && hooks.stop) {\n          hooks.stop.call(this, true);\n        } // Look for any active animations, and finish them\n\n\n        for (index = timers.length; index--;) {\n          if (timers[index].elem === this && timers[index].queue === type) {\n            timers[index].anim.stop(true);\n            timers.splice(index, 1);\n          }\n        } // Look for any animations in the old queue and finish them\n\n\n        for (index = 0; index < length; index++) {\n          if (queue[index] && queue[index].finish) {\n            queue[index].finish.call(this);\n          }\n        } // Turn off finishing flag\n\n\n        delete data.finish;\n      });\n    }\n  });\n  jQuery.each(["toggle", "show", "hide"], function (_i, name) {\n    var cssFn = jQuery.fn[name];\n\n    jQuery.fn[name] = function (speed, easing, callback) {\n      return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\n    };\n  }); // Generate shortcuts for custom animations\n\n  jQuery.each({\n    slideDown: genFx("show"),\n    slideUp: genFx("hide"),\n    slideToggle: genFx("toggle"),\n    fadeIn: {\n      opacity: "show"\n    },\n    fadeOut: {\n      opacity: "hide"\n    },\n    fadeToggle: {\n      opacity: "toggle"\n    }\n  }, function (name, props) {\n    jQuery.fn[name] = function (speed, easing, callback) {\n      return this.animate(props, speed, easing, callback);\n    };\n  });\n  jQuery.timers = [];\n\n  jQuery.fx.tick = function () {\n    var timer,\n        i = 0,\n        timers = jQuery.timers;\n    fxNow = Date.now();\n\n    for (; i < timers.length; i++) {\n      timer = timers[i]; // Run the timer and safely remove it when done (allowing for external removal)\n\n      if (!timer() && timers[i] === timer) {\n        timers.splice(i--, 1);\n      }\n    }\n\n    if (!timers.length) {\n      jQuery.fx.stop();\n    }\n\n    fxNow = undefined;\n  };\n\n  jQuery.fx.timer = function (timer) {\n    jQuery.timers.push(timer);\n    jQuery.fx.start();\n  };\n\n  jQuery.fx.interval = 13;\n\n  jQuery.fx.start = function () {\n    if (inProgress) {\n      return;\n    }\n\n    inProgress = true;\n    schedule();\n  };\n\n  jQuery.fx.stop = function () {\n    inProgress = null;\n  };\n\n  jQuery.fx.speeds = {\n    slow: 600,\n    fast: 200,\n    // Default speed\n    _default: 400\n  }; // Based off of the plugin by Clint Helfers, with permission.\n  // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\n\n  jQuery.fn.delay = function (time, type) {\n    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\n    type = type || "fx";\n    return this.queue(type, function (next, hooks) {\n      var timeout = window.setTimeout(next, time);\n\n      hooks.stop = function () {\n        window.clearTimeout(timeout);\n      };\n    });\n  };\n\n  (function () {\n    var input = document.createElement("input"),\n        select = document.createElement("select"),\n        opt = select.appendChild(document.createElement("option"));\n    input.type = "checkbox"; // Support: Android <=4.3 only\n    // Default value for a checkbox should be "on"\n\n    support.checkOn = input.value !== ""; // Support: IE <=11 only\n    // Must access selectedIndex to make default options select\n\n    support.optSelected = opt.selected; // Support: IE <=11 only\n    // An input loses its value after becoming a radio\n\n    input = document.createElement("input");\n    input.value = "t";\n    input.type = "radio";\n    support.radioValue = input.value === "t";\n  })();\n\n  var boolHook,\n      attrHandle = jQuery.expr.attrHandle;\n  jQuery.fn.extend({\n    attr: function attr(name, value) {\n      return access(this, jQuery.attr, name, value, arguments.length > 1);\n    },\n    removeAttr: function removeAttr(name) {\n      return this.each(function () {\n        jQuery.removeAttr(this, name);\n      });\n    }\n  });\n  jQuery.extend({\n    attr: function attr(elem, name, value) {\n      var ret,\n          hooks,\n          nType = elem.nodeType; // Don\'t get/set attributes on text, comment and attribute nodes\n\n      if (nType === 3 || nType === 8 || nType === 2) {\n        return;\n      } // Fallback to prop when attributes are not supported\n\n\n      if (typeof elem.getAttribute === "undefined") {\n        return jQuery.prop(elem, name, value);\n      } // Attribute hooks are determined by the lowercase version\n      // Grab necessary hook if one is defined\n\n\n      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n        hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);\n      }\n\n      if (value !== undefined) {\n        if (value === null) {\n          jQuery.removeAttr(elem, name);\n          return;\n        }\n\n        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n          return ret;\n        }\n\n        elem.setAttribute(name, value + "");\n        return value;\n      }\n\n      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {\n        return ret;\n      }\n\n      ret = jQuery.find.attr(elem, name); // Non-existent attributes return null, we normalize to undefined\n\n      return ret == null ? undefined : ret;\n    },\n    attrHooks: {\n      type: {\n        set: function set(elem, value) {\n          if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {\n            var val = elem.value;\n            elem.setAttribute("type", value);\n\n            if (val) {\n              elem.value = val;\n            }\n\n            return value;\n          }\n        }\n      }\n    },\n    removeAttr: function removeAttr(elem, value) {\n      var name,\n          i = 0,\n          // Attribute names can contain non-HTML whitespace characters\n      // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n      attrNames = value && value.match(rnothtmlwhite);\n\n      if (attrNames && elem.nodeType === 1) {\n        while (name = attrNames[i++]) {\n          elem.removeAttribute(name);\n        }\n      }\n    }\n  }); // Hooks for boolean attributes\n\n  boolHook = {\n    set: function set(elem, value, name) {\n      if (value === false) {\n        // Remove boolean attributes when set to false\n        jQuery.removeAttr(elem, name);\n      } else {\n        elem.setAttribute(name, name);\n      }\n\n      return name;\n    }\n  };\n  jQuery.each(jQuery.expr.match.bool.source.match(/\\w+/g), function (_i, name) {\n    var getter = attrHandle[name] || jQuery.find.attr;\n\n    attrHandle[name] = function (elem, name, isXML) {\n      var ret,\n          handle,\n          lowercaseName = name.toLowerCase();\n\n      if (!isXML) {\n        // Avoid an infinite loop by temporarily removing this function from the getter\n        handle = attrHandle[lowercaseName];\n        attrHandle[lowercaseName] = ret;\n        ret = getter(elem, name, isXML) != null ? lowercaseName : null;\n        attrHandle[lowercaseName] = handle;\n      }\n\n      return ret;\n    };\n  });\n  var rfocusable = /^(?:input|select|textarea|button)$/i,\n      rclickable = /^(?:a|area)$/i;\n  jQuery.fn.extend({\n    prop: function prop(name, value) {\n      return access(this, jQuery.prop, name, value, arguments.length > 1);\n    },\n    removeProp: function removeProp(name) {\n      return this.each(function () {\n        delete this[jQuery.propFix[name] || name];\n      });\n    }\n  });\n  jQuery.extend({\n    prop: function prop(elem, name, value) {\n      var ret,\n          hooks,\n          nType = elem.nodeType; // Don\'t get/set properties on text, comment and attribute nodes\n\n      if (nType === 3 || nType === 8 || nType === 2) {\n        return;\n      }\n\n      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n        // Fix name and attach hooks\n        name = jQuery.propFix[name] || name;\n        hooks = jQuery.propHooks[name];\n      }\n\n      if (value !== undefined) {\n        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n          return ret;\n        }\n\n        return elem[name] = value;\n      }\n\n      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {\n        return ret;\n      }\n\n      return elem[name];\n    },\n    propHooks: {\n      tabIndex: {\n        get: function get(elem) {\n          // Support: IE <=9 - 11 only\n          // elem.tabIndex doesn\'t always return the\n          // correct value when it hasn\'t been explicitly set\n          // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n          // Use proper attribute retrieval(#12072)\n          var tabindex = jQuery.find.attr(elem, "tabindex");\n\n          if (tabindex) {\n            return parseInt(tabindex, 10);\n          }\n\n          if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {\n            return 0;\n          }\n\n          return -1;\n        }\n      }\n    },\n    propFix: {\n      "for": "htmlFor",\n      "class": "className"\n    }\n  }); // Support: IE <=11 only\n  // Accessing the selectedIndex property\n  // forces the browser to respect setting selected\n  // on the option\n  // The getter ensures a default option is selected\n  // when in an optgroup\n  // eslint rule "no-unused-expressions" is disabled for this code\n  // since it considers such accessions noop\n\n  if (!support.optSelected) {\n    jQuery.propHooks.selected = {\n      get: function get(elem) {\n        /* eslint no-unused-expressions: "off" */\n        var parent = elem.parentNode;\n\n        if (parent && parent.parentNode) {\n          parent.parentNode.selectedIndex;\n        }\n\n        return null;\n      },\n      set: function set(elem) {\n        /* eslint no-unused-expressions: "off" */\n        var parent = elem.parentNode;\n\n        if (parent) {\n          parent.selectedIndex;\n\n          if (parent.parentNode) {\n            parent.parentNode.selectedIndex;\n          }\n        }\n      }\n    };\n  }\n\n  jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {\n    jQuery.propFix[this.toLowerCase()] = this;\n  }); // Strip and collapse whitespace according to HTML spec\n  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\n  function stripAndCollapse(value) {\n    var tokens = value.match(rnothtmlwhite) || [];\n    return tokens.join(" ");\n  }\n\n  function getClass(elem) {\n    return elem.getAttribute && elem.getAttribute("class") || "";\n  }\n\n  function classesToArray(value) {\n    if (Array.isArray(value)) {\n      return value;\n    }\n\n    if (typeof value === "string") {\n      return value.match(rnothtmlwhite) || [];\n    }\n\n    return [];\n  }\n\n  jQuery.fn.extend({\n    addClass: function addClass(value) {\n      var classes,\n          elem,\n          cur,\n          curValue,\n          clazz,\n          j,\n          finalValue,\n          i = 0;\n\n      if (isFunction(value)) {\n        return this.each(function (j) {\n          jQuery(this).addClass(value.call(this, j, getClass(this)));\n        });\n      }\n\n      classes = classesToArray(value);\n\n      if (classes.length) {\n        while (elem = this[i++]) {\n          curValue = getClass(elem);\n          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";\n\n          if (cur) {\n            j = 0;\n\n            while (clazz = classes[j++]) {\n              if (cur.indexOf(" " + clazz + " ") < 0) {\n                cur += clazz + " ";\n              }\n            } // Only assign if different to avoid unneeded rendering.\n\n\n            finalValue = stripAndCollapse(cur);\n\n            if (curValue !== finalValue) {\n              elem.setAttribute("class", finalValue);\n            }\n          }\n        }\n      }\n\n      return this;\n    },\n    removeClass: function removeClass(value) {\n      var classes,\n          elem,\n          cur,\n          curValue,\n          clazz,\n          j,\n          finalValue,\n          i = 0;\n\n      if (isFunction(value)) {\n        return this.each(function (j) {\n          jQuery(this).removeClass(value.call(this, j, getClass(this)));\n        });\n      }\n\n      if (!arguments.length) {\n        return this.attr("class", "");\n      }\n\n      classes = classesToArray(value);\n\n      if (classes.length) {\n        while (elem = this[i++]) {\n          curValue = getClass(elem); // This expression is here for better compressibility (see addClass)\n\n          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";\n\n          if (cur) {\n            j = 0;\n\n            while (clazz = classes[j++]) {\n              // Remove *all* instances\n              while (cur.indexOf(" " + clazz + " ") > -1) {\n                cur = cur.replace(" " + clazz + " ", " ");\n              }\n            } // Only assign if different to avoid unneeded rendering.\n\n\n            finalValue = stripAndCollapse(cur);\n\n            if (curValue !== finalValue) {\n              elem.setAttribute("class", finalValue);\n            }\n          }\n        }\n      }\n\n      return this;\n    },\n    toggleClass: function toggleClass(value, stateVal) {\n      var type = _typeof(value),\n          isValidValue = type === "string" || Array.isArray(value);\n\n      if (typeof stateVal === "boolean" && isValidValue) {\n        return stateVal ? this.addClass(value) : this.removeClass(value);\n      }\n\n      if (isFunction(value)) {\n        return this.each(function (i) {\n          jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);\n        });\n      }\n\n      return this.each(function () {\n        var className, i, self, classNames;\n\n        if (isValidValue) {\n          // Toggle individual class names\n          i = 0;\n          self = jQuery(this);\n          classNames = classesToArray(value);\n\n          while (className = classNames[i++]) {\n            // Check each className given, space separated list\n            if (self.hasClass(className)) {\n              self.removeClass(className);\n            } else {\n              self.addClass(className);\n            }\n          } // Toggle whole class name\n\n        } else if (value === undefined || type === "boolean") {\n          className = getClass(this);\n\n          if (className) {\n            // Store className if set\n            dataPriv.set(this, "__className__", className);\n          } // If the element has a class name or if we\'re passed `false`,\n          // then remove the whole classname (if there was one, the above saved it).\n          // Otherwise bring back whatever was previously saved (if anything),\n          // falling back to the empty string if nothing was stored.\n\n\n          if (this.setAttribute) {\n            this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");\n          }\n        }\n      });\n    },\n    hasClass: function hasClass(selector) {\n      var className,\n          elem,\n          i = 0;\n      className = " " + selector + " ";\n\n      while (elem = this[i++]) {\n        if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  });\n  var rreturn = /\\r/g;\n  jQuery.fn.extend({\n    val: function val(value) {\n      var hooks,\n          ret,\n          valueIsFunction,\n          elem = this[0];\n\n      if (!arguments.length) {\n        if (elem) {\n          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];\n\n          if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {\n            return ret;\n          }\n\n          ret = elem.value; // Handle most common string cases\n\n          if (typeof ret === "string") {\n            return ret.replace(rreturn, "");\n          } // Handle cases where value is null/undef or number\n\n\n          return ret == null ? "" : ret;\n        }\n\n        return;\n      }\n\n      valueIsFunction = isFunction(value);\n      return this.each(function (i) {\n        var val;\n\n        if (this.nodeType !== 1) {\n          return;\n        }\n\n        if (valueIsFunction) {\n          val = value.call(this, i, jQuery(this).val());\n        } else {\n          val = value;\n        } // Treat null/undefined as ""; convert numbers to string\n\n\n        if (val == null) {\n          val = "";\n        } else if (typeof val === "number") {\n          val += "";\n        } else if (Array.isArray(val)) {\n          val = jQuery.map(val, function (value) {\n            return value == null ? "" : value + "";\n          });\n        }\n\n        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting\n\n        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {\n          this.value = val;\n        }\n      });\n    }\n  });\n  jQuery.extend({\n    valHooks: {\n      option: {\n        get: function get(elem) {\n          var val = jQuery.find.attr(elem, "value");\n          return val != null ? val : // Support: IE <=10 - 11 only\n          // option.text throws exceptions (#14686, #14858)\n          // Strip and collapse whitespace\n          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n          stripAndCollapse(jQuery.text(elem));\n        }\n      },\n      select: {\n        get: function get(elem) {\n          var value,\n              option,\n              i,\n              options = elem.options,\n              index = elem.selectedIndex,\n              one = elem.type === "select-one",\n              values = one ? null : [],\n              max = one ? index + 1 : options.length;\n\n          if (index < 0) {\n            i = max;\n          } else {\n            i = one ? index : 0;\n          } // Loop through all the selected options\n\n\n          for (; i < max; i++) {\n            option = options[i]; // Support: IE <=9 only\n            // IE8-9 doesn\'t update selected after form reset (#2551)\n\n            if ((option.selected || i === index) && // Don\'t return options that are disabled or in a disabled optgroup\n            !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {\n              // Get the specific value for the option\n              value = jQuery(option).val(); // We don\'t need an array for one selects\n\n              if (one) {\n                return value;\n              } // Multi-Selects return an array\n\n\n              values.push(value);\n            }\n          }\n\n          return values;\n        },\n        set: function set(elem, value) {\n          var optionSet,\n              option,\n              options = elem.options,\n              values = jQuery.makeArray(value),\n              i = options.length;\n\n          while (i--) {\n            option = options[i];\n            /* eslint-disable no-cond-assign */\n\n            if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {\n              optionSet = true;\n            }\n            /* eslint-enable no-cond-assign */\n\n          } // Force browsers to behave consistently when non-matching value is set\n\n\n          if (!optionSet) {\n            elem.selectedIndex = -1;\n          }\n\n          return values;\n        }\n      }\n    }\n  }); // Radios and checkboxes getter/setter\n\n  jQuery.each(["radio", "checkbox"], function () {\n    jQuery.valHooks[this] = {\n      set: function set(elem, value) {\n        if (Array.isArray(value)) {\n          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;\n        }\n      }\n    };\n\n    if (!support.checkOn) {\n      jQuery.valHooks[this].get = function (elem) {\n        return elem.getAttribute("value") === null ? "on" : elem.value;\n      };\n    }\n  }); // Return jQuery for attributes-only inclusion\n\n  support.focusin = "onfocusin" in window;\n\n  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n      stopPropagationCallback = function stopPropagationCallback(e) {\n    e.stopPropagation();\n  };\n\n  jQuery.extend(jQuery.event, {\n    trigger: function trigger(event, data, elem, onlyHandlers) {\n      var i,\n          cur,\n          tmp,\n          bubbleType,\n          ontype,\n          handle,\n          special,\n          lastElement,\n          eventPath = [elem || document],\n          type = hasOwn.call(event, "type") ? event.type : event,\n          namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];\n      cur = lastElement = tmp = elem = elem || document; // Don\'t do events on text and comment nodes\n\n      if (elem.nodeType === 3 || elem.nodeType === 8) {\n        return;\n      } // focus/blur morphs to focusin/out; ensure we\'re not firing them right now\n\n\n      if (rfocusMorph.test(type + jQuery.event.triggered)) {\n        return;\n      }\n\n      if (type.indexOf(".") > -1) {\n        // Namespaced trigger; create a regexp to match event type in handle()\n        namespaces = type.split(".");\n        type = namespaces.shift();\n        namespaces.sort();\n      }\n\n      ontype = type.indexOf(":") < 0 && "on" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string\n\n      event = event[jQuery.expando] ? event : new jQuery.Event(type, _typeof(event) === "object" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\n      event.isTrigger = onlyHandlers ? 2 : 3;\n      event.namespace = namespaces.join(".");\n      event.rnamespace = event.namespace ? new RegExp("(^|\\\\.)" + namespaces.join("\\\\.(?:.*\\\\.|)") + "(\\\\.|$)") : null; // Clean up the event in case it is being reused\n\n      event.result = undefined;\n\n      if (!event.target) {\n        event.target = elem;\n      } // Clone any incoming data and prepend the event, creating the handler arg list\n\n\n      data = data == null ? [event] : jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines\n\n      special = jQuery.event.special[type] || {};\n\n      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {\n        return;\n      } // Determine event propagation path in advance, per W3C events spec (#9951)\n      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\n\n      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {\n        bubbleType = special.delegateType || type;\n\n        if (!rfocusMorph.test(bubbleType + type)) {\n          cur = cur.parentNode;\n        }\n\n        for (; cur; cur = cur.parentNode) {\n          eventPath.push(cur);\n          tmp = cur;\n        } // Only add window if we got to document (e.g., not plain obj or detached DOM)\n\n\n        if (tmp === (elem.ownerDocument || document)) {\n          eventPath.push(tmp.defaultView || tmp.parentWindow || window);\n        }\n      } // Fire handlers on the event path\n\n\n      i = 0;\n\n      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {\n        lastElement = cur;\n        event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler\n\n        handle = (dataPriv.get(cur, "events") || Object.create(null))[event.type] && dataPriv.get(cur, "handle");\n\n        if (handle) {\n          handle.apply(cur, data);\n        } // Native handler\n\n\n        handle = ontype && cur[ontype];\n\n        if (handle && handle.apply && acceptData(cur)) {\n          event.result = handle.apply(cur, data);\n\n          if (event.result === false) {\n            event.preventDefault();\n          }\n        }\n      }\n\n      event.type = type; // If nobody prevented the default action, do it now\n\n      if (!onlyHandlers && !event.isDefaultPrevented()) {\n        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {\n          // Call a native DOM method on the target with the same name as the event.\n          // Don\'t do default actions on window, that\'s where global variables be (#6170)\n          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {\n            // Don\'t re-trigger an onFOO event when we call its FOO() method\n            tmp = elem[ontype];\n\n            if (tmp) {\n              elem[ontype] = null;\n            } // Prevent re-triggering of the same event, since we already bubbled it above\n\n\n            jQuery.event.triggered = type;\n\n            if (event.isPropagationStopped()) {\n              lastElement.addEventListener(type, stopPropagationCallback);\n            }\n\n            elem[type]();\n\n            if (event.isPropagationStopped()) {\n              lastElement.removeEventListener(type, stopPropagationCallback);\n            }\n\n            jQuery.event.triggered = undefined;\n\n            if (tmp) {\n              elem[ontype] = tmp;\n            }\n          }\n        }\n      }\n\n      return event.result;\n    },\n    // Piggyback on a donor event to simulate a different one\n    // Used only for `focus(in | out)` events\n    simulate: function simulate(type, elem, event) {\n      var e = jQuery.extend(new jQuery.Event(), event, {\n        type: type,\n        isSimulated: true\n      });\n      jQuery.event.trigger(e, null, elem);\n    }\n  });\n  jQuery.fn.extend({\n    trigger: function trigger(type, data) {\n      return this.each(function () {\n        jQuery.event.trigger(type, data, this);\n      });\n    },\n    triggerHandler: function triggerHandler(type, data) {\n      var elem = this[0];\n\n      if (elem) {\n        return jQuery.event.trigger(type, data, elem, true);\n      }\n    }\n  }); // Support: Firefox <=44\n  // Firefox doesn\'t have focus(in | out) events\n  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n  //\n  // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n  // focus(in | out) events fire after focus & blur events,\n  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n  // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\n\n  if (!support.focusin) {\n    jQuery.each({\n      focus: "focusin",\n      blur: "focusout"\n    }, function (orig, fix) {\n      // Attach a single capturing handler on the document while someone wants focusin/focusout\n      var handler = function handler(event) {\n        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));\n      };\n\n      jQuery.event.special[fix] = {\n        setup: function setup() {\n          // Handle: regular nodes (via `this.ownerDocument`), window\n          // (via `this.document`) & document (via `this`).\n          var doc = this.ownerDocument || this.document || this,\n              attaches = dataPriv.access(doc, fix);\n\n          if (!attaches) {\n            doc.addEventListener(orig, handler, true);\n          }\n\n          dataPriv.access(doc, fix, (attaches || 0) + 1);\n        },\n        teardown: function teardown() {\n          var doc = this.ownerDocument || this.document || this,\n              attaches = dataPriv.access(doc, fix) - 1;\n\n          if (!attaches) {\n            doc.removeEventListener(orig, handler, true);\n            dataPriv.remove(doc, fix);\n          } else {\n            dataPriv.access(doc, fix, attaches);\n          }\n        }\n      };\n    });\n  }\n\n  var location = window.location;\n  var nonce = {\n    guid: Date.now()\n  };\n  var rquery = /\\?/; // Cross-browser xml parsing\n\n  jQuery.parseXML = function (data) {\n    var xml, parserErrorElem;\n\n    if (!data || typeof data !== "string") {\n      return null;\n    } // Support: IE 9 - 11 only\n    // IE throws on parseFromString with invalid input.\n\n\n    try {\n      xml = new window.DOMParser().parseFromString(data, "text/xml");\n    } catch (e) {}\n\n    parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];\n\n    if (!xml || parserErrorElem) {\n      jQuery.error("Invalid XML: " + (parserErrorElem ? jQuery.map(parserErrorElem.childNodes, function (el) {\n        return el.textContent;\n      }).join("\\n") : data));\n    }\n\n    return xml;\n  };\n\n  var rbracket = /\\[\\]$/,\n      rCRLF = /\\r?\\n/g,\n      rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n      rsubmittable = /^(?:input|select|textarea|keygen)/i;\n\n  function buildParams(prefix, obj, traditional, add) {\n    var name;\n\n    if (Array.isArray(obj)) {\n      // Serialize array item.\n      jQuery.each(obj, function (i, v) {\n        if (traditional || rbracket.test(prefix)) {\n          // Treat each array item as a scalar.\n          add(prefix, v);\n        } else {\n          // Item is non-scalar (array or object), encode its numeric index.\n          buildParams(prefix + "[" + (_typeof(v) === "object" && v != null ? i : "") + "]", v, traditional, add);\n        }\n      });\n    } else if (!traditional && toType(obj) === "object") {\n      // Serialize object item.\n      for (name in obj) {\n        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);\n      }\n    } else {\n      // Serialize scalar item.\n      add(prefix, obj);\n    }\n  } // Serialize an array of form elements or a set of\n  // key/values into a query string\n\n\n  jQuery.param = function (a, traditional) {\n    var prefix,\n        s = [],\n        add = function add(key, valueOrFunction) {\n      // If value is a function, invoke it and use its return value\n      var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;\n      s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);\n    };\n\n    if (a == null) {\n      return "";\n    } // If an array was passed in, assume that it is an array of form elements.\n\n\n    if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {\n      // Serialize the form elements\n      jQuery.each(a, function () {\n        add(this.name, this.value);\n      });\n    } else {\n      // If traditional, encode the "old" way (the way 1.3.2 or older\n      // did it), otherwise encode params recursively.\n      for (prefix in a) {\n        buildParams(prefix, a[prefix], traditional, add);\n      }\n    } // Return the resulting serialization\n\n\n    return s.join("&");\n  };\n\n  jQuery.fn.extend({\n    serialize: function serialize() {\n      return jQuery.param(this.serializeArray());\n    },\n    serializeArray: function serializeArray() {\n      return this.map(function () {\n        // Can add propHook for "elements" to filter or add form elements\n        var elements = jQuery.prop(this, "elements");\n        return elements ? jQuery.makeArray(elements) : this;\n      }).filter(function () {\n        var type = this.type; // Use .is( ":disabled" ) so that fieldset[disabled] works\n\n        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));\n      }).map(function (_i, elem) {\n        var val = jQuery(this).val();\n\n        if (val == null) {\n          return null;\n        }\n\n        if (Array.isArray(val)) {\n          return jQuery.map(val, function (val) {\n            return {\n              name: elem.name,\n              value: val.replace(rCRLF, "\\r\\n")\n            };\n          });\n        }\n\n        return {\n          name: elem.name,\n          value: val.replace(rCRLF, "\\r\\n")\n        };\n      }).get();\n    }\n  });\n  var r20 = /%20/g,\n      rhash = /#.*$/,\n      rantiCache = /([?&])_=[^&]*/,\n      rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n      // #7653, #8125, #8152: local protocol detection\n  rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n      rnoContent = /^(?:GET|HEAD)$/,\n      rprotocol = /^\\/\\//,\n\n  /* Prefilters\n   * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n   * 2) These are called:\n   *    - BEFORE asking for a transport\n   *    - AFTER param serialization (s.data is a string if s.processData is true)\n   * 3) key is the dataType\n   * 4) the catchall symbol "*" can be used\n   * 5) execution will start with transport dataType and THEN continue down to "*" if needed\n   */\n  prefilters = {},\n\n  /* Transports bindings\n   * 1) key is the dataType\n   * 2) the catchall symbol "*" can be used\n   * 3) selection will start with transport dataType and THEN go to "*" if needed\n   */\n  transports = {},\n      // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n  allTypes = "*/".concat("*"),\n      // Anchor tag for parsing the document origin\n  originAnchor = document.createElement("a");\n  originAnchor.href = location.href; // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\n\n  function addToPrefiltersOrTransports(structure) {\n    // dataTypeExpression is optional and defaults to "*"\n    return function (dataTypeExpression, func) {\n      if (typeof dataTypeExpression !== "string") {\n        func = dataTypeExpression;\n        dataTypeExpression = "*";\n      }\n\n      var dataType,\n          i = 0,\n          dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];\n\n      if (isFunction(func)) {\n        // For each dataType in the dataTypeExpression\n        while (dataType = dataTypes[i++]) {\n          // Prepend if requested\n          if (dataType[0] === "+") {\n            dataType = dataType.slice(1) || "*";\n            (structure[dataType] = structure[dataType] || []).unshift(func); // Otherwise append\n          } else {\n            (structure[dataType] = structure[dataType] || []).push(func);\n          }\n        }\n      }\n    };\n  } // Base inspection function for prefilters and transports\n\n\n  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {\n    var inspected = {},\n        seekingTransport = structure === transports;\n\n    function inspect(dataType) {\n      var selected;\n      inspected[dataType] = true;\n      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {\n        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\n\n        if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {\n          options.dataTypes.unshift(dataTypeOrTransport);\n          inspect(dataTypeOrTransport);\n          return false;\n        } else if (seekingTransport) {\n          return !(selected = dataTypeOrTransport);\n        }\n      });\n      return selected;\n    }\n\n    return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");\n  } // A special extend for ajax options\n  // that takes "flat" options (not to be deep extended)\n  // Fixes #9887\n\n\n  function ajaxExtend(target, src) {\n    var key,\n        deep,\n        flatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n    for (key in src) {\n      if (src[key] !== undefined) {\n        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];\n      }\n    }\n\n    if (deep) {\n      jQuery.extend(true, target, deep);\n    }\n\n    return target;\n  }\n  /* Handles responses to an ajax request:\n   * - finds the right dataType (mediates between content-type and expected dataType)\n   * - returns the corresponding response\n   */\n\n\n  function ajaxHandleResponses(s, jqXHR, responses) {\n    var ct,\n        type,\n        finalDataType,\n        firstDataType,\n        contents = s.contents,\n        dataTypes = s.dataTypes; // Remove auto dataType and get content-type in the process\n\n    while (dataTypes[0] === "*") {\n      dataTypes.shift();\n\n      if (ct === undefined) {\n        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");\n      }\n    } // Check if we\'re dealing with a known content-type\n\n\n    if (ct) {\n      for (type in contents) {\n        if (contents[type] && contents[type].test(ct)) {\n          dataTypes.unshift(type);\n          break;\n        }\n      }\n    } // Check to see if we have a response for the expected dataType\n\n\n    if (dataTypes[0] in responses) {\n      finalDataType = dataTypes[0];\n    } else {\n      // Try convertible dataTypes\n      for (type in responses) {\n        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {\n          finalDataType = type;\n          break;\n        }\n\n        if (!firstDataType) {\n          firstDataType = type;\n        }\n      } // Or just use first one\n\n\n      finalDataType = finalDataType || firstDataType;\n    } // If we found a dataType\n    // We add the dataType to the list if needed\n    // and return the corresponding response\n\n\n    if (finalDataType) {\n      if (finalDataType !== dataTypes[0]) {\n        dataTypes.unshift(finalDataType);\n      }\n\n      return responses[finalDataType];\n    }\n  }\n  /* Chain conversions given the request and the original response\n   * Also sets the responseXXX fields on the jqXHR instance\n   */\n\n\n  function ajaxConvert(s, response, jqXHR, isSuccess) {\n    var conv2,\n        current,\n        conv,\n        tmp,\n        prev,\n        converters = {},\n        // Work with a copy of dataTypes in case we need to modify it for conversion\n    dataTypes = s.dataTypes.slice(); // Create converters map with lowercased keys\n\n    if (dataTypes[1]) {\n      for (conv in s.converters) {\n        converters[conv.toLowerCase()] = s.converters[conv];\n      }\n    }\n\n    current = dataTypes.shift(); // Convert to each sequential dataType\n\n    while (current) {\n      if (s.responseFields[current]) {\n        jqXHR[s.responseFields[current]] = response;\n      } // Apply the dataFilter if provided\n\n\n      if (!prev && isSuccess && s.dataFilter) {\n        response = s.dataFilter(response, s.dataType);\n      }\n\n      prev = current;\n      current = dataTypes.shift();\n\n      if (current) {\n        // There\'s only work to do if current dataType is non-auto\n        if (current === "*") {\n          current = prev; // Convert response if prev dataType is non-auto and differs from current\n        } else if (prev !== "*" && prev !== current) {\n          // Seek a direct converter\n          conv = converters[prev + " " + current] || converters["* " + current]; // If none found, seek a pair\n\n          if (!conv) {\n            for (conv2 in converters) {\n              // If conv2 outputs current\n              tmp = conv2.split(" ");\n\n              if (tmp[1] === current) {\n                // If prev can be converted to accepted input\n                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];\n\n                if (conv) {\n                  // Condense equivalence converters\n                  if (conv === true) {\n                    conv = converters[conv2]; // Otherwise, insert the intermediate dataType\n                  } else if (converters[conv2] !== true) {\n                    current = tmp[0];\n                    dataTypes.unshift(tmp[1]);\n                  }\n\n                  break;\n                }\n              }\n            }\n          } // Apply converter (if not an equivalence)\n\n\n          if (conv !== true) {\n            // Unless errors are allowed to bubble, catch and return them\n            if (conv && s.throws) {\n              response = conv(response);\n            } else {\n              try {\n                response = conv(response);\n              } catch (e) {\n                return {\n                  state: "parsererror",\n                  error: conv ? e : "No conversion from " + prev + " to " + current\n                };\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      state: "success",\n      data: response\n    };\n  }\n\n  jQuery.extend({\n    // Counter for holding the number of active queries\n    active: 0,\n    // Last-Modified header cache for next request\n    lastModified: {},\n    etag: {},\n    ajaxSettings: {\n      url: location.href,\n      type: "GET",\n      isLocal: rlocalProtocol.test(location.protocol),\n      global: true,\n      processData: true,\n      async: true,\n      contentType: "application/x-www-form-urlencoded; charset=UTF-8",\n\n      /*\n      timeout: 0,\n      data: null,\n      dataType: null,\n      username: null,\n      password: null,\n      cache: null,\n      throws: false,\n      traditional: false,\n      headers: {},\n      */\n      accepts: {\n        "*": allTypes,\n        text: "text/plain",\n        html: "text/html",\n        xml: "application/xml, text/xml",\n        json: "application/json, text/javascript"\n      },\n      contents: {\n        xml: /\\bxml\\b/,\n        html: /\\bhtml/,\n        json: /\\bjson\\b/\n      },\n      responseFields: {\n        xml: "responseXML",\n        text: "responseText",\n        json: "responseJSON"\n      },\n      // Data converters\n      // Keys separate source (or catchall "*") and destination types with a single space\n      converters: {\n        // Convert anything to text\n        "* text": String,\n        // Text to html (true = no transformation)\n        "text html": true,\n        // Evaluate text as a json expression\n        "text json": JSON.parse,\n        // Parse text as xml\n        "text xml": jQuery.parseXML\n      },\n      // For options that shouldn\'t be deep extended:\n      // you can add your own custom options here if\n      // and when you create one that shouldn\'t be\n      // deep extended (see ajaxExtend)\n      flatOptions: {\n        url: true,\n        context: true\n      }\n    },\n    // Creates a full fledged settings object into target\n    // with both ajaxSettings and settings fields.\n    // If target is omitted, writes into ajaxSettings.\n    ajaxSetup: function ajaxSetup(target, settings) {\n      return settings ? // Building a settings object\n      ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings\n      ajaxExtend(jQuery.ajaxSettings, target);\n    },\n    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),\n    ajaxTransport: addToPrefiltersOrTransports(transports),\n    // Main method\n    ajax: function ajax(url, options) {\n      // If url is an object, simulate pre-1.5 signature\n      if (_typeof(url) === "object") {\n        options = url;\n        url = undefined;\n      } // Force options to be an object\n\n\n      options = options || {};\n\n      var transport,\n          // URL without anti-cache param\n      cacheURL,\n          // Response headers\n      responseHeadersString,\n          responseHeaders,\n          // timeout handle\n      timeoutTimer,\n          // Url cleanup var\n      urlAnchor,\n          // Request state (becomes false upon send and true upon completion)\n      completed,\n          // To know if global events are to be dispatched\n      fireGlobals,\n          // Loop variable\n      i,\n          // uncached part of the url\n      uncached,\n          // Create the final options object\n      s = jQuery.ajaxSetup({}, options),\n          // Callbacks context\n      callbackContext = s.context || s,\n          // Context for global events is callbackContext if it is a DOM node or jQuery collection\n      globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,\n          // Deferreds\n      deferred = jQuery.Deferred(),\n          completeDeferred = jQuery.Callbacks("once memory"),\n          // Status-dependent callbacks\n      _statusCode = s.statusCode || {},\n          // Headers (they are sent all at once)\n      requestHeaders = {},\n          requestHeadersNames = {},\n          // Default abort message\n      strAbort = "canceled",\n          // Fake xhr\n      jqXHR = {\n        readyState: 0,\n        // Builds headers hashtable if needed\n        getResponseHeader: function getResponseHeader(key) {\n          var match;\n\n          if (completed) {\n            if (!responseHeaders) {\n              responseHeaders = {};\n\n              while (match = rheaders.exec(responseHeadersString)) {\n                responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);\n              }\n            }\n\n            match = responseHeaders[key.toLowerCase() + " "];\n          }\n\n          return match == null ? null : match.join(", ");\n        },\n        // Raw string\n        getAllResponseHeaders: function getAllResponseHeaders() {\n          return completed ? responseHeadersString : null;\n        },\n        // Caches the header\n        setRequestHeader: function setRequestHeader(name, value) {\n          if (completed == null) {\n            name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;\n            requestHeaders[name] = value;\n          }\n\n          return this;\n        },\n        // Overrides response content-type header\n        overrideMimeType: function overrideMimeType(type) {\n          if (completed == null) {\n            s.mimeType = type;\n          }\n\n          return this;\n        },\n        // Status-dependent callbacks\n        statusCode: function statusCode(map) {\n          var code;\n\n          if (map) {\n            if (completed) {\n              // Execute the appropriate callbacks\n              jqXHR.always(map[jqXHR.status]);\n            } else {\n              // Lazy-add the new callbacks in a way that preserves old ones\n              for (code in map) {\n                _statusCode[code] = [_statusCode[code], map[code]];\n              }\n            }\n          }\n\n          return this;\n        },\n        // Cancel the request\n        abort: function abort(statusText) {\n          var finalText = statusText || strAbort;\n\n          if (transport) {\n            transport.abort(finalText);\n          }\n\n          done(0, finalText);\n          return this;\n        }\n      }; // Attach deferreds\n\n\n      deferred.promise(jqXHR); // Add protocol if not provided (prefilters might expect it)\n      // Handle falsy url in the settings object (#10093: consistency with old signature)\n      // We also use the url parameter if available\n\n      s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//"); // Alias method option to type as per ticket #12004\n\n      s.type = options.method || options.type || s.method || s.type; // Extract dataTypes list\n\n      s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""]; // A cross-domain request is in order when the origin doesn\'t match the current origin.\n\n      if (s.crossDomain == null) {\n        urlAnchor = document.createElement("a"); // Support: IE <=8 - 11, Edge 12 - 15\n        // IE throws exception on accessing the href property if url is malformed,\n        // e.g. http://example.com:80x/\n\n        try {\n          urlAnchor.href = s.url; // Support: IE <=8 - 11 only\n          // Anchor\'s host property isn\'t correctly set when s.url is relative\n\n          urlAnchor.href = urlAnchor.href;\n          s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;\n        } catch (e) {\n          // If there is an error parsing the URL, assume it is crossDomain,\n          // it can be rejected by the transport if it is invalid\n          s.crossDomain = true;\n        }\n      } // Convert data if not already a string\n\n\n      if (s.data && s.processData && typeof s.data !== "string") {\n        s.data = jQuery.param(s.data, s.traditional);\n      } // Apply prefilters\n\n\n      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); // If request was aborted inside a prefilter, stop there\n\n      if (completed) {\n        return jqXHR;\n      } // We can fire global events as of now if asked to\n      // Don\'t fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\n\n      fireGlobals = jQuery.event && s.global; // Watch for a new set of requests\n\n      if (fireGlobals && jQuery.active++ === 0) {\n        jQuery.event.trigger("ajaxStart");\n      } // Uppercase the type\n\n\n      s.type = s.type.toUpperCase(); // Determine if request has content\n\n      s.hasContent = !rnoContent.test(s.type); // Save the URL in case we\'re toying with the If-Modified-Since\n      // and/or If-None-Match header later on\n      // Remove hash to simplify url manipulation\n\n      cacheURL = s.url.replace(rhash, ""); // More options handling for requests with no content\n\n      if (!s.hasContent) {\n        // Remember the hash so we can put it back\n        uncached = s.url.slice(cacheURL.length); // If data is available and should be processed, append data to url\n\n        if (s.data && (s.processData || typeof s.data === "string")) {\n          cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data; // #9682: remove data so that it\'s not used in an eventual retry\n\n          delete s.data;\n        } // Add or update anti-cache param if needed\n\n\n        if (s.cache === false) {\n          cacheURL = cacheURL.replace(rantiCache, "$1");\n          uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;\n        } // Put hash and anti-cache on the URL that will be requested (gh-1732)\n\n\n        s.url = cacheURL + uncached; // Change \'%20\' to \'+\' if this is encoded form body content (gh-2658)\n      } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {\n        s.data = s.data.replace(r20, "+");\n      } // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\n\n      if (s.ifModified) {\n        if (jQuery.lastModified[cacheURL]) {\n          jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);\n        }\n\n        if (jQuery.etag[cacheURL]) {\n          jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);\n        }\n      } // Set the correct header, if data is being sent\n\n\n      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {\n        jqXHR.setRequestHeader("Content-Type", s.contentType);\n      } // Set the Accepts header for the server, depending on the dataType\n\n\n      jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]); // Check for headers option\n\n      for (i in s.headers) {\n        jqXHR.setRequestHeader(i, s.headers[i]);\n      } // Allow custom headers/mimetypes and early abort\n\n\n      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {\n        // Abort if not done already and return\n        return jqXHR.abort();\n      } // Aborting is no longer a cancellation\n\n\n      strAbort = "abort"; // Install callbacks on deferreds\n\n      completeDeferred.add(s.complete);\n      jqXHR.done(s.success);\n      jqXHR.fail(s.error); // Get transport\n\n      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); // If no transport, we auto-abort\n\n      if (!transport) {\n        done(-1, "No Transport");\n      } else {\n        jqXHR.readyState = 1; // Send global event\n\n        if (fireGlobals) {\n          globalEventContext.trigger("ajaxSend", [jqXHR, s]);\n        } // If request was aborted inside ajaxSend, stop there\n\n\n        if (completed) {\n          return jqXHR;\n        } // Timeout\n\n\n        if (s.async && s.timeout > 0) {\n          timeoutTimer = window.setTimeout(function () {\n            jqXHR.abort("timeout");\n          }, s.timeout);\n        }\n\n        try {\n          completed = false;\n          transport.send(requestHeaders, done);\n        } catch (e) {\n          // Rethrow post-completion exceptions\n          if (completed) {\n            throw e;\n          } // Propagate others as results\n\n\n          done(-1, e);\n        }\n      } // Callback for when everything is done\n\n\n      function done(status, nativeStatusText, responses, headers) {\n        var isSuccess,\n            success,\n            error,\n            response,\n            modified,\n            statusText = nativeStatusText; // Ignore repeat invocations\n\n        if (completed) {\n          return;\n        }\n\n        completed = true; // Clear timeout if it exists\n\n        if (timeoutTimer) {\n          window.clearTimeout(timeoutTimer);\n        } // Dereference transport for early garbage collection\n        // (no matter how long the jqXHR object will be used)\n\n\n        transport = undefined; // Cache response headers\n\n        responseHeadersString = headers || ""; // Set readyState\n\n        jqXHR.readyState = status > 0 ? 4 : 0; // Determine if successful\n\n        isSuccess = status >= 200 && status < 300 || status === 304; // Get response data\n\n        if (responses) {\n          response = ajaxHandleResponses(s, jqXHR, responses);\n        } // Use a noop converter for missing script but not if jsonp\n\n\n        if (!isSuccess && jQuery.inArray("script", s.dataTypes) > -1 && jQuery.inArray("json", s.dataTypes) < 0) {\n          s.converters["text script"] = function () {};\n        } // Convert no matter what (that way responseXXX fields are always set)\n\n\n        response = ajaxConvert(s, response, jqXHR, isSuccess); // If successful, handle type chaining\n\n        if (isSuccess) {\n          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n          if (s.ifModified) {\n            modified = jqXHR.getResponseHeader("Last-Modified");\n\n            if (modified) {\n              jQuery.lastModified[cacheURL] = modified;\n            }\n\n            modified = jqXHR.getResponseHeader("etag");\n\n            if (modified) {\n              jQuery.etag[cacheURL] = modified;\n            }\n          } // if no content\n\n\n          if (status === 204 || s.type === "HEAD") {\n            statusText = "nocontent"; // if not modified\n          } else if (status === 304) {\n            statusText = "notmodified"; // If we have data, let\'s convert it\n          } else {\n            statusText = response.state;\n            success = response.data;\n            error = response.error;\n            isSuccess = !error;\n          }\n        } else {\n          // Extract error from statusText and normalize for non-aborts\n          error = statusText;\n\n          if (status || !statusText) {\n            statusText = "error";\n\n            if (status < 0) {\n              status = 0;\n            }\n          }\n        } // Set data for the fake xhr object\n\n\n        jqXHR.status = status;\n        jqXHR.statusText = (nativeStatusText || statusText) + ""; // Success/Error\n\n        if (isSuccess) {\n          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);\n        } else {\n          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);\n        } // Status-dependent callbacks\n\n\n        jqXHR.statusCode(_statusCode);\n        _statusCode = undefined;\n\n        if (fireGlobals) {\n          globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);\n        } // Complete\n\n\n        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);\n\n        if (fireGlobals) {\n          globalEventContext.trigger("ajaxComplete", [jqXHR, s]); // Handle the global AJAX counter\n\n          if (! --jQuery.active) {\n            jQuery.event.trigger("ajaxStop");\n          }\n        }\n      }\n\n      return jqXHR;\n    },\n    getJSON: function getJSON(url, data, callback) {\n      return jQuery.get(url, data, callback, "json");\n    },\n    getScript: function getScript(url, callback) {\n      return jQuery.get(url, undefined, callback, "script");\n    }\n  });\n  jQuery.each(["get", "post"], function (_i, method) {\n    jQuery[method] = function (url, data, callback, type) {\n      // Shift arguments if data argument was omitted\n      if (isFunction(data)) {\n        type = type || callback;\n        callback = data;\n        data = undefined;\n      } // The url can be an options object (which then must have .url)\n\n\n      return jQuery.ajax(jQuery.extend({\n        url: url,\n        type: method,\n        dataType: type,\n        data: data,\n        success: callback\n      }, jQuery.isPlainObject(url) && url));\n    };\n  });\n  jQuery.ajaxPrefilter(function (s) {\n    var i;\n\n    for (i in s.headers) {\n      if (i.toLowerCase() === "content-type") {\n        s.contentType = s.headers[i] || "";\n      }\n    }\n  });\n\n  jQuery._evalUrl = function (url, options, doc) {\n    return jQuery.ajax({\n      url: url,\n      // Make this explicit, since user can override this through ajaxSetup (#11264)\n      type: "GET",\n      dataType: "script",\n      cache: true,\n      async: false,\n      global: false,\n      // Only evaluate the response if it is successful (gh-4126)\n      // dataFilter is not invoked for failure responses, so using it instead\n      // of the default converter is kludgy but it works.\n      converters: {\n        "text script": function textScript() {}\n      },\n      dataFilter: function dataFilter(response) {\n        jQuery.globalEval(response, options, doc);\n      }\n    });\n  };\n\n  jQuery.fn.extend({\n    wrapAll: function wrapAll(html) {\n      var wrap;\n\n      if (this[0]) {\n        if (isFunction(html)) {\n          html = html.call(this[0]);\n        } // The elements to wrap the target around\n\n\n        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);\n\n        if (this[0].parentNode) {\n          wrap.insertBefore(this[0]);\n        }\n\n        wrap.map(function () {\n          var elem = this;\n\n          while (elem.firstElementChild) {\n            elem = elem.firstElementChild;\n          }\n\n          return elem;\n        }).append(this);\n      }\n\n      return this;\n    },\n    wrapInner: function wrapInner(html) {\n      if (isFunction(html)) {\n        return this.each(function (i) {\n          jQuery(this).wrapInner(html.call(this, i));\n        });\n      }\n\n      return this.each(function () {\n        var self = jQuery(this),\n            contents = self.contents();\n\n        if (contents.length) {\n          contents.wrapAll(html);\n        } else {\n          self.append(html);\n        }\n      });\n    },\n    wrap: function wrap(html) {\n      var htmlIsFunction = isFunction(html);\n      return this.each(function (i) {\n        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);\n      });\n    },\n    unwrap: function unwrap(selector) {\n      this.parent(selector).not("body").each(function () {\n        jQuery(this).replaceWith(this.childNodes);\n      });\n      return this;\n    }\n  });\n\n  jQuery.expr.pseudos.hidden = function (elem) {\n    return !jQuery.expr.pseudos.visible(elem);\n  };\n\n  jQuery.expr.pseudos.visible = function (elem) {\n    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);\n  };\n\n  jQuery.ajaxSettings.xhr = function () {\n    try {\n      return new window.XMLHttpRequest();\n    } catch (e) {}\n  };\n\n  var xhrSuccessStatus = {\n    // File protocol always yields status code 0, assume 200\n    0: 200,\n    // Support: IE <=9 only\n    // #1450: sometimes IE returns 1223 when it should be 204\n    1223: 204\n  },\n      xhrSupported = jQuery.ajaxSettings.xhr();\n  support.cors = !!xhrSupported && "withCredentials" in xhrSupported;\n  support.ajax = xhrSupported = !!xhrSupported;\n  jQuery.ajaxTransport(function (options) {\n    var _callback, errorCallback; // Cross domain only allowed if supported through XMLHttpRequest\n\n\n    if (support.cors || xhrSupported && !options.crossDomain) {\n      return {\n        send: function send(headers, complete) {\n          var i,\n              xhr = options.xhr();\n          xhr.open(options.type, options.url, options.async, options.username, options.password); // Apply custom fields if provided\n\n          if (options.xhrFields) {\n            for (i in options.xhrFields) {\n              xhr[i] = options.xhrFields[i];\n            }\n          } // Override mime type if needed\n\n\n          if (options.mimeType && xhr.overrideMimeType) {\n            xhr.overrideMimeType(options.mimeType);\n          } // X-Requested-With header\n          // For cross-domain requests, seeing as conditions for a preflight are\n          // akin to a jigsaw puzzle, we simply never set it to be sure.\n          // (it can always be set on a per-request basis or even using ajaxSetup)\n          // For same-domain requests, won\'t change header if already provided.\n\n\n          if (!options.crossDomain && !headers["X-Requested-With"]) {\n            headers["X-Requested-With"] = "XMLHttpRequest";\n          } // Set headers\n\n\n          for (i in headers) {\n            xhr.setRequestHeader(i, headers[i]);\n          } // Callback\n\n\n          _callback = function callback(type) {\n            return function () {\n              if (_callback) {\n                _callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;\n\n                if (type === "abort") {\n                  xhr.abort();\n                } else if (type === "error") {\n                  // Support: IE <=9 only\n                  // On a manual native abort, IE9 throws\n                  // errors on any property access that is not readyState\n                  if (typeof xhr.status !== "number") {\n                    complete(0, "error");\n                  } else {\n                    complete( // File: protocol always yields status 0; see #8605, #14207\n                    xhr.status, xhr.statusText);\n                  }\n                } else {\n                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE <=9 only\n                  // IE9 has no XHR2 but throws on binary (trac-11426)\n                  // For XHR2 non-text, let the caller handle it (gh-2498)\n                  (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {\n                    binary: xhr.response\n                  } : {\n                    text: xhr.responseText\n                  }, xhr.getAllResponseHeaders());\n                }\n              }\n            };\n          }; // Listen to events\n\n\n          xhr.onload = _callback();\n          errorCallback = xhr.onerror = xhr.ontimeout = _callback("error"); // Support: IE 9 only\n          // Use onreadystatechange to replace onabort\n          // to handle uncaught aborts\n\n          if (xhr.onabort !== undefined) {\n            xhr.onabort = errorCallback;\n          } else {\n            xhr.onreadystatechange = function () {\n              // Check readyState before timeout as it changes\n              if (xhr.readyState === 4) {\n                // Allow onerror to be called first,\n                // but that will not handle a native abort\n                // Also, save errorCallback to a variable\n                // as xhr.onerror cannot be accessed\n                window.setTimeout(function () {\n                  if (_callback) {\n                    errorCallback();\n                  }\n                });\n              }\n            };\n          } // Create the abort callback\n\n\n          _callback = _callback("abort");\n\n          try {\n            // Do send the request (this may raise an exception)\n            xhr.send(options.hasContent && options.data || null);\n          } catch (e) {\n            // #14683: Only rethrow if this hasn\'t been notified as an error yet\n            if (_callback) {\n              throw e;\n            }\n          }\n        },\n        abort: function abort() {\n          if (_callback) {\n            _callback();\n          }\n        }\n      };\n    }\n  }); // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\n\n  jQuery.ajaxPrefilter(function (s) {\n    if (s.crossDomain) {\n      s.contents.script = false;\n    }\n  }); // Install script dataType\n\n  jQuery.ajaxSetup({\n    accepts: {\n      script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"\n    },\n    contents: {\n      script: /\\b(?:java|ecma)script\\b/\n    },\n    converters: {\n      "text script": function textScript(text) {\n        jQuery.globalEval(text);\n        return text;\n      }\n    }\n  }); // Handle cache\'s special case and crossDomain\n\n  jQuery.ajaxPrefilter("script", function (s) {\n    if (s.cache === undefined) {\n      s.cache = false;\n    }\n\n    if (s.crossDomain) {\n      s.type = "GET";\n    }\n  }); // Bind script tag hack transport\n\n  jQuery.ajaxTransport("script", function (s) {\n    // This transport only deals with cross domain or forced-by-attrs requests\n    if (s.crossDomain || s.scriptAttrs) {\n      var script, _callback2;\n\n      return {\n        send: function send(_, complete) {\n          script = jQuery("<script>").attr(s.scriptAttrs || {}).prop({\n            charset: s.scriptCharset,\n            src: s.url\n          }).on("load error", _callback2 = function callback(evt) {\n            script.remove();\n            _callback2 = null;\n\n            if (evt) {\n              complete(evt.type === "error" ? 404 : 200, evt.type);\n            }\n          }); // Use native DOM manipulation to avoid our domManip AJAX trickery\n\n          document.head.appendChild(script[0]);\n        },\n        abort: function abort() {\n          if (_callback2) {\n            _callback2();\n          }\n        }\n      };\n    }\n  });\n  var oldCallbacks = [],\n      rjsonp = /(=)\\?(?=&|$)|\\?\\?/; // Default jsonp settings\n\n  jQuery.ajaxSetup({\n    jsonp: "callback",\n    jsonpCallback: function jsonpCallback() {\n      var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;\n      this[callback] = true;\n      return callback;\n    }\n  }); // Detect, normalize options and install callbacks for jsonp requests\n\n  jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {\n    var callbackName,\n        overwritten,\n        responseContainer,\n        jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data"); // Handle iff the expected data type is "jsonp" or we have a parameter to set\n\n    if (jsonProp || s.dataTypes[0] === "jsonp") {\n      // Get callback name, remembering preexisting value associated with it\n      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; // Insert callback into url or form data\n\n      if (jsonProp) {\n        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);\n      } else if (s.jsonp !== false) {\n        s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;\n      } // Use data converter to retrieve json after script execution\n\n\n      s.converters["script json"] = function () {\n        if (!responseContainer) {\n          jQuery.error(callbackName + " was not called");\n        }\n\n        return responseContainer[0];\n      }; // Force json dataType\n\n\n      s.dataTypes[0] = "json"; // Install callback\n\n      overwritten = window[callbackName];\n\n      window[callbackName] = function () {\n        responseContainer = arguments;\n      }; // Clean-up function (fires after converters)\n\n\n      jqXHR.always(function () {\n        // If previous value didn\'t exist - remove it\n        if (overwritten === undefined) {\n          jQuery(window).removeProp(callbackName); // Otherwise restore preexisting value\n        } else {\n          window[callbackName] = overwritten;\n        } // Save back as free\n\n\n        if (s[callbackName]) {\n          // Make sure that re-using the options doesn\'t screw things around\n          s.jsonpCallback = originalSettings.jsonpCallback; // Save the callback name for future use\n\n          oldCallbacks.push(callbackName);\n        } // Call if it was a function and we have a response\n\n\n        if (responseContainer && isFunction(overwritten)) {\n          overwritten(responseContainer[0]);\n        }\n\n        responseContainer = overwritten = undefined;\n      }); // Delegate to script\n\n      return "script";\n    }\n  }); // Support: Safari 8 only\n  // In Safari 8 documents created via document.implementation.createHTMLDocument\n  // collapse sibling forms: the second one becomes a child of the first one.\n  // Because of that, this security measure has to be disabled in Safari 8.\n  // https://bugs.webkit.org/show_bug.cgi?id=137337\n\n  support.createHTMLDocument = function () {\n    var body = document.implementation.createHTMLDocument("").body;\n    body.innerHTML = "<form></form><form></form>";\n    return body.childNodes.length === 2;\n  }(); // Argument "data" should be string of html\n  // context (optional): If specified, the fragment will be created in this context,\n  // defaults to document\n  // keepScripts (optional): If true, will include scripts passed in the html string\n\n\n  jQuery.parseHTML = function (data, context, keepScripts) {\n    if (typeof data !== "string") {\n      return [];\n    }\n\n    if (typeof context === "boolean") {\n      keepScripts = context;\n      context = false;\n    }\n\n    var base, parsed, scripts;\n\n    if (!context) {\n      // Stop scripts or inline event handlers from being executed immediately\n      // by using document.implementation\n      if (support.createHTMLDocument) {\n        context = document.implementation.createHTMLDocument(""); // Set the base href for the created document\n        // so any parsed elements with URLs\n        // are based on the document\'s URL (gh-2965)\n\n        base = context.createElement("base");\n        base.href = document.location.href;\n        context.head.appendChild(base);\n      } else {\n        context = document;\n      }\n    }\n\n    parsed = rsingleTag.exec(data);\n    scripts = !keepScripts && []; // Single tag\n\n    if (parsed) {\n      return [context.createElement(parsed[1])];\n    }\n\n    parsed = buildFragment([data], context, scripts);\n\n    if (scripts && scripts.length) {\n      jQuery(scripts).remove();\n    }\n\n    return jQuery.merge([], parsed.childNodes);\n  };\n  /**\n   * Load a url into a page\n   */\n\n\n  jQuery.fn.load = function (url, params, callback) {\n    var selector,\n        type,\n        response,\n        self = this,\n        off = url.indexOf(" ");\n\n    if (off > -1) {\n      selector = stripAndCollapse(url.slice(off));\n      url = url.slice(0, off);\n    } // If it\'s a function\n\n\n    if (isFunction(params)) {\n      // We assume that it\'s the callback\n      callback = params;\n      params = undefined; // Otherwise, build a param string\n    } else if (params && _typeof(params) === "object") {\n      type = "POST";\n    } // If we have elements to modify, make the request\n\n\n    if (self.length > 0) {\n      jQuery.ajax({\n        url: url,\n        // If "type" variable is undefined, then "GET" method will be used.\n        // Make value of this field explicit since\n        // user can override it through ajaxSetup method\n        type: type || "GET",\n        dataType: "html",\n        data: params\n      }).done(function (responseText) {\n        // Save response for use in complete callback\n        response = arguments;\n        self.html(selector ? // If a selector was specified, locate the right elements in a dummy div\n        // Exclude scripts to avoid IE \'Permission Denied\' errors\n        jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result\n        responseText); // If the request succeeds, this function gets "data", "status", "jqXHR"\n        // but they are ignored because response was set above.\n        // If it fails, this function gets "jqXHR", "status", "error"\n      }).always(callback && function (jqXHR, status) {\n        self.each(function () {\n          callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);\n        });\n      });\n    }\n\n    return this;\n  };\n\n  jQuery.expr.pseudos.animated = function (elem) {\n    return jQuery.grep(jQuery.timers, function (fn) {\n      return elem === fn.elem;\n    }).length;\n  };\n\n  jQuery.offset = {\n    setOffset: function setOffset(elem, options, i) {\n      var curPosition,\n          curLeft,\n          curCSSTop,\n          curTop,\n          curOffset,\n          curCSSLeft,\n          calculatePosition,\n          position = jQuery.css(elem, "position"),\n          curElem = jQuery(elem),\n          props = {}; // Set position first, in-case top/left are set even on static elem\n\n      if (position === "static") {\n        elem.style.position = "relative";\n      }\n\n      curOffset = curElem.offset();\n      curCSSTop = jQuery.css(elem, "top");\n      curCSSLeft = jQuery.css(elem, "left");\n      calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1; // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n\n      if (calculatePosition) {\n        curPosition = curElem.position();\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (isFunction(options)) {\n        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n        options = options.call(elem, i, jQuery.extend({}, curOffset));\n      }\n\n      if (options.top != null) {\n        props.top = options.top - curOffset.top + curTop;\n      }\n\n      if (options.left != null) {\n        props.left = options.left - curOffset.left + curLeft;\n      }\n\n      if ("using" in options) {\n        options.using.call(elem, props);\n      } else {\n        curElem.css(props);\n      }\n    }\n  };\n  jQuery.fn.extend({\n    // offset() relates an element\'s border box to the document origin\n    offset: function offset(options) {\n      // Preserve chaining for setter\n      if (arguments.length) {\n        return options === undefined ? this : this.each(function (i) {\n          jQuery.offset.setOffset(this, options, i);\n        });\n      }\n\n      var rect,\n          win,\n          elem = this[0];\n\n      if (!elem) {\n        return;\n      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n      // Support: IE <=11 only\n      // Running getBoundingClientRect on a\n      // disconnected node in IE throws an error\n\n\n      if (!elem.getClientRects().length) {\n        return {\n          top: 0,\n          left: 0\n        };\n      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\n\n      rect = elem.getBoundingClientRect();\n      win = elem.ownerDocument.defaultView;\n      return {\n        top: rect.top + win.pageYOffset,\n        left: rect.left + win.pageXOffset\n      };\n    },\n    // position() relates an element\'s margin box to its offset parent\'s padding box\n    // This corresponds to the behavior of CSS absolute positioning\n    position: function position() {\n      if (!this[0]) {\n        return;\n      }\n\n      var offsetParent,\n          offset,\n          doc,\n          elem = this[0],\n          parentOffset = {\n        top: 0,\n        left: 0\n      }; // position:fixed elements are offset from the viewport, which itself always has zero offset\n\n      if (jQuery.css(elem, "position") === "fixed") {\n        // Assume position:fixed implies availability of getBoundingClientRect\n        offset = elem.getBoundingClientRect();\n      } else {\n        offset = this.offset(); // Account for the *real* offset parent, which can be the document or its root element\n        // when a statically positioned element is identified\n\n        doc = elem.ownerDocument;\n        offsetParent = elem.offsetParent || doc.documentElement;\n\n        while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {\n          offsetParent = offsetParent.parentNode;\n        }\n\n        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {\n          // Incorporate borders into its offset, since they are outside its content origin\n          parentOffset = jQuery(offsetParent).offset();\n          parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);\n          parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);\n        }\n      } // Subtract parent offsets and element margins\n\n\n      return {\n        top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),\n        left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)\n      };\n    },\n    // This method will return documentElement in the following cases:\n    // 1) For the element inside the iframe without offsetParent, this method will return\n    //    documentElement of the parent window\n    // 2) For the hidden or detached element\n    // 3) For body or html element, i.e. in case of the html node - it will return itself\n    //\n    // but those exceptions were never presented as a real life use-cases\n    // and might be considered as more preferable results.\n    //\n    // This logic, however, is not guaranteed and can change at any point in the future\n    offsetParent: function offsetParent() {\n      return this.map(function () {\n        var offsetParent = this.offsetParent;\n\n        while (offsetParent && jQuery.css(offsetParent, "position") === "static") {\n          offsetParent = offsetParent.offsetParent;\n        }\n\n        return offsetParent || documentElement;\n      });\n    }\n  }); // Create scrollLeft and scrollTop methods\n\n  jQuery.each({\n    scrollLeft: "pageXOffset",\n    scrollTop: "pageYOffset"\n  }, function (method, prop) {\n    var top = "pageYOffset" === prop;\n\n    jQuery.fn[method] = function (val) {\n      return access(this, function (elem, method, val) {\n        // Coalesce documents and windows\n        var win;\n\n        if (isWindow(elem)) {\n          win = elem;\n        } else if (elem.nodeType === 9) {\n          win = elem.defaultView;\n        }\n\n        if (val === undefined) {\n          return win ? win[prop] : elem[method];\n        }\n\n        if (win) {\n          win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);\n        } else {\n          elem[method] = val;\n        }\n      }, method, val, arguments.length);\n    };\n  }); // Support: Safari <=7 - 9.1, Chrome <=37 - 49\n  // Add the top/left cssHooks using jQuery.fn.position\n  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n  // getComputedStyle returns percent when specified for top/left/bottom/right;\n  // rather than make the css module depend on the offset module, just check for it here\n\n  jQuery.each(["top", "left"], function (_i, prop) {\n    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {\n      if (computed) {\n        computed = curCSS(elem, prop); // If curCSS returns percentage, fallback to offset\n\n        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;\n      }\n    });\n  }); // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\n\n  jQuery.each({\n    Height: "height",\n    Width: "width"\n  }, function (name, type) {\n    jQuery.each({\n      padding: "inner" + name,\n      content: type,\n      "": "outer" + name\n    }, function (defaultExtra, funcName) {\n      // Margin is only for outerHeight, outerWidth\n      jQuery.fn[funcName] = function (margin, value) {\n        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),\n            extra = defaultExtra || (margin === true || value === true ? "margin" : "border");\n        return access(this, function (elem, type, value) {\n          var doc;\n\n          if (isWindow(elem)) {\n            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n            return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];\n          } // Get document width or height\n\n\n          if (elem.nodeType === 9) {\n            doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n            // whichever is greatest\n\n            return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);\n          }\n\n          return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat\n          jQuery.css(elem, type, extra) : // Set width or height on the element\n          jQuery.style(elem, type, value, extra);\n        }, type, chainable ? margin : undefined, chainable);\n      };\n    });\n  });\n  jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (_i, type) {\n    jQuery.fn[type] = function (fn) {\n      return this.on(type, fn);\n    };\n  });\n  jQuery.fn.extend({\n    bind: function bind(types, data, fn) {\n      return this.on(types, null, data, fn);\n    },\n    unbind: function unbind(types, fn) {\n      return this.off(types, null, fn);\n    },\n    delegate: function delegate(selector, types, data, fn) {\n      return this.on(types, selector, data, fn);\n    },\n    undelegate: function undelegate(selector, types, fn) {\n      // ( namespace ) or ( selector, types [, fn] )\n      return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);\n    },\n    hover: function hover(fnOver, fnOut) {\n      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\n    }\n  });\n  jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (_i, name) {\n    // Handle event binding\n    jQuery.fn[name] = function (data, fn) {\n      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n    };\n  }); // Support: Android <=4.0 only\n  // Make sure we trim BOM and NBSP\n\n  var rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g; // Bind a function to a context, optionally partially applying any\n  // arguments.\n  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n  // However, it is not slated for removal any time soon\n\n  jQuery.proxy = function (fn, context) {\n    var tmp, args, proxy;\n\n    if (typeof context === "string") {\n      tmp = fn[context];\n      context = fn;\n      fn = tmp;\n    } // Quick check to determine if target is callable, in the spec\n    // this throws a TypeError, but we will just return undefined.\n\n\n    if (!isFunction(fn)) {\n      return undefined;\n    } // Simulated bind\n\n\n    args = _slice.call(arguments, 2);\n\n    proxy = function proxy() {\n      return fn.apply(context || this, args.concat(_slice.call(arguments)));\n    }; // Set the guid of unique handler to the same of original handler, so it can be removed\n\n\n    proxy.guid = fn.guid = fn.guid || jQuery.guid++;\n    return proxy;\n  };\n\n  jQuery.holdReady = function (hold) {\n    if (hold) {\n      jQuery.readyWait++;\n    } else {\n      jQuery.ready(true);\n    }\n  };\n\n  jQuery.isArray = Array.isArray;\n  jQuery.parseJSON = JSON.parse;\n  jQuery.nodeName = nodeName;\n  jQuery.isFunction = isFunction;\n  jQuery.isWindow = isWindow;\n  jQuery.camelCase = camelCase;\n  jQuery.type = toType;\n  jQuery.now = Date.now;\n\n  jQuery.isNumeric = function (obj) {\n    // As of jQuery 3.0, isNumeric is limited to\n    // strings and numbers (primitives or objects)\n    // that can be coerced to finite numbers (gh-2662)\n    var type = jQuery.type(obj);\n    return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")\n    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")\n    // subtraction forces infinities to NaN\n    !isNaN(obj - parseFloat(obj));\n  };\n\n  jQuery.trim = function (text) {\n    return text == null ? "" : (text + "").replace(rtrim, "");\n  }; // Register as a named AMD module, since jQuery can be concatenated with other\n  // files that may use define, but not via a proper concatenation script that\n  // understands anonymous AMD modules. A named AMD is safest and most robust\n  // way to register. Lowercase jquery is used because AMD module names are\n  // derived from file names, and jQuery is normally delivered in a lowercase\n  // file name. Do this after creating the global so that if an AMD module wants\n  // to call noConflict to hide this version of jQuery, it will work.\n  // Note that for maximum portability, libraries that are not jQuery should\n  // declare themselves as anonymous modules, and avoid setting a global if an\n  // AMD loader is present. jQuery is a special case. For more information, see\n  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return jQuery;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n\n  var // Map over jQuery in case of overwrite\n  _jQuery = window.jQuery,\n      // Map over the $ in case of overwrite\n  _$ = window.$;\n\n  jQuery.noConflict = function (deep) {\n    if (window.$ === jQuery) {\n      window.$ = _$;\n    }\n\n    if (deep && window.jQuery === jQuery) {\n      window.jQuery = _jQuery;\n    }\n\n    return jQuery;\n  }; // Expose jQuery and $ identifiers, even in AMD\n  // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n  // and CommonJS for browser emulators (#13566)\n\n\n  if (typeof noGlobal === "undefined") {\n    window.jQuery = window.$ = jQuery;\n  }\n\n  return jQuery;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///563\n')},425:function(__unused_webpack_module,__unused_webpack_exports,__webpack_require__){eval("/* provided dependency */ var jQuery = __webpack_require__(563);\n/* provided dependency */ var __webpack_provided_window_dot_jQuery = __webpack_require__(563);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Owl Carousel v2.3.4\n * Copyright 2013-2018 David Deutsch\n * Licensed under: SEE LICENSE IN https://github.com/OwlCarousel2/OwlCarousel2/blob/master/LICENSE\n */\n\n/**\n * Owl carousel\n * @version 2.3.4\n * @author Bartosz Wojciechowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n * @todo Lazy Load Icon\n * @todo prevent animationend bubling\n * @todo itemsScaleUp\n * @todo Test Zepto\n * @todo stagePadding calculate wrong active classes\n */\n;\n\n(function ($, window, document, undefined) {\n  /**\n   * Creates a carousel.\n   * @class The Owl Carousel.\n   * @public\n   * @param {HTMLElement|jQuery} element - The element to create the carousel for.\n   * @param {Object} [options] - The options\n   */\n  function Owl(element, options) {\n    /**\n     * Current settings for the carousel.\n     * @public\n     */\n    this.settings = null;\n    /**\n     * Current options set by the caller including defaults.\n     * @public\n     */\n\n    this.options = $.extend({}, Owl.Defaults, options);\n    /**\n     * Plugin element.\n     * @public\n     */\n\n    this.$element = $(element);\n    /**\n     * Proxied event handlers.\n     * @protected\n     */\n\n    this._handlers = {};\n    /**\n     * References to the running plugins of this carousel.\n     * @protected\n     */\n\n    this._plugins = {};\n    /**\n     * Currently suppressed events to prevent them from being retriggered.\n     * @protected\n     */\n\n    this._supress = {};\n    /**\n     * Absolute current position.\n     * @protected\n     */\n\n    this._current = null;\n    /**\n     * Animation speed in milliseconds.\n     * @protected\n     */\n\n    this._speed = null;\n    /**\n     * Coordinates of all items in pixel.\n     * @todo The name of this member is missleading.\n     * @protected\n     */\n\n    this._coordinates = [];\n    /**\n     * Current breakpoint.\n     * @todo Real media queries would be nice.\n     * @protected\n     */\n\n    this._breakpoint = null;\n    /**\n     * Current width of the plugin element.\n     */\n\n    this._width = null;\n    /**\n     * All real items.\n     * @protected\n     */\n\n    this._items = [];\n    /**\n     * All cloned items.\n     * @protected\n     */\n\n    this._clones = [];\n    /**\n     * Merge values of all items.\n     * @todo Maybe this could be part of a plugin.\n     * @protected\n     */\n\n    this._mergers = [];\n    /**\n     * Widths of all items.\n     */\n\n    this._widths = [];\n    /**\n     * Invalidated parts within the update process.\n     * @protected\n     */\n\n    this._invalidated = {};\n    /**\n     * Ordered list of workers for the update process.\n     * @protected\n     */\n\n    this._pipe = [];\n    /**\n     * Current state information for the drag operation.\n     * @todo #261\n     * @protected\n     */\n\n    this._drag = {\n      time: null,\n      target: null,\n      pointer: null,\n      stage: {\n        start: null,\n        current: null\n      },\n      direction: null\n    };\n    /**\n     * Current state information and their tags.\n     * @type {Object}\n     * @protected\n     */\n\n    this._states = {\n      current: {},\n      tags: {\n        'initializing': ['busy'],\n        'animating': ['busy'],\n        'dragging': ['interacting']\n      }\n    };\n    $.each(['onResize', 'onThrottledResize'], $.proxy(function (i, handler) {\n      this._handlers[handler] = $.proxy(this[handler], this);\n    }, this));\n    $.each(Owl.Plugins, $.proxy(function (key, plugin) {\n      this._plugins[key.charAt(0).toLowerCase() + key.slice(1)] = new plugin(this);\n    }, this));\n    $.each(Owl.Workers, $.proxy(function (priority, worker) {\n      this._pipe.push({\n        'filter': worker.filter,\n        'run': $.proxy(worker.run, this)\n      });\n    }, this));\n    this.setup();\n    this.initialize();\n  }\n  /**\n   * Default options for the carousel.\n   * @public\n   */\n\n\n  Owl.Defaults = {\n    items: 3,\n    loop: false,\n    center: false,\n    rewind: false,\n    checkVisibility: true,\n    mouseDrag: true,\n    touchDrag: true,\n    pullDrag: true,\n    freeDrag: false,\n    margin: 0,\n    stagePadding: 0,\n    merge: false,\n    mergeFit: true,\n    autoWidth: false,\n    startPosition: 0,\n    rtl: false,\n    smartSpeed: 250,\n    fluidSpeed: false,\n    dragEndSpeed: false,\n    responsive: {},\n    responsiveRefreshRate: 200,\n    responsiveBaseElement: window,\n    fallbackEasing: 'swing',\n    slideTransition: '',\n    info: false,\n    nestedItemSelector: false,\n    itemElement: 'div',\n    stageElement: 'div',\n    refreshClass: 'owl-refresh',\n    loadedClass: 'owl-loaded',\n    loadingClass: 'owl-loading',\n    rtlClass: 'owl-rtl',\n    responsiveClass: 'owl-responsive',\n    dragClass: 'owl-drag',\n    itemClass: 'owl-item',\n    stageClass: 'owl-stage',\n    stageOuterClass: 'owl-stage-outer',\n    grabClass: 'owl-grab'\n  };\n  /**\n   * Enumeration for width.\n   * @public\n   * @readonly\n   * @enum {String}\n   */\n\n  Owl.Width = {\n    Default: 'default',\n    Inner: 'inner',\n    Outer: 'outer'\n  };\n  /**\n   * Enumeration for types.\n   * @public\n   * @readonly\n   * @enum {String}\n   */\n\n  Owl.Type = {\n    Event: 'event',\n    State: 'state'\n  };\n  /**\n   * Contains all registered plugins.\n   * @public\n   */\n\n  Owl.Plugins = {};\n  /**\n   * List of workers involved in the update process.\n   */\n\n  Owl.Workers = [{\n    filter: ['width', 'settings'],\n    run: function run() {\n      this._width = this.$element.width();\n    }\n  }, {\n    filter: ['width', 'items', 'settings'],\n    run: function run(cache) {\n      cache.current = this._items && this._items[this.relative(this._current)];\n    }\n  }, {\n    filter: ['items', 'settings'],\n    run: function run() {\n      this.$stage.children('.cloned').remove();\n    }\n  }, {\n    filter: ['width', 'items', 'settings'],\n    run: function run(cache) {\n      var margin = this.settings.margin || '',\n          grid = !this.settings.autoWidth,\n          rtl = this.settings.rtl,\n          css = {\n        'width': 'auto',\n        'margin-left': rtl ? margin : '',\n        'margin-right': rtl ? '' : margin\n      };\n      !grid && this.$stage.children().css(css);\n      cache.css = css;\n    }\n  }, {\n    filter: ['width', 'items', 'settings'],\n    run: function run(cache) {\n      var width = (this.width() / this.settings.items).toFixed(3) - this.settings.margin,\n          merge = null,\n          iterator = this._items.length,\n          grid = !this.settings.autoWidth,\n          widths = [];\n      cache.items = {\n        merge: false,\n        width: width\n      };\n\n      while (iterator--) {\n        merge = this._mergers[iterator];\n        merge = this.settings.mergeFit && Math.min(merge, this.settings.items) || merge;\n        cache.items.merge = merge > 1 || cache.items.merge;\n        widths[iterator] = !grid ? this._items[iterator].width() : width * merge;\n      }\n\n      this._widths = widths;\n    }\n  }, {\n    filter: ['items', 'settings'],\n    run: function run() {\n      var clones = [],\n          items = this._items,\n          settings = this.settings,\n          // TODO: Should be computed from number of min width items in stage\n      view = Math.max(settings.items * 2, 4),\n          size = Math.ceil(items.length / 2) * 2,\n          repeat = settings.loop && items.length ? settings.rewind ? view : Math.max(view, size) : 0,\n          append = '',\n          prepend = '';\n      repeat /= 2;\n\n      while (repeat > 0) {\n        // Switch to only using appended clones\n        clones.push(this.normalize(clones.length / 2, true));\n        append = append + items[clones[clones.length - 1]][0].outerHTML;\n        clones.push(this.normalize(items.length - 1 - (clones.length - 1) / 2, true));\n        prepend = items[clones[clones.length - 1]][0].outerHTML + prepend;\n        repeat -= 1;\n      }\n\n      this._clones = clones;\n      $(append).addClass('cloned').appendTo(this.$stage);\n      $(prepend).addClass('cloned').prependTo(this.$stage);\n    }\n  }, {\n    filter: ['width', 'items', 'settings'],\n    run: function run() {\n      var rtl = this.settings.rtl ? 1 : -1,\n          size = this._clones.length + this._items.length,\n          iterator = -1,\n          previous = 0,\n          current = 0,\n          coordinates = [];\n\n      while (++iterator < size) {\n        previous = coordinates[iterator - 1] || 0;\n        current = this._widths[this.relative(iterator)] + this.settings.margin;\n        coordinates.push(previous + current * rtl);\n      }\n\n      this._coordinates = coordinates;\n    }\n  }, {\n    filter: ['width', 'items', 'settings'],\n    run: function run() {\n      var padding = this.settings.stagePadding,\n          coordinates = this._coordinates,\n          css = {\n        'width': Math.ceil(Math.abs(coordinates[coordinates.length - 1])) + padding * 2,\n        'padding-left': padding || '',\n        'padding-right': padding || ''\n      };\n      this.$stage.css(css);\n    }\n  }, {\n    filter: ['width', 'items', 'settings'],\n    run: function run(cache) {\n      var iterator = this._coordinates.length,\n          grid = !this.settings.autoWidth,\n          items = this.$stage.children();\n\n      if (grid && cache.items.merge) {\n        while (iterator--) {\n          cache.css.width = this._widths[this.relative(iterator)];\n          items.eq(iterator).css(cache.css);\n        }\n      } else if (grid) {\n        cache.css.width = cache.items.width;\n        items.css(cache.css);\n      }\n    }\n  }, {\n    filter: ['items'],\n    run: function run() {\n      this._coordinates.length < 1 && this.$stage.removeAttr('style');\n    }\n  }, {\n    filter: ['width', 'items', 'settings'],\n    run: function run(cache) {\n      cache.current = cache.current ? this.$stage.children().index(cache.current) : 0;\n      cache.current = Math.max(this.minimum(), Math.min(this.maximum(), cache.current));\n      this.reset(cache.current);\n    }\n  }, {\n    filter: ['position'],\n    run: function run() {\n      this.animate(this.coordinates(this._current));\n    }\n  }, {\n    filter: ['width', 'position', 'items', 'settings'],\n    run: function run() {\n      var rtl = this.settings.rtl ? 1 : -1,\n          padding = this.settings.stagePadding * 2,\n          begin = this.coordinates(this.current()) + padding,\n          end = begin + this.width() * rtl,\n          inner,\n          outer,\n          matches = [],\n          i,\n          n;\n\n      for (i = 0, n = this._coordinates.length; i < n; i++) {\n        inner = this._coordinates[i - 1] || 0;\n        outer = Math.abs(this._coordinates[i]) + padding * rtl;\n\n        if (this.op(inner, '<=', begin) && this.op(inner, '>', end) || this.op(outer, '<', begin) && this.op(outer, '>', end)) {\n          matches.push(i);\n        }\n      }\n\n      this.$stage.children('.active').removeClass('active');\n      this.$stage.children(':eq(' + matches.join('), :eq(') + ')').addClass('active');\n      this.$stage.children('.center').removeClass('center');\n\n      if (this.settings.center) {\n        this.$stage.children().eq(this.current()).addClass('center');\n      }\n    }\n  }];\n  /**\n   * Create the stage DOM element\n   */\n\n  Owl.prototype.initializeStage = function () {\n    this.$stage = this.$element.find('.' + this.settings.stageClass); // if the stage is already in the DOM, grab it and skip stage initialization\n\n    if (this.$stage.length) {\n      return;\n    }\n\n    this.$element.addClass(this.options.loadingClass); // create stage\n\n    this.$stage = $('<' + this.settings.stageElement + '>', {\n      \"class\": this.settings.stageClass\n    }).wrap($('<div/>', {\n      \"class\": this.settings.stageOuterClass\n    })); // append stage\n\n    this.$element.append(this.$stage.parent());\n  };\n  /**\n   * Create item DOM elements\n   */\n\n\n  Owl.prototype.initializeItems = function () {\n    var $items = this.$element.find('.owl-item'); // if the items are already in the DOM, grab them and skip item initialization\n\n    if ($items.length) {\n      this._items = $items.get().map(function (item) {\n        return $(item);\n      });\n      this._mergers = this._items.map(function () {\n        return 1;\n      });\n      this.refresh();\n      return;\n    } // append content\n\n\n    this.replace(this.$element.children().not(this.$stage.parent())); // check visibility\n\n    if (this.isVisible()) {\n      // update view\n      this.refresh();\n    } else {\n      // invalidate width\n      this.invalidate('width');\n    }\n\n    this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass);\n  };\n  /**\n   * Initializes the carousel.\n   * @protected\n   */\n\n\n  Owl.prototype.initialize = function () {\n    this.enter('initializing');\n    this.trigger('initialize');\n    this.$element.toggleClass(this.settings.rtlClass, this.settings.rtl);\n\n    if (this.settings.autoWidth && !this.is('pre-loading')) {\n      var imgs, nestedSelector, width;\n      imgs = this.$element.find('img');\n      nestedSelector = this.settings.nestedItemSelector ? '.' + this.settings.nestedItemSelector : undefined;\n      width = this.$element.children(nestedSelector).width();\n\n      if (imgs.length && width <= 0) {\n        this.preloadAutoWidthImages(imgs);\n      }\n    }\n\n    this.initializeStage();\n    this.initializeItems(); // register event handlers\n\n    this.registerEventHandlers();\n    this.leave('initializing');\n    this.trigger('initialized');\n  };\n  /**\n   * @returns {Boolean} visibility of $element\n   *                    if you know the carousel will always be visible you can set `checkVisibility` to `false` to\n   *                    prevent the expensive browser layout forced reflow the $element.is(':visible') does\n   */\n\n\n  Owl.prototype.isVisible = function () {\n    return this.settings.checkVisibility ? this.$element.is(':visible') : true;\n  };\n  /**\n   * Setups the current settings.\n   * @todo Remove responsive classes. Why should adaptive designs be brought into IE8?\n   * @todo Support for media queries by using `matchMedia` would be nice.\n   * @public\n   */\n\n\n  Owl.prototype.setup = function () {\n    var viewport = this.viewport(),\n        overwrites = this.options.responsive,\n        match = -1,\n        settings = null;\n\n    if (!overwrites) {\n      settings = $.extend({}, this.options);\n    } else {\n      $.each(overwrites, function (breakpoint) {\n        if (breakpoint <= viewport && breakpoint > match) {\n          match = Number(breakpoint);\n        }\n      });\n      settings = $.extend({}, this.options, overwrites[match]);\n\n      if (typeof settings.stagePadding === 'function') {\n        settings.stagePadding = settings.stagePadding();\n      }\n\n      delete settings.responsive; // responsive class\n\n      if (settings.responsiveClass) {\n        this.$element.attr('class', this.$element.attr('class').replace(new RegExp('(' + this.options.responsiveClass + '-)\\\\S+\\\\s', 'g'), '$1' + match));\n      }\n    }\n\n    this.trigger('change', {\n      property: {\n        name: 'settings',\n        value: settings\n      }\n    });\n    this._breakpoint = match;\n    this.settings = settings;\n    this.invalidate('settings');\n    this.trigger('changed', {\n      property: {\n        name: 'settings',\n        value: this.settings\n      }\n    });\n  };\n  /**\n   * Updates option logic if necessery.\n   * @protected\n   */\n\n\n  Owl.prototype.optionsLogic = function () {\n    if (this.settings.autoWidth) {\n      this.settings.stagePadding = false;\n      this.settings.merge = false;\n    }\n  };\n  /**\n   * Prepares an item before add.\n   * @todo Rename event parameter `content` to `item`.\n   * @protected\n   * @returns {jQuery|HTMLElement} - The item container.\n   */\n\n\n  Owl.prototype.prepare = function (item) {\n    var event = this.trigger('prepare', {\n      content: item\n    });\n\n    if (!event.data) {\n      event.data = $('<' + this.settings.itemElement + '/>').addClass(this.options.itemClass).append(item);\n    }\n\n    this.trigger('prepared', {\n      content: event.data\n    });\n    return event.data;\n  };\n  /**\n   * Updates the view.\n   * @public\n   */\n\n\n  Owl.prototype.update = function () {\n    var i = 0,\n        n = this._pipe.length,\n        filter = $.proxy(function (p) {\n      return this[p];\n    }, this._invalidated),\n        cache = {};\n\n    while (i < n) {\n      if (this._invalidated.all || $.grep(this._pipe[i].filter, filter).length > 0) {\n        this._pipe[i].run(cache);\n      }\n\n      i++;\n    }\n\n    this._invalidated = {};\n    !this.is('valid') && this.enter('valid');\n  };\n  /**\n   * Gets the width of the view.\n   * @public\n   * @param {Owl.Width} [dimension=Owl.Width.Default] - The dimension to return.\n   * @returns {Number} - The width of the view in pixel.\n   */\n\n\n  Owl.prototype.width = function (dimension) {\n    dimension = dimension || Owl.Width.Default;\n\n    switch (dimension) {\n      case Owl.Width.Inner:\n      case Owl.Width.Outer:\n        return this._width;\n\n      default:\n        return this._width - this.settings.stagePadding * 2 + this.settings.margin;\n    }\n  };\n  /**\n   * Refreshes the carousel primarily for adaptive purposes.\n   * @public\n   */\n\n\n  Owl.prototype.refresh = function () {\n    this.enter('refreshing');\n    this.trigger('refresh');\n    this.setup();\n    this.optionsLogic();\n    this.$element.addClass(this.options.refreshClass);\n    this.update();\n    this.$element.removeClass(this.options.refreshClass);\n    this.leave('refreshing');\n    this.trigger('refreshed');\n  };\n  /**\n   * Checks window `resize` event.\n   * @protected\n   */\n\n\n  Owl.prototype.onThrottledResize = function () {\n    window.clearTimeout(this.resizeTimer);\n    this.resizeTimer = window.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate);\n  };\n  /**\n   * Checks window `resize` event.\n   * @protected\n   */\n\n\n  Owl.prototype.onResize = function () {\n    if (!this._items.length) {\n      return false;\n    }\n\n    if (this._width === this.$element.width()) {\n      return false;\n    }\n\n    if (!this.isVisible()) {\n      return false;\n    }\n\n    this.enter('resizing');\n\n    if (this.trigger('resize').isDefaultPrevented()) {\n      this.leave('resizing');\n      return false;\n    }\n\n    this.invalidate('width');\n    this.refresh();\n    this.leave('resizing');\n    this.trigger('resized');\n  };\n  /**\n   * Registers event handlers.\n   * @todo Check `msPointerEnabled`\n   * @todo #261\n   * @protected\n   */\n\n\n  Owl.prototype.registerEventHandlers = function () {\n    if ($.support.transition) {\n      this.$stage.on($.support.transition.end + '.owl.core', $.proxy(this.onTransitionEnd, this));\n    }\n\n    if (this.settings.responsive !== false) {\n      this.on(window, 'resize', this._handlers.onThrottledResize);\n    }\n\n    if (this.settings.mouseDrag) {\n      this.$element.addClass(this.options.dragClass);\n      this.$stage.on('mousedown.owl.core', $.proxy(this.onDragStart, this));\n      this.$stage.on('dragstart.owl.core selectstart.owl.core', function () {\n        return false;\n      });\n    }\n\n    if (this.settings.touchDrag) {\n      this.$stage.on('touchstart.owl.core', $.proxy(this.onDragStart, this));\n      this.$stage.on('touchcancel.owl.core', $.proxy(this.onDragEnd, this));\n    }\n  };\n  /**\n   * Handles `touchstart` and `mousedown` events.\n   * @todo Horizontal swipe threshold as option\n   * @todo #261\n   * @protected\n   * @param {Event} event - The event arguments.\n   */\n\n\n  Owl.prototype.onDragStart = function (event) {\n    var stage = null;\n\n    if (event.which === 3) {\n      return;\n    }\n\n    if ($.support.transform) {\n      stage = this.$stage.css('transform').replace(/.*\\(|\\)| /g, '').split(',');\n      stage = {\n        x: stage[stage.length === 16 ? 12 : 4],\n        y: stage[stage.length === 16 ? 13 : 5]\n      };\n    } else {\n      stage = this.$stage.position();\n      stage = {\n        x: this.settings.rtl ? stage.left + this.$stage.width() - this.width() + this.settings.margin : stage.left,\n        y: stage.top\n      };\n    }\n\n    if (this.is('animating')) {\n      $.support.transform ? this.animate(stage.x) : this.$stage.stop();\n      this.invalidate('position');\n    }\n\n    this.$element.toggleClass(this.options.grabClass, event.type === 'mousedown');\n    this.speed(0);\n    this._drag.time = new Date().getTime();\n    this._drag.target = $(event.target);\n    this._drag.stage.start = stage;\n    this._drag.stage.current = stage;\n    this._drag.pointer = this.pointer(event);\n    $(document).on('mouseup.owl.core touchend.owl.core', $.proxy(this.onDragEnd, this));\n    $(document).one('mousemove.owl.core touchmove.owl.core', $.proxy(function (event) {\n      var delta = this.difference(this._drag.pointer, this.pointer(event));\n      $(document).on('mousemove.owl.core touchmove.owl.core', $.proxy(this.onDragMove, this));\n\n      if (Math.abs(delta.x) < Math.abs(delta.y) && this.is('valid')) {\n        return;\n      }\n\n      event.preventDefault();\n      this.enter('dragging');\n      this.trigger('drag');\n    }, this));\n  };\n  /**\n   * Handles the `touchmove` and `mousemove` events.\n   * @todo #261\n   * @protected\n   * @param {Event} event - The event arguments.\n   */\n\n\n  Owl.prototype.onDragMove = function (event) {\n    var minimum = null,\n        maximum = null,\n        pull = null,\n        delta = this.difference(this._drag.pointer, this.pointer(event)),\n        stage = this.difference(this._drag.stage.start, delta);\n\n    if (!this.is('dragging')) {\n      return;\n    }\n\n    event.preventDefault();\n\n    if (this.settings.loop) {\n      minimum = this.coordinates(this.minimum());\n      maximum = this.coordinates(this.maximum() + 1) - minimum;\n      stage.x = ((stage.x - minimum) % maximum + maximum) % maximum + minimum;\n    } else {\n      minimum = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum());\n      maximum = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum());\n      pull = this.settings.pullDrag ? -1 * delta.x / 5 : 0;\n      stage.x = Math.max(Math.min(stage.x, minimum + pull), maximum + pull);\n    }\n\n    this._drag.stage.current = stage;\n    this.animate(stage.x);\n  };\n  /**\n   * Handles the `touchend` and `mouseup` events.\n   * @todo #261\n   * @todo Threshold for click event\n   * @protected\n   * @param {Event} event - The event arguments.\n   */\n\n\n  Owl.prototype.onDragEnd = function (event) {\n    var delta = this.difference(this._drag.pointer, this.pointer(event)),\n        stage = this._drag.stage.current,\n        direction = delta.x > 0 ^ this.settings.rtl ? 'left' : 'right';\n    $(document).off('.owl.core');\n    this.$element.removeClass(this.options.grabClass);\n\n    if (delta.x !== 0 && this.is('dragging') || !this.is('valid')) {\n      this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed);\n      this.current(this.closest(stage.x, delta.x !== 0 ? direction : this._drag.direction));\n      this.invalidate('position');\n      this.update();\n      this._drag.direction = direction;\n\n      if (Math.abs(delta.x) > 3 || new Date().getTime() - this._drag.time > 300) {\n        this._drag.target.one('click.owl.core', function () {\n          return false;\n        });\n      }\n    }\n\n    if (!this.is('dragging')) {\n      return;\n    }\n\n    this.leave('dragging');\n    this.trigger('dragged');\n  };\n  /**\n   * Gets absolute position of the closest item for a coordinate.\n   * @todo Setting `freeDrag` makes `closest` not reusable. See #165.\n   * @protected\n   * @param {Number} coordinate - The coordinate in pixel.\n   * @param {String} direction - The direction to check for the closest item. Ether `left` or `right`.\n   * @return {Number} - The absolute position of the closest item.\n   */\n\n\n  Owl.prototype.closest = function (coordinate, direction) {\n    var position = -1,\n        pull = 30,\n        width = this.width(),\n        coordinates = this.coordinates();\n\n    if (!this.settings.freeDrag) {\n      // check closest item\n      $.each(coordinates, $.proxy(function (index, value) {\n        // on a left pull, check on current index\n        if (direction === 'left' && coordinate > value - pull && coordinate < value + pull) {\n          position = index; // on a right pull, check on previous index\n          // to do so, subtract width from value and set position = index + 1\n        } else if (direction === 'right' && coordinate > value - width - pull && coordinate < value - width + pull) {\n          position = index + 1;\n        } else if (this.op(coordinate, '<', value) && this.op(coordinate, '>', coordinates[index + 1] !== undefined ? coordinates[index + 1] : value - width)) {\n          position = direction === 'left' ? index + 1 : index;\n        }\n\n        return position === -1;\n      }, this));\n    }\n\n    if (!this.settings.loop) {\n      // non loop boundries\n      if (this.op(coordinate, '>', coordinates[this.minimum()])) {\n        position = coordinate = this.minimum();\n      } else if (this.op(coordinate, '<', coordinates[this.maximum()])) {\n        position = coordinate = this.maximum();\n      }\n    }\n\n    return position;\n  };\n  /**\n   * Animates the stage.\n   * @todo #270\n   * @public\n   * @param {Number} coordinate - The coordinate in pixels.\n   */\n\n\n  Owl.prototype.animate = function (coordinate) {\n    var animate = this.speed() > 0;\n    this.is('animating') && this.onTransitionEnd();\n\n    if (animate) {\n      this.enter('animating');\n      this.trigger('translate');\n    }\n\n    if ($.support.transform3d && $.support.transition) {\n      this.$stage.css({\n        transform: 'translate3d(' + coordinate + 'px,0px,0px)',\n        transition: this.speed() / 1000 + 's' + (this.settings.slideTransition ? ' ' + this.settings.slideTransition : '')\n      });\n    } else if (animate) {\n      this.$stage.animate({\n        left: coordinate + 'px'\n      }, this.speed(), this.settings.fallbackEasing, $.proxy(this.onTransitionEnd, this));\n    } else {\n      this.$stage.css({\n        left: coordinate + 'px'\n      });\n    }\n  };\n  /**\n   * Checks whether the carousel is in a specific state or not.\n   * @param {String} state - The state to check.\n   * @returns {Boolean} - The flag which indicates if the carousel is busy.\n   */\n\n\n  Owl.prototype.is = function (state) {\n    return this._states.current[state] && this._states.current[state] > 0;\n  };\n  /**\n   * Sets the absolute position of the current item.\n   * @public\n   * @param {Number} [position] - The new absolute position or nothing to leave it unchanged.\n   * @returns {Number} - The absolute position of the current item.\n   */\n\n\n  Owl.prototype.current = function (position) {\n    if (position === undefined) {\n      return this._current;\n    }\n\n    if (this._items.length === 0) {\n      return undefined;\n    }\n\n    position = this.normalize(position);\n\n    if (this._current !== position) {\n      var event = this.trigger('change', {\n        property: {\n          name: 'position',\n          value: position\n        }\n      });\n\n      if (event.data !== undefined) {\n        position = this.normalize(event.data);\n      }\n\n      this._current = position;\n      this.invalidate('position');\n      this.trigger('changed', {\n        property: {\n          name: 'position',\n          value: this._current\n        }\n      });\n    }\n\n    return this._current;\n  };\n  /**\n   * Invalidates the given part of the update routine.\n   * @param {String} [part] - The part to invalidate.\n   * @returns {Array.<String>} - The invalidated parts.\n   */\n\n\n  Owl.prototype.invalidate = function (part) {\n    if ($.type(part) === 'string') {\n      this._invalidated[part] = true;\n      this.is('valid') && this.leave('valid');\n    }\n\n    return $.map(this._invalidated, function (v, i) {\n      return i;\n    });\n  };\n  /**\n   * Resets the absolute position of the current item.\n   * @public\n   * @param {Number} position - The absolute position of the new item.\n   */\n\n\n  Owl.prototype.reset = function (position) {\n    position = this.normalize(position);\n\n    if (position === undefined) {\n      return;\n    }\n\n    this._speed = 0;\n    this._current = position;\n    this.suppress(['translate', 'translated']);\n    this.animate(this.coordinates(position));\n    this.release(['translate', 'translated']);\n  };\n  /**\n   * Normalizes an absolute or a relative position of an item.\n   * @public\n   * @param {Number} position - The absolute or relative position to normalize.\n   * @param {Boolean} [relative=false] - Whether the given position is relative or not.\n   * @returns {Number} - The normalized position.\n   */\n\n\n  Owl.prototype.normalize = function (position, relative) {\n    var n = this._items.length,\n        m = relative ? 0 : this._clones.length;\n\n    if (!this.isNumeric(position) || n < 1) {\n      position = undefined;\n    } else if (position < 0 || position >= n + m) {\n      position = ((position - m / 2) % n + n) % n + m / 2;\n    }\n\n    return position;\n  };\n  /**\n   * Converts an absolute position of an item into a relative one.\n   * @public\n   * @param {Number} position - The absolute position to convert.\n   * @returns {Number} - The converted position.\n   */\n\n\n  Owl.prototype.relative = function (position) {\n    position -= this._clones.length / 2;\n    return this.normalize(position, true);\n  };\n  /**\n   * Gets the maximum position for the current item.\n   * @public\n   * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.\n   * @returns {Number}\n   */\n\n\n  Owl.prototype.maximum = function (relative) {\n    var settings = this.settings,\n        maximum = this._coordinates.length,\n        iterator,\n        reciprocalItemsWidth,\n        elementWidth;\n\n    if (settings.loop) {\n      maximum = this._clones.length / 2 + this._items.length - 1;\n    } else if (settings.autoWidth || settings.merge) {\n      iterator = this._items.length;\n\n      if (iterator) {\n        reciprocalItemsWidth = this._items[--iterator].width();\n        elementWidth = this.$element.width();\n\n        while (iterator--) {\n          reciprocalItemsWidth += this._items[iterator].width() + this.settings.margin;\n\n          if (reciprocalItemsWidth > elementWidth) {\n            break;\n          }\n        }\n      }\n\n      maximum = iterator + 1;\n    } else if (settings.center) {\n      maximum = this._items.length - 1;\n    } else {\n      maximum = this._items.length - settings.items;\n    }\n\n    if (relative) {\n      maximum -= this._clones.length / 2;\n    }\n\n    return Math.max(maximum, 0);\n  };\n  /**\n   * Gets the minimum position for the current item.\n   * @public\n   * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.\n   * @returns {Number}\n   */\n\n\n  Owl.prototype.minimum = function (relative) {\n    return relative ? 0 : this._clones.length / 2;\n  };\n  /**\n   * Gets an item at the specified relative position.\n   * @public\n   * @param {Number} [position] - The relative position of the item.\n   * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.\n   */\n\n\n  Owl.prototype.items = function (position) {\n    if (position === undefined) {\n      return this._items.slice();\n    }\n\n    position = this.normalize(position, true);\n    return this._items[position];\n  };\n  /**\n   * Gets an item at the specified relative position.\n   * @public\n   * @param {Number} [position] - The relative position of the item.\n   * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.\n   */\n\n\n  Owl.prototype.mergers = function (position) {\n    if (position === undefined) {\n      return this._mergers.slice();\n    }\n\n    position = this.normalize(position, true);\n    return this._mergers[position];\n  };\n  /**\n   * Gets the absolute positions of clones for an item.\n   * @public\n   * @param {Number} [position] - The relative position of the item.\n   * @returns {Array.<Number>} - The absolute positions of clones for the item or all if no position was given.\n   */\n\n\n  Owl.prototype.clones = function (position) {\n    var odd = this._clones.length / 2,\n        even = odd + this._items.length,\n        map = function map(index) {\n      return index % 2 === 0 ? even + index / 2 : odd - (index + 1) / 2;\n    };\n\n    if (position === undefined) {\n      return $.map(this._clones, function (v, i) {\n        return map(i);\n      });\n    }\n\n    return $.map(this._clones, function (v, i) {\n      return v === position ? map(i) : null;\n    });\n  };\n  /**\n   * Sets the current animation speed.\n   * @public\n   * @param {Number} [speed] - The animation speed in milliseconds or nothing to leave it unchanged.\n   * @returns {Number} - The current animation speed in milliseconds.\n   */\n\n\n  Owl.prototype.speed = function (speed) {\n    if (speed !== undefined) {\n      this._speed = speed;\n    }\n\n    return this._speed;\n  };\n  /**\n   * Gets the coordinate of an item.\n   * @todo The name of this method is missleanding.\n   * @public\n   * @param {Number} position - The absolute position of the item within `minimum()` and `maximum()`.\n   * @returns {Number|Array.<Number>} - The coordinate of the item in pixel or all coordinates.\n   */\n\n\n  Owl.prototype.coordinates = function (position) {\n    var multiplier = 1,\n        newPosition = position - 1,\n        coordinate;\n\n    if (position === undefined) {\n      return $.map(this._coordinates, $.proxy(function (coordinate, index) {\n        return this.coordinates(index);\n      }, this));\n    }\n\n    if (this.settings.center) {\n      if (this.settings.rtl) {\n        multiplier = -1;\n        newPosition = position + 1;\n      }\n\n      coordinate = this._coordinates[position];\n      coordinate += (this.width() - coordinate + (this._coordinates[newPosition] || 0)) / 2 * multiplier;\n    } else {\n      coordinate = this._coordinates[newPosition] || 0;\n    }\n\n    coordinate = Math.ceil(coordinate);\n    return coordinate;\n  };\n  /**\n   * Calculates the speed for a translation.\n   * @protected\n   * @param {Number} from - The absolute position of the start item.\n   * @param {Number} to - The absolute position of the target item.\n   * @param {Number} [factor=undefined] - The time factor in milliseconds.\n   * @returns {Number} - The time in milliseconds for the translation.\n   */\n\n\n  Owl.prototype.duration = function (from, to, factor) {\n    if (factor === 0) {\n      return 0;\n    }\n\n    return Math.min(Math.max(Math.abs(to - from), 1), 6) * Math.abs(factor || this.settings.smartSpeed);\n  };\n  /**\n   * Slides to the specified item.\n   * @public\n   * @param {Number} position - The position of the item.\n   * @param {Number} [speed] - The time in milliseconds for the transition.\n   */\n\n\n  Owl.prototype.to = function (position, speed) {\n    var current = this.current(),\n        revert = null,\n        distance = position - this.relative(current),\n        direction = (distance > 0) - (distance < 0),\n        items = this._items.length,\n        minimum = this.minimum(),\n        maximum = this.maximum();\n\n    if (this.settings.loop) {\n      if (!this.settings.rewind && Math.abs(distance) > items / 2) {\n        distance += direction * -1 * items;\n      }\n\n      position = current + distance;\n      revert = ((position - minimum) % items + items) % items + minimum;\n\n      if (revert !== position && revert - distance <= maximum && revert - distance > 0) {\n        current = revert - distance;\n        position = revert;\n        this.reset(current);\n      }\n    } else if (this.settings.rewind) {\n      maximum += 1;\n      position = (position % maximum + maximum) % maximum;\n    } else {\n      position = Math.max(minimum, Math.min(maximum, position));\n    }\n\n    this.speed(this.duration(current, position, speed));\n    this.current(position);\n\n    if (this.isVisible()) {\n      this.update();\n    }\n  };\n  /**\n   * Slides to the next item.\n   * @public\n   * @param {Number} [speed] - The time in milliseconds for the transition.\n   */\n\n\n  Owl.prototype.next = function (speed) {\n    speed = speed || false;\n    this.to(this.relative(this.current()) + 1, speed);\n  };\n  /**\n   * Slides to the previous item.\n   * @public\n   * @param {Number} [speed] - The time in milliseconds for the transition.\n   */\n\n\n  Owl.prototype.prev = function (speed) {\n    speed = speed || false;\n    this.to(this.relative(this.current()) - 1, speed);\n  };\n  /**\n   * Handles the end of an animation.\n   * @protected\n   * @param {Event} event - The event arguments.\n   */\n\n\n  Owl.prototype.onTransitionEnd = function (event) {\n    // if css2 animation then event object is undefined\n    if (event !== undefined) {\n      event.stopPropagation(); // Catch only owl-stage transitionEnd event\n\n      if ((event.target || event.srcElement || event.originalTarget) !== this.$stage.get(0)) {\n        return false;\n      }\n    }\n\n    this.leave('animating');\n    this.trigger('translated');\n  };\n  /**\n   * Gets viewport width.\n   * @protected\n   * @return {Number} - The width in pixel.\n   */\n\n\n  Owl.prototype.viewport = function () {\n    var width;\n\n    if (this.options.responsiveBaseElement !== window) {\n      width = $(this.options.responsiveBaseElement).width();\n    } else if (window.innerWidth) {\n      width = window.innerWidth;\n    } else if (document.documentElement && document.documentElement.clientWidth) {\n      width = document.documentElement.clientWidth;\n    } else {\n      console.warn('Can not detect viewport width.');\n    }\n\n    return width;\n  };\n  /**\n   * Replaces the current content.\n   * @public\n   * @param {HTMLElement|jQuery|String} content - The new content.\n   */\n\n\n  Owl.prototype.replace = function (content) {\n    this.$stage.empty();\n    this._items = [];\n\n    if (content) {\n      content = content instanceof jQuery ? content : $(content);\n    }\n\n    if (this.settings.nestedItemSelector) {\n      content = content.find('.' + this.settings.nestedItemSelector);\n    }\n\n    content.filter(function () {\n      return this.nodeType === 1;\n    }).each($.proxy(function (index, item) {\n      item = this.prepare(item);\n      this.$stage.append(item);\n\n      this._items.push(item);\n\n      this._mergers.push(item.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);\n    }, this));\n    this.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0);\n    this.invalidate('items');\n  };\n  /**\n   * Adds an item.\n   * @todo Use `item` instead of `content` for the event arguments.\n   * @public\n   * @param {HTMLElement|jQuery|String} content - The item content to add.\n   * @param {Number} [position] - The relative position at which to insert the item otherwise the item will be added to the end.\n   */\n\n\n  Owl.prototype.add = function (content, position) {\n    var current = this.relative(this._current);\n    position = position === undefined ? this._items.length : this.normalize(position, true);\n    content = content instanceof jQuery ? content : $(content);\n    this.trigger('add', {\n      content: content,\n      position: position\n    });\n    content = this.prepare(content);\n\n    if (this._items.length === 0 || position === this._items.length) {\n      this._items.length === 0 && this.$stage.append(content);\n      this._items.length !== 0 && this._items[position - 1].after(content);\n\n      this._items.push(content);\n\n      this._mergers.push(content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);\n    } else {\n      this._items[position].before(content);\n\n      this._items.splice(position, 0, content);\n\n      this._mergers.splice(position, 0, content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);\n    }\n\n    this._items[current] && this.reset(this._items[current].index());\n    this.invalidate('items');\n    this.trigger('added', {\n      content: content,\n      position: position\n    });\n  };\n  /**\n   * Removes an item by its position.\n   * @todo Use `item` instead of `content` for the event arguments.\n   * @public\n   * @param {Number} position - The relative position of the item to remove.\n   */\n\n\n  Owl.prototype.remove = function (position) {\n    position = this.normalize(position, true);\n\n    if (position === undefined) {\n      return;\n    }\n\n    this.trigger('remove', {\n      content: this._items[position],\n      position: position\n    });\n\n    this._items[position].remove();\n\n    this._items.splice(position, 1);\n\n    this._mergers.splice(position, 1);\n\n    this.invalidate('items');\n    this.trigger('removed', {\n      content: null,\n      position: position\n    });\n  };\n  /**\n   * Preloads images with auto width.\n   * @todo Replace by a more generic approach\n   * @protected\n   */\n\n\n  Owl.prototype.preloadAutoWidthImages = function (images) {\n    images.each($.proxy(function (i, element) {\n      this.enter('pre-loading');\n      element = $(element);\n      $(new Image()).one('load', $.proxy(function (e) {\n        element.attr('src', e.target.src);\n        element.css('opacity', 1);\n        this.leave('pre-loading');\n        !this.is('pre-loading') && !this.is('initializing') && this.refresh();\n      }, this)).attr('src', element.attr('src') || element.attr('data-src') || element.attr('data-src-retina'));\n    }, this));\n  };\n  /**\n   * Destroys the carousel.\n   * @public\n   */\n\n\n  Owl.prototype.destroy = function () {\n    this.$element.off('.owl.core');\n    this.$stage.off('.owl.core');\n    $(document).off('.owl.core');\n\n    if (this.settings.responsive !== false) {\n      window.clearTimeout(this.resizeTimer);\n      this.off(window, 'resize', this._handlers.onThrottledResize);\n    }\n\n    for (var i in this._plugins) {\n      this._plugins[i].destroy();\n    }\n\n    this.$stage.children('.cloned').remove();\n    this.$stage.unwrap();\n    this.$stage.children().contents().unwrap();\n    this.$stage.children().unwrap();\n    this.$stage.remove();\n    this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr('class', this.$element.attr('class').replace(new RegExp(this.options.responsiveClass + '-\\\\S+\\\\s', 'g'), '')).removeData('owl.carousel');\n  };\n  /**\n   * Operators to calculate right-to-left and left-to-right.\n   * @protected\n   * @param {Number} [a] - The left side operand.\n   * @param {String} [o] - The operator.\n   * @param {Number} [b] - The right side operand.\n   */\n\n\n  Owl.prototype.op = function (a, o, b) {\n    var rtl = this.settings.rtl;\n\n    switch (o) {\n      case '<':\n        return rtl ? a > b : a < b;\n\n      case '>':\n        return rtl ? a < b : a > b;\n\n      case '>=':\n        return rtl ? a <= b : a >= b;\n\n      case '<=':\n        return rtl ? a >= b : a <= b;\n\n      default:\n        break;\n    }\n  };\n  /**\n   * Attaches to an internal event.\n   * @protected\n   * @param {HTMLElement} element - The event source.\n   * @param {String} event - The event name.\n   * @param {Function} listener - The event handler to attach.\n   * @param {Boolean} capture - Wether the event should be handled at the capturing phase or not.\n   */\n\n\n  Owl.prototype.on = function (element, event, listener, capture) {\n    if (element.addEventListener) {\n      element.addEventListener(event, listener, capture);\n    } else if (element.attachEvent) {\n      element.attachEvent('on' + event, listener);\n    }\n  };\n  /**\n   * Detaches from an internal event.\n   * @protected\n   * @param {HTMLElement} element - The event source.\n   * @param {String} event - The event name.\n   * @param {Function} listener - The attached event handler to detach.\n   * @param {Boolean} capture - Wether the attached event handler was registered as a capturing listener or not.\n   */\n\n\n  Owl.prototype.off = function (element, event, listener, capture) {\n    if (element.removeEventListener) {\n      element.removeEventListener(event, listener, capture);\n    } else if (element.detachEvent) {\n      element.detachEvent('on' + event, listener);\n    }\n  };\n  /**\n   * Triggers a public event.\n   * @todo Remove `status`, `relatedTarget` should be used instead.\n   * @protected\n   * @param {String} name - The event name.\n   * @param {*} [data=null] - The event data.\n   * @param {String} [namespace=carousel] - The event namespace.\n   * @param {String} [state] - The state which is associated with the event.\n   * @param {Boolean} [enter=false] - Indicates if the call enters the specified state or not.\n   * @returns {Event} - The event arguments.\n   */\n\n\n  Owl.prototype.trigger = function (name, data, namespace, state, enter) {\n    var status = {\n      item: {\n        count: this._items.length,\n        index: this.current()\n      }\n    },\n        handler = $.camelCase($.grep(['on', name, namespace], function (v) {\n      return v;\n    }).join('-').toLowerCase()),\n        event = $.Event([name, 'owl', namespace || 'carousel'].join('.').toLowerCase(), $.extend({\n      relatedTarget: this\n    }, status, data));\n\n    if (!this._supress[name]) {\n      $.each(this._plugins, function (name, plugin) {\n        if (plugin.onTrigger) {\n          plugin.onTrigger(event);\n        }\n      });\n      this.register({\n        type: Owl.Type.Event,\n        name: name\n      });\n      this.$element.trigger(event);\n\n      if (this.settings && typeof this.settings[handler] === 'function') {\n        this.settings[handler].call(this, event);\n      }\n    }\n\n    return event;\n  };\n  /**\n   * Enters a state.\n   * @param name - The state name.\n   */\n\n\n  Owl.prototype.enter = function (name) {\n    $.each([name].concat(this._states.tags[name] || []), $.proxy(function (i, name) {\n      if (this._states.current[name] === undefined) {\n        this._states.current[name] = 0;\n      }\n\n      this._states.current[name]++;\n    }, this));\n  };\n  /**\n   * Leaves a state.\n   * @param name - The state name.\n   */\n\n\n  Owl.prototype.leave = function (name) {\n    $.each([name].concat(this._states.tags[name] || []), $.proxy(function (i, name) {\n      this._states.current[name]--;\n    }, this));\n  };\n  /**\n   * Registers an event or state.\n   * @public\n   * @param {Object} object - The event or state to register.\n   */\n\n\n  Owl.prototype.register = function (object) {\n    if (object.type === Owl.Type.Event) {\n      if (!$.event.special[object.name]) {\n        $.event.special[object.name] = {};\n      }\n\n      if (!$.event.special[object.name].owl) {\n        var _default = $.event.special[object.name]._default;\n\n        $.event.special[object.name]._default = function (e) {\n          if (_default && _default.apply && (!e.namespace || e.namespace.indexOf('owl') === -1)) {\n            return _default.apply(this, arguments);\n          }\n\n          return e.namespace && e.namespace.indexOf('owl') > -1;\n        };\n\n        $.event.special[object.name].owl = true;\n      }\n    } else if (object.type === Owl.Type.State) {\n      if (!this._states.tags[object.name]) {\n        this._states.tags[object.name] = object.tags;\n      } else {\n        this._states.tags[object.name] = this._states.tags[object.name].concat(object.tags);\n      }\n\n      this._states.tags[object.name] = $.grep(this._states.tags[object.name], $.proxy(function (tag, i) {\n        return $.inArray(tag, this._states.tags[object.name]) === i;\n      }, this));\n    }\n  };\n  /**\n   * Suppresses events.\n   * @protected\n   * @param {Array.<String>} events - The events to suppress.\n   */\n\n\n  Owl.prototype.suppress = function (events) {\n    $.each(events, $.proxy(function (index, event) {\n      this._supress[event] = true;\n    }, this));\n  };\n  /**\n   * Releases suppressed events.\n   * @protected\n   * @param {Array.<String>} events - The events to release.\n   */\n\n\n  Owl.prototype.release = function (events) {\n    $.each(events, $.proxy(function (index, event) {\n      delete this._supress[event];\n    }, this));\n  };\n  /**\n   * Gets unified pointer coordinates from event.\n   * @todo #261\n   * @protected\n   * @param {Event} - The `mousedown` or `touchstart` event.\n   * @returns {Object} - Contains `x` and `y` coordinates of current pointer position.\n   */\n\n\n  Owl.prototype.pointer = function (event) {\n    var result = {\n      x: null,\n      y: null\n    };\n    event = event.originalEvent || event || window.event;\n    event = event.touches && event.touches.length ? event.touches[0] : event.changedTouches && event.changedTouches.length ? event.changedTouches[0] : event;\n\n    if (event.pageX) {\n      result.x = event.pageX;\n      result.y = event.pageY;\n    } else {\n      result.x = event.clientX;\n      result.y = event.clientY;\n    }\n\n    return result;\n  };\n  /**\n   * Determines if the input is a Number or something that can be coerced to a Number\n   * @protected\n   * @param {Number|String|Object|Array|Boolean|RegExp|Function|Symbol} - The input to be tested\n   * @returns {Boolean} - An indication if the input is a Number or can be coerced to a Number\n   */\n\n\n  Owl.prototype.isNumeric = function (number) {\n    return !isNaN(parseFloat(number));\n  };\n  /**\n   * Gets the difference of two vectors.\n   * @todo #261\n   * @protected\n   * @param {Object} - The first vector.\n   * @param {Object} - The second vector.\n   * @returns {Object} - The difference.\n   */\n\n\n  Owl.prototype.difference = function (first, second) {\n    return {\n      x: first.x - second.x,\n      y: first.y - second.y\n    };\n  };\n  /**\n   * The jQuery Plugin for the Owl Carousel\n   * @todo Navigation plugin `next` and `prev`\n   * @public\n   */\n\n\n  $.fn.owlCarousel = function (option) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    return this.each(function () {\n      var $this = $(this),\n          data = $this.data('owl.carousel');\n\n      if (!data) {\n        data = new Owl(this, _typeof(option) == 'object' && option);\n        $this.data('owl.carousel', data);\n        $.each(['next', 'prev', 'to', 'destroy', 'refresh', 'replace', 'add', 'remove'], function (i, event) {\n          data.register({\n            type: Owl.Type.Event,\n            name: event\n          });\n          data.$element.on(event + '.owl.carousel.core', $.proxy(function (e) {\n            if (e.namespace && e.relatedTarget !== this) {\n              this.suppress([event]);\n              data[event].apply(this, [].slice.call(arguments, 1));\n              this.release([event]);\n            }\n          }, data));\n        });\n      }\n\n      if (typeof option == 'string' && option.charAt(0) !== '_') {\n        data[option].apply(data, args);\n      }\n    });\n  };\n  /**\n   * The constructor for the jQuery Plugin\n   * @public\n   */\n\n\n  $.fn.owlCarousel.Constructor = Owl;\n})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n/**\n * AutoRefresh Plugin\n * @version 2.3.4\n * @author Artus Kolanowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  /**\n   * Creates the auto refresh plugin.\n   * @class The Auto Refresh Plugin\n   * @param {Owl} carousel - The Owl Carousel\n   */\n  var AutoRefresh = function AutoRefresh(carousel) {\n    /**\n     * Reference to the core.\n     * @protected\n     * @type {Owl}\n     */\n    this._core = carousel;\n    /**\n     * Refresh interval.\n     * @protected\n     * @type {number}\n     */\n\n    this._interval = null;\n    /**\n     * Whether the element is currently visible or not.\n     * @protected\n     * @type {Boolean}\n     */\n\n    this._visible = null;\n    /**\n     * All event handlers.\n     * @protected\n     * @type {Object}\n     */\n\n    this._handlers = {\n      'initialized.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.autoRefresh) {\n          this.watch();\n        }\n      }, this)\n    }; // set default options\n\n    this._core.options = $.extend({}, AutoRefresh.Defaults, this._core.options); // register event handlers\n\n    this._core.$element.on(this._handlers);\n  };\n  /**\n   * Default options.\n   * @public\n   */\n\n\n  AutoRefresh.Defaults = {\n    autoRefresh: true,\n    autoRefreshInterval: 500\n  };\n  /**\n   * Watches the element.\n   */\n\n  AutoRefresh.prototype.watch = function () {\n    if (this._interval) {\n      return;\n    }\n\n    this._visible = this._core.isVisible();\n    this._interval = window.setInterval($.proxy(this.refresh, this), this._core.settings.autoRefreshInterval);\n  };\n  /**\n   * Refreshes the element.\n   */\n\n\n  AutoRefresh.prototype.refresh = function () {\n    if (this._core.isVisible() === this._visible) {\n      return;\n    }\n\n    this._visible = !this._visible;\n\n    this._core.$element.toggleClass('owl-hidden', !this._visible);\n\n    this._visible && this._core.invalidate('width') && this._core.refresh();\n  };\n  /**\n   * Destroys the plugin.\n   */\n\n\n  AutoRefresh.prototype.destroy = function () {\n    var handler, property;\n    window.clearInterval(this._interval);\n\n    for (handler in this._handlers) {\n      this._core.$element.off(handler, this._handlers[handler]);\n    }\n\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n\n  $.fn.owlCarousel.Constructor.Plugins.AutoRefresh = AutoRefresh;\n})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n/**\n * Lazy Plugin\n * @version 2.3.4\n * @author Bartosz Wojciechowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  /**\n   * Creates the lazy plugin.\n   * @class The Lazy Plugin\n   * @param {Owl} carousel - The Owl Carousel\n   */\n  var Lazy = function Lazy(carousel) {\n    /**\n     * Reference to the core.\n     * @protected\n     * @type {Owl}\n     */\n    this._core = carousel;\n    /**\n     * Already loaded items.\n     * @protected\n     * @type {Array.<jQuery>}\n     */\n\n    this._loaded = [];\n    /**\n     * Event handlers.\n     * @protected\n     * @type {Object}\n     */\n\n    this._handlers = {\n      'initialized.owl.carousel change.owl.carousel resized.owl.carousel': $.proxy(function (e) {\n        if (!e.namespace) {\n          return;\n        }\n\n        if (!this._core.settings || !this._core.settings.lazyLoad) {\n          return;\n        }\n\n        if (e.property && e.property.name == 'position' || e.type == 'initialized') {\n          var settings = this._core.settings,\n              n = settings.center && Math.ceil(settings.items / 2) || settings.items,\n              i = settings.center && n * -1 || 0,\n              position = (e.property && e.property.value !== undefined ? e.property.value : this._core.current()) + i,\n              clones = this._core.clones().length,\n              load = $.proxy(function (i, v) {\n            this.load(v);\n          }, this); //TODO: Need documentation for this new option\n\n\n          if (settings.lazyLoadEager > 0) {\n            n += settings.lazyLoadEager; // If the carousel is looping also preload images that are to the \"left\"\n\n            if (settings.loop) {\n              position -= settings.lazyLoadEager;\n              n++;\n            }\n          }\n\n          while (i++ < n) {\n            this.load(clones / 2 + this._core.relative(position));\n            clones && $.each(this._core.clones(this._core.relative(position)), load);\n            position++;\n          }\n        }\n      }, this)\n    }; // set the default options\n\n    this._core.options = $.extend({}, Lazy.Defaults, this._core.options); // register event handler\n\n    this._core.$element.on(this._handlers);\n  };\n  /**\n   * Default options.\n   * @public\n   */\n\n\n  Lazy.Defaults = {\n    lazyLoad: false,\n    lazyLoadEager: 0\n  };\n  /**\n   * Loads all resources of an item at the specified position.\n   * @param {Number} position - The absolute position of the item.\n   * @protected\n   */\n\n  Lazy.prototype.load = function (position) {\n    var $item = this._core.$stage.children().eq(position),\n        $elements = $item && $item.find('.owl-lazy');\n\n    if (!$elements || $.inArray($item.get(0), this._loaded) > -1) {\n      return;\n    }\n\n    $elements.each($.proxy(function (index, element) {\n      var $element = $(element),\n          image,\n          url = window.devicePixelRatio > 1 && $element.attr('data-src-retina') || $element.attr('data-src') || $element.attr('data-srcset');\n\n      this._core.trigger('load', {\n        element: $element,\n        url: url\n      }, 'lazy');\n\n      if ($element.is('img')) {\n        $element.one('load.owl.lazy', $.proxy(function () {\n          $element.css('opacity', 1);\n\n          this._core.trigger('loaded', {\n            element: $element,\n            url: url\n          }, 'lazy');\n        }, this)).attr('src', url);\n      } else if ($element.is('source')) {\n        $element.one('load.owl.lazy', $.proxy(function () {\n          this._core.trigger('loaded', {\n            element: $element,\n            url: url\n          }, 'lazy');\n        }, this)).attr('srcset', url);\n      } else {\n        image = new Image();\n        image.onload = $.proxy(function () {\n          $element.css({\n            'background-image': 'url(\"' + url + '\")',\n            'opacity': '1'\n          });\n\n          this._core.trigger('loaded', {\n            element: $element,\n            url: url\n          }, 'lazy');\n        }, this);\n        image.src = url;\n      }\n    }, this));\n\n    this._loaded.push($item.get(0));\n  };\n  /**\n   * Destroys the plugin.\n   * @public\n   */\n\n\n  Lazy.prototype.destroy = function () {\n    var handler, property;\n\n    for (handler in this.handlers) {\n      this._core.$element.off(handler, this.handlers[handler]);\n    }\n\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n\n  $.fn.owlCarousel.Constructor.Plugins.Lazy = Lazy;\n})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n/**\n * AutoHeight Plugin\n * @version 2.3.4\n * @author Bartosz Wojciechowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  /**\n   * Creates the auto height plugin.\n   * @class The Auto Height Plugin\n   * @param {Owl} carousel - The Owl Carousel\n   */\n  var AutoHeight = function AutoHeight(carousel) {\n    /**\n     * Reference to the core.\n     * @protected\n     * @type {Owl}\n     */\n    this._core = carousel;\n    this._previousHeight = null;\n    /**\n     * All event handlers.\n     * @protected\n     * @type {Object}\n     */\n\n    this._handlers = {\n      'initialized.owl.carousel refreshed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.autoHeight) {\n          this.update();\n        }\n      }, this),\n      'changed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.autoHeight && e.property.name === 'position') {\n          this.update();\n        }\n      }, this),\n      'loaded.owl.lazy': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.autoHeight && e.element.closest('.' + this._core.settings.itemClass).index() === this._core.current()) {\n          this.update();\n        }\n      }, this)\n    }; // set default options\n\n    this._core.options = $.extend({}, AutoHeight.Defaults, this._core.options); // register event handlers\n\n    this._core.$element.on(this._handlers);\n\n    this._intervalId = null;\n    var refThis = this; // These changes have been taken from a PR by gavrochelegnou proposed in #1575\n    // and have been made compatible with the latest jQuery version\n\n    $(window).on('load', function () {\n      if (refThis._core.settings.autoHeight) {\n        refThis.update();\n      }\n    }); // Autoresize the height of the carousel when window is resized\n    // When carousel has images, the height is dependent on the width\n    // and should also change on resize\n\n    $(window).resize(function () {\n      if (refThis._core.settings.autoHeight) {\n        if (refThis._intervalId != null) {\n          clearTimeout(refThis._intervalId);\n        }\n\n        refThis._intervalId = setTimeout(function () {\n          refThis.update();\n        }, 250);\n      }\n    });\n  };\n  /**\n   * Default options.\n   * @public\n   */\n\n\n  AutoHeight.Defaults = {\n    autoHeight: false,\n    autoHeightClass: 'owl-height'\n  };\n  /**\n   * Updates the view.\n   */\n\n  AutoHeight.prototype.update = function () {\n    var start = this._core._current,\n        end = start + this._core.settings.items,\n        lazyLoadEnabled = this._core.settings.lazyLoad,\n        visible = this._core.$stage.children().toArray().slice(start, end),\n        heights = [],\n        maxheight = 0;\n\n    $.each(visible, function (index, item) {\n      heights.push($(item).height());\n    });\n    maxheight = Math.max.apply(null, heights);\n\n    if (maxheight <= 1 && lazyLoadEnabled && this._previousHeight) {\n      maxheight = this._previousHeight;\n    }\n\n    this._previousHeight = maxheight;\n\n    this._core.$stage.parent().height(maxheight).addClass(this._core.settings.autoHeightClass);\n  };\n\n  AutoHeight.prototype.destroy = function () {\n    var handler, property;\n\n    for (handler in this._handlers) {\n      this._core.$element.off(handler, this._handlers[handler]);\n    }\n\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] !== 'function' && (this[property] = null);\n    }\n  };\n\n  $.fn.owlCarousel.Constructor.Plugins.AutoHeight = AutoHeight;\n})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n/**\n * Video Plugin\n * @version 2.3.4\n * @author Bartosz Wojciechowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  /**\n   * Creates the video plugin.\n   * @class The Video Plugin\n   * @param {Owl} carousel - The Owl Carousel\n   */\n  var Video = function Video(carousel) {\n    /**\n     * Reference to the core.\n     * @protected\n     * @type {Owl}\n     */\n    this._core = carousel;\n    /**\n     * Cache all video URLs.\n     * @protected\n     * @type {Object}\n     */\n\n    this._videos = {};\n    /**\n     * Current playing item.\n     * @protected\n     * @type {jQuery}\n     */\n\n    this._playing = null;\n    /**\n     * All event handlers.\n     * @todo The cloned content removale is too late\n     * @protected\n     * @type {Object}\n     */\n\n    this._handlers = {\n      'initialized.owl.carousel': $.proxy(function (e) {\n        if (e.namespace) {\n          this._core.register({\n            type: 'state',\n            name: 'playing',\n            tags: ['interacting']\n          });\n        }\n      }, this),\n      'resize.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.video && this.isInFullScreen()) {\n          e.preventDefault();\n        }\n      }, this),\n      'refreshed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.is('resizing')) {\n          this._core.$stage.find('.cloned .owl-video-frame').remove();\n        }\n      }, this),\n      'changed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && e.property.name === 'position' && this._playing) {\n          this.stop();\n        }\n      }, this),\n      'prepared.owl.carousel': $.proxy(function (e) {\n        if (!e.namespace) {\n          return;\n        }\n\n        var $element = $(e.content).find('.owl-video');\n\n        if ($element.length) {\n          $element.css('display', 'none');\n          this.fetch($element, $(e.content));\n        }\n      }, this)\n    }; // set default options\n\n    this._core.options = $.extend({}, Video.Defaults, this._core.options); // register event handlers\n\n    this._core.$element.on(this._handlers);\n\n    this._core.$element.on('click.owl.video', '.owl-video-play-icon', $.proxy(function (e) {\n      this.play(e);\n    }, this));\n  };\n  /**\n   * Default options.\n   * @public\n   */\n\n\n  Video.Defaults = {\n    video: false,\n    videoHeight: false,\n    videoWidth: false\n  };\n  /**\n   * Gets the video ID and the type (YouTube/Vimeo/vzaar only).\n   * @protected\n   * @param {jQuery} target - The target containing the video data.\n   * @param {jQuery} item - The item containing the video.\n   */\n\n  Video.prototype.fetch = function (target, item) {\n    var type = function () {\n      if (target.attr('data-vimeo-id')) {\n        return 'vimeo';\n      } else if (target.attr('data-vzaar-id')) {\n        return 'vzaar';\n      } else {\n        return 'youtube';\n      }\n    }(),\n        id = target.attr('data-vimeo-id') || target.attr('data-youtube-id') || target.attr('data-vzaar-id'),\n        width = target.attr('data-width') || this._core.settings.videoWidth,\n        height = target.attr('data-height') || this._core.settings.videoHeight,\n        url = target.attr('href');\n\n    if (url) {\n      /*\n      \t\tParses the id's out of the following urls (and probably more):\n      \t\thttps://www.youtube.com/watch?v=:id\n      \t\thttps://youtu.be/:id\n      \t\thttps://vimeo.com/:id\n      \t\thttps://vimeo.com/channels/:channel/:id\n      \t\thttps://vimeo.com/groups/:group/videos/:id\n      \t\thttps://app.vzaar.com/videos/:id\n      \t\t\tVisual example: https://regexper.com/#(http%3A%7Chttps%3A%7C)%5C%2F%5C%2F(player.%7Cwww.%7Capp.)%3F(vimeo%5C.com%7Cyoutu(be%5C.com%7C%5C.be%7Cbe%5C.googleapis%5C.com)%7Cvzaar%5C.com)%5C%2F(video%5C%2F%7Cvideos%5C%2F%7Cembed%5C%2F%7Cchannels%5C%2F.%2B%5C%2F%7Cgroups%5C%2F.%2B%5C%2F%7Cwatch%5C%3Fv%3D%7Cv%5C%2F)%3F(%5BA-Za-z0-9._%25-%5D*)(%5C%26%5CS%2B)%3F\n      */\n      id = url.match(/(http:|https:|)\\/\\/(player.|www.|app.)?(vimeo\\.com|youtu(be\\.com|\\.be|be\\.googleapis\\.com|be\\-nocookie\\.com)|vzaar\\.com)\\/(video\\/|videos\\/|embed\\/|channels\\/.+\\/|groups\\/.+\\/|watch\\?v=|v\\/)?([A-Za-z0-9._%-]*)(\\&\\S+)?/);\n\n      if (id[3].indexOf('youtu') > -1) {\n        type = 'youtube';\n      } else if (id[3].indexOf('vimeo') > -1) {\n        type = 'vimeo';\n      } else if (id[3].indexOf('vzaar') > -1) {\n        type = 'vzaar';\n      } else {\n        throw new Error('Video URL not supported.');\n      }\n\n      id = id[6];\n    } else {\n      throw new Error('Missing video URL.');\n    }\n\n    this._videos[url] = {\n      type: type,\n      id: id,\n      width: width,\n      height: height\n    };\n    item.attr('data-video', url);\n    this.thumbnail(target, this._videos[url]);\n  };\n  /**\n   * Creates video thumbnail.\n   * @protected\n   * @param {jQuery} target - The target containing the video data.\n   * @param {Object} info - The video info object.\n   * @see `fetch`\n   */\n\n\n  Video.prototype.thumbnail = function (target, video) {\n    var tnLink,\n        icon,\n        path,\n        dimensions = video.width && video.height ? 'width:' + video.width + 'px;height:' + video.height + 'px;' : '',\n        customTn = target.find('img'),\n        srcType = 'src',\n        lazyClass = '',\n        settings = this._core.settings,\n        create = function create(path) {\n      icon = '<div class=\"owl-video-play-icon\"></div>';\n\n      if (settings.lazyLoad) {\n        tnLink = $('<div/>', {\n          \"class\": 'owl-video-tn ' + lazyClass,\n          \"srcType\": path\n        });\n      } else {\n        tnLink = $('<div/>', {\n          \"class\": \"owl-video-tn\",\n          \"style\": 'opacity:1;background-image:url(' + path + ')'\n        });\n      }\n\n      target.after(tnLink);\n      target.after(icon);\n    }; // wrap video content into owl-video-wrapper div\n\n\n    target.wrap($('<div/>', {\n      \"class\": \"owl-video-wrapper\",\n      \"style\": dimensions\n    }));\n\n    if (this._core.settings.lazyLoad) {\n      srcType = 'data-src';\n      lazyClass = 'owl-lazy';\n    } // custom thumbnail\n\n\n    if (customTn.length) {\n      create(customTn.attr(srcType));\n      customTn.remove();\n      return false;\n    }\n\n    if (video.type === 'youtube') {\n      path = \"//img.youtube.com/vi/\" + video.id + \"/hqdefault.jpg\";\n      create(path);\n    } else if (video.type === 'vimeo') {\n      $.ajax({\n        type: 'GET',\n        url: '//vimeo.com/api/v2/video/' + video.id + '.json',\n        jsonp: 'callback',\n        dataType: 'jsonp',\n        success: function success(data) {\n          path = data[0].thumbnail_large;\n          create(path);\n        }\n      });\n    } else if (video.type === 'vzaar') {\n      $.ajax({\n        type: 'GET',\n        url: '//vzaar.com/api/videos/' + video.id + '.json',\n        jsonp: 'callback',\n        dataType: 'jsonp',\n        success: function success(data) {\n          path = data.framegrab_url;\n          create(path);\n        }\n      });\n    }\n  };\n  /**\n   * Stops the current video.\n   * @public\n   */\n\n\n  Video.prototype.stop = function () {\n    this._core.trigger('stop', null, 'video');\n\n    this._playing.find('.owl-video-frame').remove();\n\n    this._playing.removeClass('owl-video-playing');\n\n    this._playing = null;\n\n    this._core.leave('playing');\n\n    this._core.trigger('stopped', null, 'video');\n  };\n  /**\n   * Starts the current video.\n   * @public\n   * @param {Event} event - The event arguments.\n   */\n\n\n  Video.prototype.play = function (event) {\n    var target = $(event.target),\n        item = target.closest('.' + this._core.settings.itemClass),\n        video = this._videos[item.attr('data-video')],\n        width = video.width || '100%',\n        height = video.height || this._core.$stage.height(),\n        html,\n        iframe;\n\n    if (this._playing) {\n      return;\n    }\n\n    this._core.enter('playing');\n\n    this._core.trigger('play', null, 'video');\n\n    item = this._core.items(this._core.relative(item.index()));\n\n    this._core.reset(item.index());\n\n    html = $('<iframe frameborder=\"0\" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>');\n    html.attr('height', height);\n    html.attr('width', width);\n\n    if (video.type === 'youtube') {\n      html.attr('src', '//www.youtube.com/embed/' + video.id + '?autoplay=1&rel=0&v=' + video.id);\n    } else if (video.type === 'vimeo') {\n      html.attr('src', '//player.vimeo.com/video/' + video.id + '?autoplay=1');\n    } else if (video.type === 'vzaar') {\n      html.attr('src', '//view.vzaar.com/' + video.id + '/player?autoplay=true');\n    }\n\n    iframe = $(html).wrap('<div class=\"owl-video-frame\" />').insertAfter(item.find('.owl-video'));\n    this._playing = item.addClass('owl-video-playing');\n  };\n  /**\n   * Checks whether an video is currently in full screen mode or not.\n   * @todo Bad style because looks like a readonly method but changes members.\n   * @protected\n   * @returns {Boolean}\n   */\n\n\n  Video.prototype.isInFullScreen = function () {\n    var element = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;\n    return element && $(element).parent().hasClass('owl-video-frame');\n  };\n  /**\n   * Destroys the plugin.\n   */\n\n\n  Video.prototype.destroy = function () {\n    var handler, property;\n\n    this._core.$element.off('click.owl.video');\n\n    for (handler in this._handlers) {\n      this._core.$element.off(handler, this._handlers[handler]);\n    }\n\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n\n  $.fn.owlCarousel.Constructor.Plugins.Video = Video;\n})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n/**\n * Animate Plugin\n * @version 2.3.4\n * @author Bartosz Wojciechowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  /**\n   * Creates the animate plugin.\n   * @class The Navigation Plugin\n   * @param {Owl} scope - The Owl Carousel\n   */\n  var Animate = function Animate(scope) {\n    this.core = scope;\n    this.core.options = $.extend({}, Animate.Defaults, this.core.options);\n    this.swapping = true;\n    this.previous = undefined;\n    this.next = undefined;\n    this.handlers = {\n      'change.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && e.property.name == 'position') {\n          this.previous = this.core.current();\n          this.next = e.property.value;\n        }\n      }, this),\n      'drag.owl.carousel dragged.owl.carousel translated.owl.carousel': $.proxy(function (e) {\n        if (e.namespace) {\n          this.swapping = e.type == 'translated';\n        }\n      }, this),\n      'translate.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn)) {\n          this.swap();\n        }\n      }, this)\n    };\n    this.core.$element.on(this.handlers);\n  };\n  /**\n   * Default options.\n   * @public\n   */\n\n\n  Animate.Defaults = {\n    animateOut: false,\n    animateIn: false\n  };\n  /**\n   * Toggles the animation classes whenever an translations starts.\n   * @protected\n   * @returns {Boolean|undefined}\n   */\n\n  Animate.prototype.swap = function () {\n    if (this.core.settings.items !== 1) {\n      return;\n    }\n\n    if (!$.support.animation || !$.support.transition) {\n      return;\n    }\n\n    this.core.speed(0);\n    var left,\n        clear = $.proxy(this.clear, this),\n        previous = this.core.$stage.children().eq(this.previous),\n        next = this.core.$stage.children().eq(this.next),\n        incoming = this.core.settings.animateIn,\n        outgoing = this.core.settings.animateOut;\n\n    if (this.core.current() === this.previous) {\n      return;\n    }\n\n    if (outgoing) {\n      left = this.core.coordinates(this.previous) - this.core.coordinates(this.next);\n      previous.one($.support.animation.end, clear).css({\n        'left': left + 'px'\n      }).addClass('animated owl-animated-out').addClass(outgoing);\n    }\n\n    if (incoming) {\n      next.one($.support.animation.end, clear).addClass('animated owl-animated-in').addClass(incoming);\n    }\n  };\n\n  Animate.prototype.clear = function (e) {\n    $(e.target).css({\n      'left': ''\n    }).removeClass('animated owl-animated-out owl-animated-in').removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut);\n    this.core.onTransitionEnd();\n  };\n  /**\n   * Destroys the plugin.\n   * @public\n   */\n\n\n  Animate.prototype.destroy = function () {\n    var handler, property;\n\n    for (handler in this.handlers) {\n      this.core.$element.off(handler, this.handlers[handler]);\n    }\n\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n\n  $.fn.owlCarousel.Constructor.Plugins.Animate = Animate;\n})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n/**\n * Autoplay Plugin\n * @version 2.3.4\n * @author Bartosz Wojciechowski\n * @author Artus Kolanowski\n * @author David Deutsch\n * @author Tom De Caluwé\n * @license The MIT License (MIT)\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  /**\n   * Creates the autoplay plugin.\n   * @class The Autoplay Plugin\n   * @param {Owl} scope - The Owl Carousel\n   */\n  var Autoplay = function Autoplay(carousel) {\n    /**\n     * Reference to the core.\n     * @protected\n     * @type {Owl}\n     */\n    this._core = carousel;\n    /**\n     * The autoplay timeout id.\n     * @type {Number}\n     */\n\n    this._call = null;\n    /**\n     * Depending on the state of the plugin, this variable contains either\n     * the start time of the timer or the current timer value if it's\n     * paused. Since we start in a paused state we initialize the timer\n     * value.\n     * @type {Number}\n     */\n\n    this._time = 0;\n    /**\n     * Stores the timeout currently used.\n     * @type {Number}\n     */\n\n    this._timeout = 0;\n    /**\n     * Indicates whenever the autoplay is paused.\n     * @type {Boolean}\n     */\n\n    this._paused = true;\n    /**\n     * All event handlers.\n     * @protected\n     * @type {Object}\n     */\n\n    this._handlers = {\n      'changed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && e.property.name === 'settings') {\n          if (this._core.settings.autoplay) {\n            this.play();\n          } else {\n            this.stop();\n          }\n        } else if (e.namespace && e.property.name === 'position' && this._paused) {\n          // Reset the timer. This code is triggered when the position\n          // of the carousel was changed through user interaction.\n          this._time = 0;\n        }\n      }, this),\n      'initialized.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.autoplay) {\n          this.play();\n        }\n      }, this),\n      'play.owl.autoplay': $.proxy(function (e, t, s) {\n        if (e.namespace) {\n          this.play(t, s);\n        }\n      }, this),\n      'stop.owl.autoplay': $.proxy(function (e) {\n        if (e.namespace) {\n          this.stop();\n        }\n      }, this),\n      'mouseover.owl.autoplay': $.proxy(function () {\n        if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {\n          this.pause();\n        }\n      }, this),\n      'mouseleave.owl.autoplay': $.proxy(function () {\n        if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {\n          this.play();\n        }\n      }, this),\n      'touchstart.owl.core': $.proxy(function () {\n        if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {\n          this.pause();\n        }\n      }, this),\n      'touchend.owl.core': $.proxy(function () {\n        if (this._core.settings.autoplayHoverPause) {\n          this.play();\n        }\n      }, this)\n    }; // register event handlers\n\n    this._core.$element.on(this._handlers); // set default options\n\n\n    this._core.options = $.extend({}, Autoplay.Defaults, this._core.options);\n  };\n  /**\n   * Default options.\n   * @public\n   */\n\n\n  Autoplay.Defaults = {\n    autoplay: false,\n    autoplayTimeout: 5000,\n    autoplayHoverPause: false,\n    autoplaySpeed: false\n  };\n  /**\n   * Transition to the next slide and set a timeout for the next transition.\n   * @private\n   * @param {Number} [speed] - The animation speed for the animations.\n   */\n\n  Autoplay.prototype._next = function (speed) {\n    this._call = window.setTimeout($.proxy(this._next, this, speed), this._timeout * (Math.round(this.read() / this._timeout) + 1) - this.read());\n\n    if (this._core.is('interacting') || document.hidden) {\n      return;\n    }\n\n    this._core.next(speed || this._core.settings.autoplaySpeed);\n  };\n  /**\n   * Reads the current timer value when the timer is playing.\n   * @public\n   */\n\n\n  Autoplay.prototype.read = function () {\n    return new Date().getTime() - this._time;\n  };\n  /**\n   * Starts the autoplay.\n   * @public\n   * @param {Number} [timeout] - The interval before the next animation starts.\n   * @param {Number} [speed] - The animation speed for the animations.\n   */\n\n\n  Autoplay.prototype.play = function (timeout, speed) {\n    var elapsed;\n\n    if (!this._core.is('rotating')) {\n      this._core.enter('rotating');\n    }\n\n    timeout = timeout || this._core.settings.autoplayTimeout; // Calculate the elapsed time since the last transition. If the carousel\n    // wasn't playing this calculation will yield zero.\n\n    elapsed = Math.min(this._time % (this._timeout || timeout), timeout);\n\n    if (this._paused) {\n      // Start the clock.\n      this._time = this.read();\n      this._paused = false;\n    } else {\n      // Clear the active timeout to allow replacement.\n      window.clearTimeout(this._call);\n    } // Adjust the origin of the timer to match the new timeout value.\n\n\n    this._time += this.read() % timeout - elapsed;\n    this._timeout = timeout;\n    this._call = window.setTimeout($.proxy(this._next, this, speed), timeout - elapsed);\n  };\n  /**\n   * Stops the autoplay.\n   * @public\n   */\n\n\n  Autoplay.prototype.stop = function () {\n    if (this._core.is('rotating')) {\n      // Reset the clock.\n      this._time = 0;\n      this._paused = true;\n      window.clearTimeout(this._call);\n\n      this._core.leave('rotating');\n    }\n  };\n  /**\n   * Pauses the autoplay.\n   * @public\n   */\n\n\n  Autoplay.prototype.pause = function () {\n    if (this._core.is('rotating') && !this._paused) {\n      // Pause the clock.\n      this._time = this.read();\n      this._paused = true;\n      window.clearTimeout(this._call);\n    }\n  };\n  /**\n   * Destroys the plugin.\n   */\n\n\n  Autoplay.prototype.destroy = function () {\n    var handler, property;\n    this.stop();\n\n    for (handler in this._handlers) {\n      this._core.$element.off(handler, this._handlers[handler]);\n    }\n\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n\n  $.fn.owlCarousel.Constructor.Plugins.autoplay = Autoplay;\n})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n/**\n * Navigation Plugin\n * @version 2.3.4\n * @author Artus Kolanowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n  /**\n   * Creates the navigation plugin.\n   * @class The Navigation Plugin\n   * @param {Owl} carousel - The Owl Carousel.\n   */\n\n  var Navigation = function Navigation(carousel) {\n    /**\n     * Reference to the core.\n     * @protected\n     * @type {Owl}\n     */\n    this._core = carousel;\n    /**\n     * Indicates whether the plugin is initialized or not.\n     * @protected\n     * @type {Boolean}\n     */\n\n    this._initialized = false;\n    /**\n     * The current paging indexes.\n     * @protected\n     * @type {Array}\n     */\n\n    this._pages = [];\n    /**\n     * All DOM elements of the user interface.\n     * @protected\n     * @type {Object}\n     */\n\n    this._controls = {};\n    /**\n     * Markup for an indicator.\n     * @protected\n     * @type {Array.<String>}\n     */\n\n    this._templates = [];\n    /**\n     * The carousel element.\n     * @type {jQuery}\n     */\n\n    this.$element = this._core.$element;\n    /**\n     * Overridden methods of the carousel.\n     * @protected\n     * @type {Object}\n     */\n\n    this._overrides = {\n      next: this._core.next,\n      prev: this._core.prev,\n      to: this._core.to\n    };\n    /**\n     * All event handlers.\n     * @protected\n     * @type {Object}\n     */\n\n    this._handlers = {\n      'prepared.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.dotsData) {\n          this._templates.push('<div class=\"' + this._core.settings.dotClass + '\">' + $(e.content).find('[data-dot]').addBack('[data-dot]').attr('data-dot') + '</div>');\n        }\n      }, this),\n      'added.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.dotsData) {\n          this._templates.splice(e.position, 0, this._templates.pop());\n        }\n      }, this),\n      'remove.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.dotsData) {\n          this._templates.splice(e.position, 1);\n        }\n      }, this),\n      'changed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && e.property.name == 'position') {\n          this.draw();\n        }\n      }, this),\n      'initialized.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && !this._initialized) {\n          this._core.trigger('initialize', null, 'navigation');\n\n          this.initialize();\n          this.update();\n          this.draw();\n          this._initialized = true;\n\n          this._core.trigger('initialized', null, 'navigation');\n        }\n      }, this),\n      'refreshed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._initialized) {\n          this._core.trigger('refresh', null, 'navigation');\n\n          this.update();\n          this.draw();\n\n          this._core.trigger('refreshed', null, 'navigation');\n        }\n      }, this)\n    }; // set default options\n\n    this._core.options = $.extend({}, Navigation.Defaults, this._core.options); // register event handlers\n\n    this.$element.on(this._handlers);\n  };\n  /**\n   * Default options.\n   * @public\n   * @todo Rename `slideBy` to `navBy`\n   */\n\n\n  Navigation.Defaults = {\n    nav: false,\n    navText: ['<span aria-label=\"' + 'Previous' + '\">&#x2039;</span>', '<span aria-label=\"' + 'Next' + '\">&#x203a;</span>'],\n    navSpeed: false,\n    navElement: 'button type=\"button\" role=\"presentation\"',\n    navContainer: false,\n    navContainerClass: 'owl-nav',\n    navClass: ['owl-prev', 'owl-next'],\n    slideBy: 1,\n    dotClass: 'owl-dot',\n    dotsClass: 'owl-dots',\n    dots: true,\n    dotsEach: false,\n    dotsData: false,\n    dotsSpeed: false,\n    dotsContainer: false\n  };\n  /**\n   * Initializes the layout of the plugin and extends the carousel.\n   * @protected\n   */\n\n  Navigation.prototype.initialize = function () {\n    var override,\n        settings = this._core.settings; // create DOM structure for relative navigation\n\n    this._controls.$relative = (settings.navContainer ? $(settings.navContainer) : $('<div>').addClass(settings.navContainerClass).appendTo(this.$element)).addClass('disabled');\n    this._controls.$previous = $('<' + settings.navElement + '>').addClass(settings.navClass[0]).html(settings.navText[0]).prependTo(this._controls.$relative).on('click', $.proxy(function (e) {\n      this.prev(settings.navSpeed);\n    }, this));\n    this._controls.$next = $('<' + settings.navElement + '>').addClass(settings.navClass[1]).html(settings.navText[1]).appendTo(this._controls.$relative).on('click', $.proxy(function (e) {\n      this.next(settings.navSpeed);\n    }, this)); // create DOM structure for absolute navigation\n\n    if (!settings.dotsData) {\n      this._templates = [$('<button role=\"button\">').addClass(settings.dotClass).append($('<span>')).prop('outerHTML')];\n    }\n\n    this._controls.$absolute = (settings.dotsContainer ? $(settings.dotsContainer) : $('<div>').addClass(settings.dotsClass).appendTo(this.$element)).addClass('disabled');\n\n    this._controls.$absolute.on('click', 'button', $.proxy(function (e) {\n      var index = $(e.target).parent().is(this._controls.$absolute) ? $(e.target).index() : $(e.target).parent().index();\n      e.preventDefault();\n      this.to(index, settings.dotsSpeed);\n    }, this));\n    /*$el.on('focusin', function() {\n    \t$(document).off(\".carousel\");\n    \t\t$(document).on('keydown.carousel', function(e) {\n    \t\tif(e.keyCode == 37) {\n    \t\t\t$el.trigger('prev.owl')\n    \t\t}\n    \t\tif(e.keyCode == 39) {\n    \t\t\t$el.trigger('next.owl')\n    \t\t}\n    \t});\n    });*/\n    // override public methods of the carousel\n\n\n    for (override in this._overrides) {\n      this._core[override] = $.proxy(this[override], this);\n    }\n  };\n  /**\n   * Destroys the plugin.\n   * @protected\n   */\n\n\n  Navigation.prototype.destroy = function () {\n    var handler, control, property, override, settings;\n    settings = this._core.settings;\n\n    for (handler in this._handlers) {\n      this.$element.off(handler, this._handlers[handler]);\n    }\n\n    for (control in this._controls) {\n      if (control === '$relative' && settings.navContainer) {\n        this._controls[control].html('');\n      } else {\n        this._controls[control].remove();\n      }\n    }\n\n    for (override in this.overides) {\n      this._core[override] = this._overrides[override];\n    }\n\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n  /**\n   * Updates the internal state.\n   * @protected\n   */\n\n\n  Navigation.prototype.update = function () {\n    var i,\n        j,\n        k,\n        lower = this._core.clones().length / 2,\n        upper = lower + this._core.items().length,\n        maximum = this._core.maximum(true),\n        settings = this._core.settings,\n        size = settings.center || settings.autoWidth || settings.dotsData ? 1 : settings.dotsEach || settings.items;\n\n    if (settings.slideBy !== 'page') {\n      settings.slideBy = Math.min(settings.slideBy, settings.items);\n    }\n\n    if (settings.dots || settings.slideBy == 'page') {\n      this._pages = [];\n\n      for (i = lower, j = 0, k = 0; i < upper; i++) {\n        if (j >= size || j === 0) {\n          this._pages.push({\n            start: Math.min(maximum, i - lower),\n            end: i - lower + size - 1\n          });\n\n          if (Math.min(maximum, i - lower) === maximum) {\n            break;\n          }\n\n          j = 0, ++k;\n        }\n\n        j += this._core.mergers(this._core.relative(i));\n      }\n    }\n  };\n  /**\n   * Draws the user interface.\n   * @todo The option `dotsData` wont work.\n   * @protected\n   */\n\n\n  Navigation.prototype.draw = function () {\n    var difference,\n        settings = this._core.settings,\n        disabled = this._core.items().length <= settings.items,\n        index = this._core.relative(this._core.current()),\n        loop = settings.loop || settings.rewind;\n\n    this._controls.$relative.toggleClass('disabled', !settings.nav || disabled);\n\n    if (settings.nav) {\n      this._controls.$previous.toggleClass('disabled', !loop && index <= this._core.minimum(true));\n\n      this._controls.$next.toggleClass('disabled', !loop && index >= this._core.maximum(true));\n    }\n\n    this._controls.$absolute.toggleClass('disabled', !settings.dots || disabled);\n\n    if (settings.dots) {\n      difference = this._pages.length - this._controls.$absolute.children().length;\n\n      if (settings.dotsData && difference !== 0) {\n        this._controls.$absolute.html(this._templates.join(''));\n      } else if (difference > 0) {\n        this._controls.$absolute.append(new Array(difference + 1).join(this._templates[0]));\n      } else if (difference < 0) {\n        this._controls.$absolute.children().slice(difference).remove();\n      }\n\n      this._controls.$absolute.find('.active').removeClass('active');\n\n      this._controls.$absolute.children().eq($.inArray(this.current(), this._pages)).addClass('active');\n    }\n  };\n  /**\n   * Extends event data.\n   * @protected\n   * @param {Event} event - The event object which gets thrown.\n   */\n\n\n  Navigation.prototype.onTrigger = function (event) {\n    var settings = this._core.settings;\n    event.page = {\n      index: $.inArray(this.current(), this._pages),\n      count: this._pages.length,\n      size: settings && (settings.center || settings.autoWidth || settings.dotsData ? 1 : settings.dotsEach || settings.items)\n    };\n  };\n  /**\n   * Gets the current page position of the carousel.\n   * @protected\n   * @returns {Number}\n   */\n\n\n  Navigation.prototype.current = function () {\n    var current = this._core.relative(this._core.current());\n\n    return $.grep(this._pages, $.proxy(function (page, index) {\n      return page.start <= current && page.end >= current;\n    }, this)).pop();\n  };\n  /**\n   * Gets the current succesor/predecessor position.\n   * @protected\n   * @returns {Number}\n   */\n\n\n  Navigation.prototype.getPosition = function (successor) {\n    var position,\n        length,\n        settings = this._core.settings;\n\n    if (settings.slideBy == 'page') {\n      position = $.inArray(this.current(), this._pages);\n      length = this._pages.length;\n      successor ? ++position : --position;\n      position = this._pages[(position % length + length) % length].start;\n    } else {\n      position = this._core.relative(this._core.current());\n      length = this._core.items().length;\n      successor ? position += settings.slideBy : position -= settings.slideBy;\n    }\n\n    return position;\n  };\n  /**\n   * Slides to the next item or page.\n   * @public\n   * @param {Number} [speed=false] - The time in milliseconds for the transition.\n   */\n\n\n  Navigation.prototype.next = function (speed) {\n    $.proxy(this._overrides.to, this._core)(this.getPosition(true), speed);\n  };\n  /**\n   * Slides to the previous item or page.\n   * @public\n   * @param {Number} [speed=false] - The time in milliseconds for the transition.\n   */\n\n\n  Navigation.prototype.prev = function (speed) {\n    $.proxy(this._overrides.to, this._core)(this.getPosition(false), speed);\n  };\n  /**\n   * Slides to the specified item or page.\n   * @public\n   * @param {Number} position - The position of the item or page.\n   * @param {Number} [speed] - The time in milliseconds for the transition.\n   * @param {Boolean} [standard=false] - Whether to use the standard behaviour or not.\n   */\n\n\n  Navigation.prototype.to = function (position, speed, standard) {\n    var length;\n\n    if (!standard && this._pages.length) {\n      length = this._pages.length;\n      $.proxy(this._overrides.to, this._core)(this._pages[(position % length + length) % length].start, speed);\n    } else {\n      $.proxy(this._overrides.to, this._core)(position, speed);\n    }\n  };\n\n  $.fn.owlCarousel.Constructor.Plugins.Navigation = Navigation;\n})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n/**\n * Hash Plugin\n * @version 2.3.4\n * @author Artus Kolanowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n  /**\n   * Creates the hash plugin.\n   * @class The Hash Plugin\n   * @param {Owl} carousel - The Owl Carousel\n   */\n\n  var Hash = function Hash(carousel) {\n    /**\n     * Reference to the core.\n     * @protected\n     * @type {Owl}\n     */\n    this._core = carousel;\n    /**\n     * Hash index for the items.\n     * @protected\n     * @type {Object}\n     */\n\n    this._hashes = {};\n    /**\n     * The carousel element.\n     * @type {jQuery}\n     */\n\n    this.$element = this._core.$element;\n    /**\n     * All event handlers.\n     * @protected\n     * @type {Object}\n     */\n\n    this._handlers = {\n      'initialized.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.startPosition === 'URLHash') {\n          $(window).trigger('hashchange.owl.navigation');\n        }\n      }, this),\n      'prepared.owl.carousel': $.proxy(function (e) {\n        if (e.namespace) {\n          var hash = $(e.content).find('[data-hash]').addBack('[data-hash]').attr('data-hash');\n\n          if (!hash) {\n            return;\n          }\n\n          this._hashes[hash] = e.content;\n        }\n      }, this),\n      'changed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && e.property.name === 'position') {\n          var current = this._core.items(this._core.relative(this._core.current())),\n              hash = $.map(this._hashes, function (item, hash) {\n            return item === current ? hash : null;\n          }).join();\n\n          if (!hash || window.location.hash.slice(1) === hash) {\n            return;\n          }\n\n          window.location.hash = hash;\n        }\n      }, this)\n    }; // set default options\n\n    this._core.options = $.extend({}, Hash.Defaults, this._core.options); // register the event handlers\n\n    this.$element.on(this._handlers); // register event listener for hash navigation\n\n    $(window).on('hashchange.owl.navigation', $.proxy(function (e) {\n      var hash = window.location.hash.substring(1),\n          items = this._core.$stage.children(),\n          position = this._hashes[hash] && items.index(this._hashes[hash]);\n\n      if (position === undefined || position === this._core.current()) {\n        return;\n      }\n\n      this._core.to(this._core.relative(position), false, true);\n    }, this));\n  };\n  /**\n   * Default options.\n   * @public\n   */\n\n\n  Hash.Defaults = {\n    URLhashListener: false\n  };\n  /**\n   * Destroys the plugin.\n   * @public\n   */\n\n  Hash.prototype.destroy = function () {\n    var handler, property;\n    $(window).off('hashchange.owl.navigation');\n\n    for (handler in this._handlers) {\n      this._core.$element.off(handler, this._handlers[handler]);\n    }\n\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n\n  $.fn.owlCarousel.Constructor.Plugins.Hash = Hash;\n})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n/**\n * Support Plugin\n *\n * @version 2.3.4\n * @author Vivid Planet Software GmbH\n * @author Artus Kolanowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  var style = $('<support>').get(0).style,\n      prefixes = 'Webkit Moz O ms'.split(' '),\n      events = {\n    transition: {\n      end: {\n        WebkitTransition: 'webkitTransitionEnd',\n        MozTransition: 'transitionend',\n        OTransition: 'oTransitionEnd',\n        transition: 'transitionend'\n      }\n    },\n    animation: {\n      end: {\n        WebkitAnimation: 'webkitAnimationEnd',\n        MozAnimation: 'animationend',\n        OAnimation: 'oAnimationEnd',\n        animation: 'animationend'\n      }\n    }\n  },\n      tests = {\n    csstransforms: function csstransforms() {\n      return !!test('transform');\n    },\n    csstransforms3d: function csstransforms3d() {\n      return !!test('perspective');\n    },\n    csstransitions: function csstransitions() {\n      return !!test('transition');\n    },\n    cssanimations: function cssanimations() {\n      return !!test('animation');\n    }\n  };\n\n  function test(property, prefixed) {\n    var result = false,\n        upper = property.charAt(0).toUpperCase() + property.slice(1);\n    $.each((property + ' ' + prefixes.join(upper + ' ') + upper).split(' '), function (i, property) {\n      if (style[property] !== undefined) {\n        result = prefixed ? property : true;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  function prefixed(property) {\n    return test(property, true);\n  }\n\n  if (tests.csstransitions()) {\n    /* jshint -W053 */\n    $.support.transition = new String(prefixed('transition'));\n    $.support.transition.end = events.transition.end[$.support.transition];\n  }\n\n  if (tests.cssanimations()) {\n    /* jshint -W053 */\n    $.support.animation = new String(prefixed('animation'));\n    $.support.animation.end = events.animation.end[$.support.animation];\n  }\n\n  if (tests.csstransforms()) {\n    /* jshint -W053 */\n    $.support.transform = new String(prefixed('transform'));\n    $.support.transform3d = tests.csstransforms3d();\n  }\n})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///425\n")},33:function(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/owl.carousel/dist/owl.carousel.js\nvar owl_carousel = __webpack_require__(425);\n;// CONCATENATED MODULE: ./node_modules/@fancyapps/ui/dist/fancybox.esm.js\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e33) { throw _e33; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e34) { didErr = true; err = _e34; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\n// @fancyapps/ui/Fancybox v4.0.9\nvar t = function t(_t) {\n  return "object" == _typeof(_t) && null !== _t && _t.constructor === Object && "[object Object]" === Object.prototype.toString.call(_t);\n},\n    e = function e() {\n  var s = !1;\n\n  for (var _len = arguments.length, i = new Array(_len), _key = 0; _key < _len; _key++) {\n    i[_key] = arguments[_key];\n  }\n\n  "boolean" == typeof i[0] && (s = i.shift());\n  var o = i[0];\n  if (!o || "object" != _typeof(o)) throw new Error("extendee must be an object");\n  var n = i.slice(1),\n      a = n.length;\n\n  for (var _i = 0; _i < a; _i++) {\n    var _a = n[_i];\n\n    for (var _i2 in _a) {\n      if (_a.hasOwnProperty(_i2)) {\n        var _n = _a[_i2];\n\n        if (s && (Array.isArray(_n) || t(_n))) {\n          var _t2 = Array.isArray(_n) ? [] : {};\n\n          o[_i2] = e(!0, o.hasOwnProperty(_i2) ? o[_i2] : _t2, _n);\n        } else o[_i2] = _n;\n      }\n    }\n  }\n\n  return o;\n},\n    i = function i(t) {\n  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e4;\n  return t = parseFloat(t) || 0, Math.round((t + Number.EPSILON) * e) / e;\n},\n    s = "undefined" != typeof window && window.ResizeObserver || /*#__PURE__*/function () {\n  function _class(t) {\n    _classCallCheck(this, _class);\n\n    this.observables = [], this.boundCheck = this.check.bind(this), this.boundCheck(), this.callback = t;\n  }\n\n  _createClass(_class, [{\n    key: "observe",\n    value: function observe(t) {\n      if (this.observables.some(function (e) {\n        return e.el === t;\n      })) return;\n      var e = {\n        el: t,\n        size: {\n          height: t.clientHeight,\n          width: t.clientWidth\n        }\n      };\n      this.observables.push(e);\n    }\n  }, {\n    key: "unobserve",\n    value: function unobserve(t) {\n      this.observables = this.observables.filter(function (e) {\n        return e.el !== t;\n      });\n    }\n  }, {\n    key: "disconnect",\n    value: function disconnect() {\n      this.observables = [];\n    }\n  }, {\n    key: "check",\n    value: function check() {\n      var t = this.observables.filter(function (t) {\n        var e = t.el.clientHeight,\n            i = t.el.clientWidth;\n        if (t.size.height !== e || t.size.width !== i) return t.size.height = e, t.size.width = i, !0;\n      }).map(function (t) {\n        return t.el;\n      });\n      t.length > 0 && this.callback(t), window.requestAnimationFrame(this.boundCheck);\n    }\n  }]);\n\n  return _class;\n}();\n\nvar o = function o(t) {\n  _classCallCheck(this, o);\n\n  this.id = -1, this.id = t.pointerId || t.identifier || -1, this.pageX = t.pageX, this.pageY = t.pageY, this.clientX = t.clientX, this.clientY = t.clientY, this.nativePointer = t;\n};\n\nfunction n(t, e) {\n  return e ? Math.sqrt(Math.pow(e.clientX - t.clientX, 2) + Math.pow(e.clientY - t.clientY, 2)) : 0;\n}\n\nfunction a(t, e) {\n  return e ? {\n    clientX: (t.clientX + e.clientX) / 2,\n    clientY: (t.clientY + e.clientY) / 2\n  } : t;\n}\n\nvar r = /*#__PURE__*/function () {\n  function r(t) {\n    var _this = this;\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$start = _ref.start,\n        e = _ref$start === void 0 ? function () {\n      return !0;\n    } : _ref$start,\n        _ref$move = _ref.move,\n        i = _ref$move === void 0 ? function () {} : _ref$move,\n        _ref$end = _ref.end,\n        s = _ref$end === void 0 ? function () {} : _ref$end;\n\n    _classCallCheck(this, r);\n\n    this.element = t, this.startPointers = [], this.currentPointers = [], this.startCallback = e, this.moveCallback = i, this.endCallback = s, this.onStart = function (t) {\n      if (t.button && 0 !== t.button) return;\n      var e = new o(t);\n      if (!1 === _this.startCallback(e, t)) return !1;\n      t.preventDefault(), function () {\n        var t = window.getSelection ? window.getSelection() : document.selection;\n        t && t.rangeCount && t.getRangeAt(0).getClientRects().length && (t.removeAllRanges ? t.removeAllRanges() : t.empty && t.empty());\n      }(), _this.currentPointers.push(e), _this.startPointers.push(e);\n      (t.target && "setPointerCapture" in t.target ? t.target : _this.element).setPointerCapture(t.pointerId), _this.element.addEventListener("pointermove", _this.onMove), _this.element.addEventListener("pointerup", _this.onEnd), _this.element.addEventListener("pointercancel", _this.onEnd);\n    }, this.onMove = function (t) {\n      var e = _this.currentPointers.slice(),\n          i = [];\n\n      var _loop = function _loop() {\n        var e = _arr[_i3];\n\n        var t = _this.currentPointers.findIndex(function (t) {\n          return t.id === e.id;\n        });\n\n        t < 0 || (i.push(e), _this.currentPointers[t] = e);\n      };\n\n      for (var _i3 = 0, _arr = [new o(t)]; _i3 < _arr.length; _i3++) {\n        _loop();\n      }\n\n      i.length && _this.moveCallback(e, _this.currentPointers, t);\n    }, this.onEnd = function (t) {\n      var e = new o(t),\n          i = _this.currentPointers.findIndex(function (t) {\n        return t.id === e.id;\n      });\n\n      if (-1 === i) return !1;\n      _this.currentPointers.splice(i, 1), _this.startPointers.splice(i, 1), _this.endCallback(e, t), _this.currentPointers.length || (_this.element.removeEventListener("pointermove", _this.onMove), _this.element.removeEventListener("pointerup", _this.onEnd), _this.element.removeEventListener("pointercancel", _this.onEnd));\n    }, this.element.addEventListener("pointerdown", this.onStart);\n  }\n\n  _createClass(r, [{\n    key: "stop",\n    value: function stop() {\n      this.element.removeEventListener("pointerdown", this.onStart), this.element.removeEventListener("pointermove", this.onMove), this.element.removeEventListener("pointerup", this.onEnd), this.element.removeEventListener("pointercancel", this.onEnd);\n    }\n  }]);\n\n  return r;\n}();\n\nvar l = function l(t) {\n  return !!(t && "object" == _typeof(t) && t instanceof Element && t !== document.body) && (function (t) {\n    var e = getComputedStyle(t)["overflow-y"],\n        i = getComputedStyle(t)["overflow-x"],\n        s = ("scroll" === e || "auto" === e) && Math.abs(t.scrollHeight - t.clientHeight) > 1,\n        o = ("scroll" === i || "auto" === i) && Math.abs(t.scrollWidth - t.clientWidth) > 1;\n    return s || o;\n  }(t) ? t : l(t.parentNode));\n};\n\nvar h = /*#__PURE__*/function () {\n  function h() {\n    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, h);\n\n    this.options = e(!0, {}, t), this.plugins = [], this.events = {};\n\n    for (var _i4 = 0, _arr2 = ["on", "once"]; _i4 < _arr2.length; _i4++) {\n      var _t3 = _arr2[_i4];\n\n      for (var _i5 = 0, _Object$entries = Object.entries(this.options[_t3] || {}); _i5 < _Object$entries.length; _i5++) {\n        var _e = _Object$entries[_i5];\n\n        this[_t3].apply(this, _toConsumableArray(_e));\n      }\n    }\n  }\n\n  _createClass(h, [{\n    key: "option",\n    value: function option(t, e) {\n      var _s;\n\n      t = String(t);\n      var s = (o = t, n = this.options, o.split(".").reduce(function (t, e) {\n        return t && t[e];\n      }, n));\n      var o, n;\n\n      for (var _len2 = arguments.length, i = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        i[_key2 - 2] = arguments[_key2];\n      }\n\n      return "function" == typeof s && (s = (_s = s).call.apply(_s, [this, this].concat(i))), void 0 === s ? e : s;\n    }\n  }, {\n    key: "localize",\n    value: function localize(t) {\n      var _this2 = this;\n\n      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      return String(t).replace(/\\{\\{(\\w+).?(\\w+)?\\}\\}/g, function (t, i, s) {\n        var o = !1;\n        if (o = s ? _this2.option("".concat(i[0] + i.toLowerCase().substring(1), ".l10n.").concat(s)) : _this2.option("l10n.".concat(i)), !o) return i;\n\n        for (var _t4 = 0; _t4 < e.length; _t4++) {\n          o = o.split(e[_t4][0]).join(e[_t4][1]);\n        }\n\n        return o;\n      });\n    }\n  }, {\n    key: "on",\n    value: function on(e, i) {\n      var _this3 = this;\n\n      if (t(e)) {\n        for (var _i6 = 0, _Object$entries2 = Object.entries(e); _i6 < _Object$entries2.length; _i6++) {\n          var _t5 = _Object$entries2[_i6];\n          this.on.apply(this, _toConsumableArray(_t5));\n        }\n\n        return this;\n      }\n\n      return String(e).split(" ").forEach(function (t) {\n        var e = _this3.events[t] = _this3.events[t] || [];\n        -1 == e.indexOf(i) && e.push(i);\n      }), this;\n    }\n  }, {\n    key: "once",\n    value: function once(e, i) {\n      var _this4 = this;\n\n      if (t(e)) {\n        for (var _i7 = 0, _Object$entries3 = Object.entries(e); _i7 < _Object$entries3.length; _i7++) {\n          var _t6 = _Object$entries3[_i7];\n          this.once.apply(this, _toConsumableArray(_t6));\n        }\n\n        return this;\n      }\n\n      return String(e).split(" ").forEach(function (t) {\n        var e = function e() {\n          for (var _len3 = arguments.length, s = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n            s[_key3] = arguments[_key3];\n          }\n\n          _this4.off(t, e), i.call.apply(i, [_this4, _this4].concat(s));\n        };\n\n        e._ = i, _this4.on(t, e);\n      }), this;\n    }\n  }, {\n    key: "off",\n    value: function off(e, i) {\n      var _this5 = this;\n\n      if (!t(e)) return e.split(" ").forEach(function (t) {\n        var e = _this5.events[t];\n        if (!e || !e.length) return _this5;\n        var s = -1;\n\n        for (var _t7 = 0, _o = e.length; _t7 < _o; _t7++) {\n          var _o2 = e[_t7];\n\n          if (_o2 && (_o2 === i || _o2._ === i)) {\n            s = _t7;\n            break;\n          }\n        }\n\n        -1 != s && e.splice(s, 1);\n      }), this;\n\n      for (var _i8 = 0, _Object$entries4 = Object.entries(e); _i8 < _Object$entries4.length; _i8++) {\n        var _t8 = _Object$entries4[_i8];\n        this.off.apply(this, _toConsumableArray(_t8));\n      }\n    }\n  }, {\n    key: "trigger",\n    value: function trigger(t) {\n      for (var _len4 = arguments.length, e = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        e[_key4 - 1] = arguments[_key4];\n      }\n\n      var _iterator = _createForOfIteratorHelper(_toConsumableArray(this.events[t] || []).slice()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _i9 = _step.value;\n          if (_i9 && !1 === _i9.call.apply(_i9, [this, this].concat(e))) return !1;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(_toConsumableArray(this.events["*"] || []).slice()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _i10 = _step2.value;\n          if (_i10 && !1 === _i10.call.apply(_i10, [this, t, this].concat(e))) return !1;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return !0;\n    }\n  }, {\n    key: "attachPlugins",\n    value: function attachPlugins(t) {\n      var i = {};\n\n      for (var _i11 = 0, _Object$entries5 = Object.entries(t || {}); _i11 < _Object$entries5.length; _i11++) {\n        var _Object$entries5$_i = _slicedToArray(_Object$entries5[_i11], 2),\n            _s2 = _Object$entries5$_i[0],\n            _o3 = _Object$entries5$_i[1];\n\n        !1 === this.options[_s2] || this.plugins[_s2] || (this.options[_s2] = e({}, _o3.defaults || {}, this.options[_s2]), i[_s2] = new _o3(this));\n      }\n\n      for (var _i12 = 0, _Object$entries6 = Object.entries(i); _i12 < _Object$entries6.length; _i12++) {\n        var _Object$entries6$_i = _slicedToArray(_Object$entries6[_i12], 2),\n            _t9 = _Object$entries6$_i[0],\n            _e2 = _Object$entries6$_i[1];\n\n        _e2.attach(this);\n      }\n\n      return this.plugins = Object.assign({}, this.plugins, i), this;\n    }\n  }, {\n    key: "detachPlugins",\n    value: function detachPlugins() {\n      for (var _t10 in this.plugins) {\n        var _e3 = void 0;\n\n        (_e3 = this.plugins[_t10]) && "function" == typeof _e3.detach && _e3.detach(this);\n      }\n\n      return this.plugins = {}, this;\n    }\n  }]);\n\n  return h;\n}();\n\nvar c = {\n  touch: !0,\n  zoom: !0,\n  pinchToZoom: !0,\n  panOnlyZoomed: !1,\n  lockAxis: !1,\n  friction: .64,\n  decelFriction: .88,\n  zoomFriction: .74,\n  bounceForce: .2,\n  baseScale: 1,\n  minScale: 1,\n  maxScale: 2,\n  step: .5,\n  textSelection: !1,\n  click: "toggleZoom",\n  wheel: "zoom",\n  wheelFactor: 42,\n  wheelLimit: 5,\n  draggableClass: "is-draggable",\n  draggingClass: "is-dragging",\n  ratio: 1\n};\n\nvar d = /*#__PURE__*/function (_h) {\n  _inherits(d, _h);\n\n  var _super = _createSuper(d);\n\n  function d(t) {\n    var _this6;\n\n    var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, d);\n\n    _this6 = _super.call(this, e(!0, {}, c, i)), _this6.state = "init", _this6.$container = t;\n\n    for (var _i13 = 0, _arr3 = ["onLoad", "onWheel", "onClick"]; _i13 < _arr3.length; _i13++) {\n      var _t11 = _arr3[_i13];\n      _this6[_t11] = _this6[_t11].bind(_assertThisInitialized(_this6));\n    }\n\n    _this6.initLayout(), _this6.resetValues(), _this6.attachPlugins(d.Plugins), _this6.trigger("init"), _this6.updateMetrics(), _this6.attachEvents(), _this6.trigger("ready"), !1 === _this6.option("centerOnStart") ? _this6.state = "ready" : _this6.panTo({\n      friction: 0\n    });\n    return _this6;\n  }\n\n  _createClass(d, [{\n    key: "initLayout",\n    value: function initLayout() {\n      var _i14;\n\n      var t = this.$container;\n      if (!(t instanceof HTMLElement)) throw new Error("Panzoom: Container not found");\n      var e = this.option("content") || t.querySelector(".panzoom__content");\n      if (!e) throw new Error("Panzoom: Content not found");\n      this.$content = e;\n      var i = this.option("viewport") || t.querySelector(".panzoom__viewport");\n      i || !1 === this.option("wrapInner") || (i = document.createElement("div"), i.classList.add("panzoom__viewport"), (_i14 = i).append.apply(_i14, _toConsumableArray(t.childNodes)), t.appendChild(i)), this.$viewport = i || e.parentNode;\n    }\n  }, {\n    key: "resetValues",\n    value: function resetValues() {\n      this.updateRate = this.option("updateRate", /iPhone|iPad|iPod|Android/i.test(navigator.userAgent) ? 250 : 24), this.container = {\n        width: 0,\n        height: 0\n      }, this.viewport = {\n        width: 0,\n        height: 0\n      }, this.content = {\n        origHeight: 0,\n        origWidth: 0,\n        width: 0,\n        height: 0,\n        x: this.option("x", 0),\n        y: this.option("y", 0),\n        scale: this.option("baseScale")\n      }, this.transform = {\n        x: 0,\n        y: 0,\n        scale: 1\n      }, this.resetDragPosition();\n    }\n  }, {\n    key: "onLoad",\n    value: function onLoad(t) {\n      this.updateMetrics(), this.panTo({\n        scale: this.option("baseScale"),\n        friction: 0\n      }), this.trigger("load", t);\n    }\n  }, {\n    key: "onClick",\n    value: function onClick(t) {\n      if (t.defaultPrevented) return;\n      if (this.option("textSelection") && window.getSelection().toString().length) return void t.stopPropagation();\n      var e = this.$content.getClientRects()[0];\n      if ("ready" !== this.state && (this.dragPosition.midPoint || Math.abs(e.top - this.dragStart.rect.top) > 1 || Math.abs(e.left - this.dragStart.rect.left) > 1)) return t.preventDefault(), void t.stopPropagation();\n      !1 !== this.trigger("click", t) && this.option("zoom") && "toggleZoom" === this.option("click") && (t.preventDefault(), t.stopPropagation(), this.zoomWithClick(t));\n    }\n  }, {\n    key: "onWheel",\n    value: function onWheel(t) {\n      !1 !== this.trigger("wheel", t) && this.option("zoom") && this.option("wheel") && this.zoomWithWheel(t);\n    }\n  }, {\n    key: "zoomWithWheel",\n    value: function zoomWithWheel(t) {\n      void 0 === this.changedDelta && (this.changedDelta = 0);\n      var e = Math.max(-1, Math.min(1, -t.deltaY || -t.deltaX || t.wheelDelta || -t.detail)),\n          i = this.content.scale;\n      var s = i * (100 + e * this.option("wheelFactor")) / 100;\n      if (e < 0 && Math.abs(i - this.option("minScale")) < .01 || e > 0 && Math.abs(i - this.option("maxScale")) < .01 ? (this.changedDelta += Math.abs(e), s = i) : (this.changedDelta = 0, s = Math.max(Math.min(s, this.option("maxScale")), this.option("minScale"))), this.changedDelta > this.option("wheelLimit")) return;\n      if (t.preventDefault(), s === i) return;\n      var o = this.$content.getBoundingClientRect(),\n          n = t.clientX - o.left,\n          a = t.clientY - o.top;\n      this.zoomTo(s, {\n        x: n,\n        y: a\n      });\n    }\n  }, {\n    key: "zoomWithClick",\n    value: function zoomWithClick(t) {\n      var e = this.$content.getClientRects()[0],\n          i = t.clientX - e.left,\n          s = t.clientY - e.top;\n      this.toggleZoom({\n        x: i,\n        y: s\n      });\n    }\n  }, {\n    key: "attachEvents",\n    value: function attachEvents() {\n      var _this7 = this;\n\n      this.$content.addEventListener("load", this.onLoad), this.$container.addEventListener("wheel", this.onWheel, {\n        passive: !1\n      }), this.$container.addEventListener("click", this.onClick, {\n        passive: !1\n      }), this.initObserver();\n      var t = new r(this.$container, {\n        start: function start(e, i) {\n          if (!_this7.option("touch")) return !1;\n\n          if (!(_this7.velocity.scale < 0)) {\n            if (!t.currentPointers.length) {\n              if (-1 !== ["BUTTON", "TEXTAREA", "OPTION", "INPUT", "SELECT", "VIDEO"].indexOf(i.target.nodeName)) return !1;\n              if (_this7.option("textSelection") && function (t, e, i) {\n                var s = t.childNodes,\n                    o = document.createRange();\n\n                for (var _t12 = 0; _t12 < s.length; _t12++) {\n                  var _n2 = s[_t12];\n                  if (_n2.nodeType !== Node.TEXT_NODE) continue;\n                  o.selectNodeContents(_n2);\n\n                  var _a2 = o.getBoundingClientRect();\n\n                  if (e >= _a2.left && i >= _a2.top && e <= _a2.right && i <= _a2.bottom) return _n2;\n                }\n\n                return !1;\n              }(i.target, i.clientX, i.clientY)) return !1;\n              if (l(i.target)) return !1;\n            }\n\n            return !1 !== _this7.trigger("touchStart", i) && (_this7.state = "pointerdown", _this7.resetDragPosition(), _this7.dragPosition.midPoint = null, _this7.dragPosition.time = Date.now(), !0);\n          }\n        },\n        move: function move(e, i, s) {\n          if ("pointerdown" !== _this7.state) return;\n          if (0 == _this7.trigger("touchMove", s)) return void s.preventDefault();\n          if (i.length < 2 && 1 == _this7.option("panOnlyZoomed") && _this7.content.width <= _this7.viewport.width && _this7.content.height <= _this7.viewport.height && _this7.transform.scale <= _this7.option("baseScale")) return;\n          if (i.length > 1 && (!_this7.option("zoom") || !1 === _this7.option("pinchToZoom"))) return;\n          s.preventDefault(), s.stopPropagation();\n\n          var o = a(e[0], e[1]),\n              r = a(i[0], i[1]),\n              l = r.clientX - o.clientX,\n              h = r.clientY - o.clientY,\n              c = n(e[0], e[1]),\n              _d2 = n(i[0], i[1]),\n              u = c ? _d2 / c : 1;\n\n          _this7.dragOffset.x += l, _this7.dragOffset.y += h, _this7.dragOffset.scale *= u, _this7.dragOffset.time = Date.now() - _this7.dragPosition.time;\n\n          var f = 1 === _this7.dragStart.scale && _this7.option("lockAxis");\n\n          if (f && !_this7.lockAxis) {\n            if (Math.abs(_this7.dragOffset.x) < 6 && Math.abs(_this7.dragOffset.y) < 6) return;\n\n            if ("xy" === f) {\n              var _t13 = Math.abs(180 * Math.atan2(_this7.dragOffset.y, _this7.dragOffset.x) / Math.PI);\n\n              _this7.lockAxis = _t13 > 45 && _t13 < 135 ? "y" : "x";\n            } else _this7.lockAxis = f;\n          }\n\n          if (_this7.lockAxis && (_this7.dragOffset["x" === _this7.lockAxis ? "y" : "x"] = 0), _this7.$container.classList.add(_this7.option("draggingClass")), _this7.transform.scale === _this7.option("baseScale") && "y" === _this7.lockAxis || (_this7.dragPosition.x = _this7.dragStart.x + _this7.dragOffset.x), _this7.transform.scale === _this7.option("baseScale") && "x" === _this7.lockAxis || (_this7.dragPosition.y = _this7.dragStart.y + _this7.dragOffset.y), _this7.dragPosition.scale = _this7.dragStart.scale * _this7.dragOffset.scale, i.length > 1) {\n            var _e4 = a(t.startPointers[0], t.startPointers[1]),\n                _i15 = _e4.clientX - _this7.dragStart.rect.x,\n                _s3 = _e4.clientY - _this7.dragStart.rect.y,\n                _this7$getZoomDelta = _this7.getZoomDelta(_this7.content.scale * _this7.dragOffset.scale, _i15, _s3),\n                _o4 = _this7$getZoomDelta.deltaX,\n                _n3 = _this7$getZoomDelta.deltaY;\n\n            _this7.dragPosition.x -= _o4, _this7.dragPosition.y -= _n3, _this7.dragPosition.midPoint = r;\n          } else _this7.setDragResistance();\n\n          _this7.transform = {\n            x: _this7.dragPosition.x,\n            y: _this7.dragPosition.y,\n            scale: _this7.dragPosition.scale\n          }, _this7.startAnimation();\n        },\n        end: function end(e, i) {\n          if ("pointerdown" !== _this7.state) return;\n          if (_this7._dragOffset = _objectSpread({}, _this7.dragOffset), t.currentPointers.length) return void _this7.resetDragPosition();\n          if (_this7.state = "decel", _this7.friction = _this7.option("decelFriction"), _this7.recalculateTransform(), _this7.$container.classList.remove(_this7.option("draggingClass")), !1 === _this7.trigger("touchEnd", i)) return;\n          if ("decel" !== _this7.state) return;\n\n          var s = _this7.option("minScale");\n\n          if (_this7.transform.scale < s) return void _this7.zoomTo(s, {\n            friction: .64\n          });\n\n          var o = _this7.option("maxScale");\n\n          if (_this7.transform.scale - o > .01) {\n            var _t14 = _this7.dragPosition.midPoint || e,\n                _i16 = _this7.$content.getClientRects()[0];\n\n            _this7.zoomTo(o, {\n              friction: .64,\n              x: _t14.clientX - _i16.left,\n              y: _t14.clientY - _i16.top\n            });\n          } else ;\n        }\n      });\n      this.pointerTracker = t;\n    }\n  }, {\n    key: "initObserver",\n    value: function initObserver() {\n      var _this8 = this;\n\n      this.resizeObserver || (this.resizeObserver = new s(function () {\n        _this8.updateTimer || (_this8.updateTimer = setTimeout(function () {\n          var t = _this8.$container.getBoundingClientRect();\n\n          t.width && t.height ? ((Math.abs(t.width - _this8.container.width) > 1 || Math.abs(t.height - _this8.container.height) > 1) && (_this8.isAnimating() && _this8.endAnimation(!0), _this8.updateMetrics(), _this8.panTo({\n            x: _this8.content.x,\n            y: _this8.content.y,\n            scale: _this8.option("baseScale"),\n            friction: 0\n          })), _this8.updateTimer = null) : _this8.updateTimer = null;\n        }, _this8.updateRate));\n      }), this.resizeObserver.observe(this.$container));\n    }\n  }, {\n    key: "resetDragPosition",\n    value: function resetDragPosition() {\n      this.lockAxis = null, this.friction = this.option("friction"), this.velocity = {\n        x: 0,\n        y: 0,\n        scale: 0\n      };\n      var _this$content = this.content,\n          t = _this$content.x,\n          e = _this$content.y,\n          i = _this$content.scale;\n      this.dragStart = {\n        rect: this.$content.getBoundingClientRect(),\n        x: t,\n        y: e,\n        scale: i\n      }, this.dragPosition = _objectSpread(_objectSpread({}, this.dragPosition), {}, {\n        x: t,\n        y: e,\n        scale: i\n      }), this.dragOffset = {\n        x: 0,\n        y: 0,\n        scale: 1,\n        time: 0\n      };\n    }\n  }, {\n    key: "updateMetrics",\n    value: function updateMetrics(t) {\n      !0 !== t && this.trigger("beforeUpdate");\n      var e = this.$container,\n          s = this.$content,\n          o = this.$viewport,\n          n = this.$content instanceof HTMLImageElement,\n          a = this.option("zoom"),\n          r = this.option("resizeParent", a);\n      var l = (h = this.$content, Math.max(parseFloat(h.naturalWidth || 0), parseFloat(h.width && h.width.baseVal && h.width.baseVal.value || 0), parseFloat(h.offsetWidth || 0), parseFloat(h.scrollWidth || 0)));\n      var h;\n\n      var c = function (t) {\n        return Math.max(parseFloat(t.naturalHeight || 0), parseFloat(t.height && t.height.baseVal && t.height.baseVal.value || 0), parseFloat(t.offsetHeight || 0), parseFloat(t.scrollHeight || 0));\n      }(this.$content);\n\n      Object.assign(s.style, {\n        width: "",\n        height: "",\n        maxWidth: "",\n        maxHeight: ""\n      }), r && Object.assign(o.style, {\n        width: "",\n        height: ""\n      });\n\n      var _d3 = this.option("ratio");\n\n      l = i(l * _d3), c = i(c * _d3);\n      var u = l,\n          f = c;\n      var g = s.getBoundingClientRect(),\n          p = o.getBoundingClientRect(),\n          m = o == e ? p : e.getBoundingClientRect();\n      var y = Math.max(o.offsetWidth, i(p.width)),\n          b = Math.max(o.offsetHeight, i(p.height)),\n          v = window.getComputedStyle(o);\n\n      if (y -= parseFloat(v.paddingLeft) + parseFloat(v.paddingRight), b -= parseFloat(v.paddingTop) + parseFloat(v.paddingBottom), this.viewport.width = y, this.viewport.height = b, a) {\n        if (Math.abs(l - g.width) > .1 || Math.abs(c - g.height) > .1) {\n          var _t15 = function (t, e, i, s) {\n            var o = Math.min(i / t || 0, s / e);\n            return {\n              width: t * o || 0,\n              height: e * o || 0\n            };\n          }(l, c, Math.min(l, g.width), Math.min(c, g.height));\n\n          u = i(_t15.width), f = i(_t15.height);\n        }\n\n        Object.assign(s.style, {\n          width: "".concat(u, "px"),\n          height: "".concat(f, "px"),\n          transform: ""\n        });\n      }\n\n      if (r && (Object.assign(o.style, {\n        width: "".concat(u, "px"),\n        height: "".concat(f, "px")\n      }), this.viewport = _objectSpread(_objectSpread({}, this.viewport), {}, {\n        width: u,\n        height: f\n      })), n && a && "function" != typeof this.options.maxScale) {\n        var _t16 = this.option("maxScale");\n\n        this.options.maxScale = function () {\n          return this.content.origWidth > 0 && this.content.fitWidth > 0 ? this.content.origWidth / this.content.fitWidth : _t16;\n        };\n      }\n\n      this.content = _objectSpread(_objectSpread({}, this.content), {}, {\n        origWidth: l,\n        origHeight: c,\n        fitWidth: u,\n        fitHeight: f,\n        width: u,\n        height: f,\n        scale: 1,\n        isZoomable: a\n      }), this.container = {\n        width: m.width,\n        height: m.height\n      }, !0 !== t && this.trigger("afterUpdate");\n    }\n  }, {\n    key: "zoomIn",\n    value: function zoomIn(t) {\n      this.zoomTo(this.content.scale + (t || this.option("step")));\n    }\n  }, {\n    key: "zoomOut",\n    value: function zoomOut(t) {\n      this.zoomTo(this.content.scale - (t || this.option("step")));\n    }\n  }, {\n    key: "toggleZoom",\n    value: function toggleZoom() {\n      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var e = this.option("maxScale"),\n          i = this.option("baseScale"),\n          s = this.content.scale > i + .5 * (e - i) ? i : e;\n      this.zoomTo(s, t);\n    }\n  }, {\n    key: "zoomTo",\n    value: function zoomTo() {\n      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.option("baseScale");\n\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$x = _ref2.x,\n          e = _ref2$x === void 0 ? null : _ref2$x,\n          _ref2$y = _ref2.y,\n          s = _ref2$y === void 0 ? null : _ref2$y;\n\n      t = Math.max(Math.min(t, this.option("maxScale")), this.option("minScale"));\n      var o = i(this.content.scale / (this.content.width / this.content.fitWidth), 1e7);\n      null === e && (e = this.content.width * o * .5), null === s && (s = this.content.height * o * .5);\n\n      var _this$getZoomDelta = this.getZoomDelta(t, e, s),\n          n = _this$getZoomDelta.deltaX,\n          a = _this$getZoomDelta.deltaY;\n\n      e = this.content.x - n, s = this.content.y - a, this.panTo({\n        x: e,\n        y: s,\n        scale: t,\n        friction: this.option("zoomFriction")\n      });\n    }\n  }, {\n    key: "getZoomDelta",\n    value: function getZoomDelta(t) {\n      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var s = this.content.fitWidth * this.content.scale,\n          o = this.content.fitHeight * this.content.scale,\n          n = e > 0 && s ? e / s : 0,\n          a = i > 0 && o ? i / o : 0;\n      return {\n        deltaX: (this.content.fitWidth * t - s) * n,\n        deltaY: (this.content.fitHeight * t - o) * a\n      };\n    }\n  }, {\n    key: "panTo",\n    value: function panTo() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref3$x = _ref3.x,\n          t = _ref3$x === void 0 ? this.content.x : _ref3$x,\n          _ref3$y = _ref3.y,\n          e = _ref3$y === void 0 ? this.content.y : _ref3$y,\n          i = _ref3.scale,\n          _ref3$friction = _ref3.friction,\n          s = _ref3$friction === void 0 ? this.option("friction") : _ref3$friction,\n          _ref3$ignoreBounds = _ref3.ignoreBounds,\n          o = _ref3$ignoreBounds === void 0 ? !1 : _ref3$ignoreBounds;\n\n      if (i = i || this.content.scale || 1, !o) {\n        var _this$getBounds = this.getBounds(i),\n            _s4 = _this$getBounds.boundX,\n            _o5 = _this$getBounds.boundY;\n\n        _s4 && (t = Math.max(Math.min(t, _s4.to), _s4.from)), _o5 && (e = Math.max(Math.min(e, _o5.to), _o5.from));\n      }\n\n      this.friction = s, this.transform = _objectSpread(_objectSpread({}, this.transform), {}, {\n        x: t,\n        y: e,\n        scale: i\n      }), s ? (this.state = "panning", this.velocity = {\n        x: (1 / this.friction - 1) * (t - this.content.x),\n        y: (1 / this.friction - 1) * (e - this.content.y),\n        scale: (1 / this.friction - 1) * (i - this.content.scale)\n      }, this.startAnimation()) : this.endAnimation();\n    }\n  }, {\n    key: "startAnimation",\n    value: function startAnimation() {\n      var _this9 = this;\n\n      this.rAF ? cancelAnimationFrame(this.rAF) : this.trigger("startAnimation"), this.rAF = requestAnimationFrame(function () {\n        return _this9.animate();\n      });\n    }\n  }, {\n    key: "animate",\n    value: function animate() {\n      var _this10 = this;\n\n      if (this.setEdgeForce(), this.setDragForce(), this.velocity.x *= this.friction, this.velocity.y *= this.friction, this.velocity.scale *= this.friction, this.content.x += this.velocity.x, this.content.y += this.velocity.y, this.content.scale += this.velocity.scale, this.isAnimating()) this.setTransform();else if ("pointerdown" !== this.state) return void this.endAnimation();\n      this.rAF = requestAnimationFrame(function () {\n        return _this10.animate();\n      });\n    }\n  }, {\n    key: "getBounds",\n    value: function getBounds(t) {\n      var e = this.boundX,\n          s = this.boundY;\n      if (void 0 !== e && void 0 !== s) return {\n        boundX: e,\n        boundY: s\n      };\n      e = {\n        from: 0,\n        to: 0\n      }, s = {\n        from: 0,\n        to: 0\n      }, t = t || this.transform.scale;\n      var o = this.content.fitWidth,\n          n = this.content.fitHeight,\n          a = o * t,\n          r = n * t,\n          l = this.viewport.width,\n          h = this.viewport.height;\n\n      if (o <= l) {\n        var _t17 = .5 * (l - a),\n            _s5 = .5 * (a - o);\n\n        e.from = i(_t17 - _s5), e.to = i(_t17 + _s5);\n      } else e.from = i(l - a);\n\n      if (n <= h) {\n        var _t18 = .5 * (h - r),\n            _e5 = .5 * (r - n);\n\n        s.from = i(_t18 - _e5), s.to = i(_t18 + _e5);\n      } else s.from = i(h - a);\n\n      return {\n        boundX: e,\n        boundY: s\n      };\n    }\n  }, {\n    key: "setEdgeForce",\n    value: function setEdgeForce() {\n      if ("decel" !== this.state) return;\n\n      var t = this.option("bounceForce"),\n          _this$getBounds2 = this.getBounds(Math.max(this.transform.scale, this.content.scale)),\n          e = _this$getBounds2.boundX,\n          i = _this$getBounds2.boundY;\n\n      var s, o, n, a;\n\n      if (e && (s = this.content.x < e.from, o = this.content.x > e.to), i && (n = this.content.y < i.from, a = this.content.y > i.to), s || o) {\n        var _i17 = ((s ? e.from : e.to) - this.content.x) * t;\n\n        var _o6 = this.content.x + (this.velocity.x + _i17) / this.friction;\n\n        _o6 >= e.from && _o6 <= e.to && (_i17 += this.velocity.x), this.velocity.x = _i17, this.recalculateTransform();\n      }\n\n      if (n || a) {\n        var _e6 = ((n ? i.from : i.to) - this.content.y) * t;\n\n        var _s6 = this.content.y + (_e6 + this.velocity.y) / this.friction;\n\n        _s6 >= i.from && _s6 <= i.to && (_e6 += this.velocity.y), this.velocity.y = _e6, this.recalculateTransform();\n      }\n    }\n  }, {\n    key: "setDragResistance",\n    value: function setDragResistance() {\n      if ("pointerdown" !== this.state) return;\n\n      var _this$getBounds3 = this.getBounds(this.dragPosition.scale),\n          t = _this$getBounds3.boundX,\n          e = _this$getBounds3.boundY;\n\n      var i, s, o, n;\n\n      if (t && (i = this.dragPosition.x < t.from, s = this.dragPosition.x > t.to), e && (o = this.dragPosition.y < e.from, n = this.dragPosition.y > e.to), (i || s) && (!i || !s)) {\n        var _e7 = i ? t.from : t.to,\n            _s7 = _e7 - this.dragPosition.x;\n\n        this.dragPosition.x = _e7 - .3 * _s7;\n      }\n\n      if ((o || n) && (!o || !n)) {\n        var _t19 = o ? e.from : e.to,\n            _i18 = _t19 - this.dragPosition.y;\n\n        this.dragPosition.y = _t19 - .3 * _i18;\n      }\n    }\n  }, {\n    key: "setDragForce",\n    value: function setDragForce() {\n      "pointerdown" === this.state && (this.velocity.x = this.dragPosition.x - this.content.x, this.velocity.y = this.dragPosition.y - this.content.y, this.velocity.scale = this.dragPosition.scale - this.content.scale);\n    }\n  }, {\n    key: "recalculateTransform",\n    value: function recalculateTransform() {\n      this.transform.x = this.content.x + this.velocity.x / (1 / this.friction - 1), this.transform.y = this.content.y + this.velocity.y / (1 / this.friction - 1), this.transform.scale = this.content.scale + this.velocity.scale / (1 / this.friction - 1);\n    }\n  }, {\n    key: "isAnimating",\n    value: function isAnimating() {\n      return !(!this.friction || !(Math.abs(this.velocity.x) > .05 || Math.abs(this.velocity.y) > .05 || Math.abs(this.velocity.scale) > .05));\n    }\n  }, {\n    key: "setTransform",\n    value: function setTransform(t) {\n      var e, s, o;\n\n      if (t ? (e = i(this.transform.x), s = i(this.transform.y), o = this.transform.scale, this.content = _objectSpread(_objectSpread({}, this.content), {}, {\n        x: e,\n        y: s,\n        scale: o\n      })) : (e = i(this.content.x), s = i(this.content.y), o = this.content.scale / (this.content.width / this.content.fitWidth), this.content = _objectSpread(_objectSpread({}, this.content), {}, {\n        x: e,\n        y: s\n      })), this.trigger("beforeTransform"), e = i(this.content.x), s = i(this.content.y), t && this.option("zoom")) {\n        var _t20, _n4;\n\n        _t20 = i(this.content.fitWidth * o), _n4 = i(this.content.fitHeight * o), this.content.width = _t20, this.content.height = _n4, this.transform = _objectSpread(_objectSpread({}, this.transform), {}, {\n          width: _t20,\n          height: _n4,\n          scale: o\n        }), Object.assign(this.$content.style, {\n          width: "".concat(_t20, "px"),\n          height: "".concat(_n4, "px"),\n          maxWidth: "none",\n          maxHeight: "none",\n          transform: "translate3d(".concat(e, "px, ").concat(s, "px, 0) scale(1)")\n        });\n      } else this.$content.style.transform = "translate3d(".concat(e, "px, ").concat(s, "px, 0) scale(").concat(o, ")");\n\n      this.trigger("afterTransform");\n    }\n  }, {\n    key: "endAnimation",\n    value: function endAnimation(t) {\n      cancelAnimationFrame(this.rAF), this.rAF = null, this.velocity = {\n        x: 0,\n        y: 0,\n        scale: 0\n      }, this.setTransform(!0), this.state = "ready", this.handleCursor(), !0 !== t && this.trigger("endAnimation");\n    }\n  }, {\n    key: "handleCursor",\n    value: function handleCursor() {\n      var t = this.option("draggableClass");\n      t && this.option("touch") && (1 == this.option("panOnlyZoomed") && this.content.width <= this.viewport.width && this.content.height <= this.viewport.height && this.transform.scale <= this.option("baseScale") ? this.$container.classList.remove(t) : this.$container.classList.add(t));\n    }\n  }, {\n    key: "detachEvents",\n    value: function detachEvents() {\n      this.$content.removeEventListener("load", this.onLoad), this.$container.removeEventListener("wheel", this.onWheel, {\n        passive: !1\n      }), this.$container.removeEventListener("click", this.onClick, {\n        passive: !1\n      }), this.pointerTracker && (this.pointerTracker.stop(), this.pointerTracker = null), this.resizeObserver && (this.resizeObserver.disconnect(), this.resizeObserver = null);\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      "destroy" !== this.state && (this.state = "destroy", clearTimeout(this.updateTimer), this.updateTimer = null, cancelAnimationFrame(this.rAF), this.rAF = null, this.detachEvents(), this.detachPlugins(), this.resetDragPosition());\n    }\n  }]);\n\n  return d;\n}(h);\n\nd.version = "4.0.9", d.Plugins = {};\n\nvar u = function u(t, e) {\n  var i = 0;\n  return function () {\n    var o = new Date().getTime();\n    if (!(o - i < e)) return i = o, t.apply(void 0, arguments);\n  };\n};\n\nvar f = /*#__PURE__*/function () {\n  function f(t) {\n    _classCallCheck(this, f);\n\n    this.$container = null, this.$prev = null, this.$next = null, this.carousel = t, this.onRefresh = this.onRefresh.bind(this);\n  }\n\n  _createClass(f, [{\n    key: "option",\n    value: function option(t) {\n      return this.carousel.option("Navigation.".concat(t));\n    }\n  }, {\n    key: "createButton",\n    value: function createButton(t) {\n      var _e$classList,\n          _this11 = this;\n\n      var e = document.createElement("button");\n      e.setAttribute("title", this.carousel.localize("{{".concat(t.toUpperCase(), "}}")));\n      var i = this.option("classNames.button") + " " + this.option("classNames.".concat(t));\n      return (_e$classList = e.classList).add.apply(_e$classList, _toConsumableArray(i.split(" "))), e.setAttribute("tabindex", "0"), e.innerHTML = this.carousel.localize(this.option("".concat(t, "Tpl"))), e.addEventListener("click", function (e) {\n        e.preventDefault(), e.stopPropagation(), _this11.carousel["slide" + ("next" === t ? "Next" : "Prev")]();\n      }), e;\n    }\n  }, {\n    key: "build",\n    value: function build() {\n      this.$container || (this.$container = document.createElement("div"), this.$container.classList.add(this.option("classNames.main")), this.carousel.$container.appendChild(this.$container)), this.$next || (this.$next = this.createButton("next"), this.$container.appendChild(this.$next)), this.$prev || (this.$prev = this.createButton("prev"), this.$container.appendChild(this.$prev));\n    }\n  }, {\n    key: "onRefresh",\n    value: function onRefresh() {\n      var t = this.carousel.pages.length;\n      t <= 1 || t > 1 && this.carousel.elemDimWidth < this.carousel.wrapDimWidth && !Number.isInteger(this.carousel.option("slidesPerPage")) ? this.cleanup() : (this.build(), this.$prev.removeAttribute("disabled"), this.$next.removeAttribute("disabled"), this.carousel.option("infiniteX", this.carousel.option("infinite")) || (this.carousel.page <= 0 && this.$prev.setAttribute("disabled", ""), this.carousel.page >= t - 1 && this.$next.setAttribute("disabled", "")));\n    }\n  }, {\n    key: "cleanup",\n    value: function cleanup() {\n      this.$prev && this.$prev.remove(), this.$prev = null, this.$next && this.$next.remove(), this.$next = null, this.$container && this.$container.remove(), this.$container = null;\n    }\n  }, {\n    key: "attach",\n    value: function attach() {\n      this.carousel.on("refresh change", this.onRefresh);\n    }\n  }, {\n    key: "detach",\n    value: function detach() {\n      this.carousel.off("refresh change", this.onRefresh), this.cleanup();\n    }\n  }]);\n\n  return f;\n}();\n\nf.defaults = {\n  prevTpl: \'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" tabindex="-1"><path d="M15 3l-9 9 9 9"/></svg>\',\n  nextTpl: \'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" tabindex="-1"><path d="M9 3l9 9-9 9"/></svg>\',\n  classNames: {\n    main: "carousel__nav",\n    button: "carousel__button",\n    next: "is-next",\n    prev: "is-prev"\n  }\n};\n\nvar g = /*#__PURE__*/function () {\n  function g(t) {\n    _classCallCheck(this, g);\n\n    this.carousel = t, this.selectedIndex = null, this.friction = 0, this.onNavReady = this.onNavReady.bind(this), this.onNavClick = this.onNavClick.bind(this), this.onNavCreateSlide = this.onNavCreateSlide.bind(this), this.onTargetChange = this.onTargetChange.bind(this);\n  }\n\n  _createClass(g, [{\n    key: "addAsTargetFor",\n    value: function addAsTargetFor(t) {\n      this.target = this.carousel, this.nav = t, this.attachEvents();\n    }\n  }, {\n    key: "addAsNavFor",\n    value: function addAsNavFor(t) {\n      this.target = t, this.nav = this.carousel, this.attachEvents();\n    }\n  }, {\n    key: "attachEvents",\n    value: function attachEvents() {\n      this.nav.options.initialSlide = this.target.options.initialPage, this.nav.on("ready", this.onNavReady), this.nav.on("createSlide", this.onNavCreateSlide), this.nav.on("Panzoom.click", this.onNavClick), this.target.on("change", this.onTargetChange), this.target.on("Panzoom.afterUpdate", this.onTargetChange);\n    }\n  }, {\n    key: "onNavReady",\n    value: function onNavReady() {\n      this.onTargetChange(!0);\n    }\n  }, {\n    key: "onNavClick",\n    value: function onNavClick(t, e, i) {\n      var s = i.target.closest(".carousel__slide");\n      if (!s) return;\n      i.stopPropagation();\n      var o = parseInt(s.dataset.index, 10),\n          n = this.target.findPageForSlide(o);\n      this.target.page !== n && this.target.slideTo(n, {\n        friction: this.friction\n      }), this.markSelectedSlide(o);\n    }\n  }, {\n    key: "onNavCreateSlide",\n    value: function onNavCreateSlide(t, e) {\n      e.index === this.selectedIndex && this.markSelectedSlide(e.index);\n    }\n  }, {\n    key: "onTargetChange",\n    value: function onTargetChange() {\n      var t = this.target.pages[this.target.page].indexes[0],\n          e = this.nav.findPageForSlide(t);\n      this.nav.slideTo(e), this.markSelectedSlide(t);\n    }\n  }, {\n    key: "markSelectedSlide",\n    value: function markSelectedSlide(t) {\n      this.selectedIndex = t, _toConsumableArray(this.nav.slides).filter(function (t) {\n        return t.$el && t.$el.classList.remove("is-nav-selected");\n      });\n      var e = this.nav.slides[t];\n      e && e.$el && e.$el.classList.add("is-nav-selected");\n    }\n  }, {\n    key: "attach",\n    value: function attach(t) {\n      var e = t.options.Sync;\n      (e.target || e.nav) && (e.target ? this.addAsNavFor(e.target) : e.nav && this.addAsTargetFor(e.nav), this.friction = e.friction);\n    }\n  }, {\n    key: "detach",\n    value: function detach() {\n      this.nav && (this.nav.off("ready", this.onNavReady), this.nav.off("Panzoom.click", this.onNavClick), this.nav.off("createSlide", this.onNavCreateSlide)), this.target && (this.target.off("Panzoom.afterUpdate", this.onTargetChange), this.target.off("change", this.onTargetChange));\n    }\n  }]);\n\n  return g;\n}();\n\ng.defaults = {\n  friction: .92\n};\nvar p = {\n  Navigation: f,\n  Dots: /*#__PURE__*/function () {\n    function Dots(t) {\n      _classCallCheck(this, Dots);\n\n      this.carousel = t, this.$list = null, this.events = {\n        change: this.onChange.bind(this),\n        refresh: this.onRefresh.bind(this)\n      };\n    }\n\n    _createClass(Dots, [{\n      key: "buildList",\n      value: function buildList() {\n        var _this12 = this;\n\n        if (this.carousel.pages.length < this.carousel.option("Dots.minSlideCount")) return;\n        var t = document.createElement("ol");\n        return t.classList.add("carousel__dots"), t.addEventListener("click", function (t) {\n          if (!("page" in t.target.dataset)) return;\n          t.preventDefault(), t.stopPropagation();\n          var e = parseInt(t.target.dataset.page, 10),\n              i = _this12.carousel;\n          e !== i.page && (i.pages.length < 3 && i.option("infinite") ? i[0 == e ? "slidePrev" : "slideNext"]() : i.slideTo(e));\n        }), this.$list = t, this.carousel.$container.appendChild(t), this.carousel.$container.classList.add("has-dots"), t;\n      }\n    }, {\n      key: "removeList",\n      value: function removeList() {\n        this.$list && (this.$list.parentNode.removeChild(this.$list), this.$list = null), this.carousel.$container.classList.remove("has-dots");\n      }\n    }, {\n      key: "rebuildDots",\n      value: function rebuildDots() {\n        var _this13 = this;\n\n        var t = this.$list;\n        var e = !!t,\n            i = this.carousel.pages.length;\n        if (i < 2) return void (e && this.removeList());\n        e || (t = this.buildList());\n        var s = this.$list.children.length;\n        if (s > i) for (var _t21 = i; _t21 < s; _t21++) {\n          this.$list.removeChild(this.$list.lastChild);\n        } else {\n          var _loop2 = function _loop2(_t22) {\n            var e = document.createElement("li");\n            e.classList.add("carousel__dot"), e.dataset.page = _t22, e.setAttribute("role", "button"), e.setAttribute("tabindex", "0"), e.setAttribute("title", _this13.carousel.localize("{{GOTO}}", [["%d", _t22 + 1]])), e.addEventListener("keydown", function (t) {\n              var i = t.code;\n              var s;\n              "Enter" === i || "NumpadEnter" === i ? s = e : "ArrowRight" === i ? s = e.nextSibling : "ArrowLeft" === i && (s = e.previousSibling), s && s.click();\n            }), _this13.$list.appendChild(e);\n          };\n\n          for (var _t22 = s; _t22 < i; _t22++) {\n            _loop2(_t22);\n          }\n\n          this.setActiveDot();\n        }\n      }\n    }, {\n      key: "setActiveDot",\n      value: function setActiveDot() {\n        if (!this.$list) return;\n        this.$list.childNodes.forEach(function (t) {\n          t.classList.remove("is-selected");\n        });\n        var t = this.$list.childNodes[this.carousel.page];\n        t && t.classList.add("is-selected");\n      }\n    }, {\n      key: "onChange",\n      value: function onChange() {\n        this.setActiveDot();\n      }\n    }, {\n      key: "onRefresh",\n      value: function onRefresh() {\n        this.rebuildDots();\n      }\n    }, {\n      key: "attach",\n      value: function attach() {\n        this.carousel.on(this.events);\n      }\n    }, {\n      key: "detach",\n      value: function detach() {\n        this.removeList(), this.carousel.off(this.events), this.carousel = null;\n      }\n    }]);\n\n    return Dots;\n  }(),\n  Sync: g\n};\nvar m = {\n  slides: [],\n  preload: 0,\n  slidesPerPage: "auto",\n  initialPage: null,\n  initialSlide: null,\n  friction: .92,\n  center: !0,\n  infinite: !0,\n  fill: !0,\n  dragFree: !1,\n  prefix: "",\n  classNames: {\n    viewport: "carousel__viewport",\n    track: "carousel__track",\n    slide: "carousel__slide",\n    slideSelected: "is-selected"\n  },\n  l10n: {\n    NEXT: "Next slide",\n    PREV: "Previous slide",\n    GOTO: "Go to slide #%d"\n  }\n};\n\nvar y = /*#__PURE__*/function (_h2) {\n  _inherits(y, _h2);\n\n  var _super2 = _createSuper(y);\n\n  function y(t) {\n    var _this14;\n\n    var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, y);\n\n    if (_this14 = _super2.call(this, i = e(!0, {}, m, i)), _this14.state = "init", _this14.$container = t, !(_this14.$container instanceof HTMLElement)) throw new Error("No root element provided");\n    _this14.slideNext = u(_this14.slideNext.bind(_assertThisInitialized(_this14)), 250), _this14.slidePrev = u(_this14.slidePrev.bind(_assertThisInitialized(_this14)), 250), _this14.init();\n    return _possibleConstructorReturn(_this14);\n  }\n\n  _createClass(y, [{\n    key: "init",\n    value: function init() {\n      this.pages = [], this.page = this.pageIndex = null, this.prevPage = this.prevPageIndex = null, this.attachPlugins(y.Plugins), this.trigger("init"), this.initLayout(), this.initSlides(), this.updateMetrics(), this.$track && this.pages.length && (this.$track.style.transform = "translate3d(".concat(-1 * this.pages[this.page].left, "px, 0px, 0) scale(1)")), this.manageSlideVisiblity(), this.initPanzoom(), this.state = "ready", this.trigger("ready");\n    }\n  }, {\n    key: "initLayout",\n    value: function initLayout() {\n      var _this$$viewport, _this$$track;\n\n      var t = this.option("prefix"),\n          e = this.option("classNames");\n      this.$viewport = this.option("viewport") || this.$container.querySelector(".".concat(t).concat(e.viewport)), this.$viewport || (this.$viewport = document.createElement("div"), this.$viewport.classList.add(t + e.viewport), (_this$$viewport = this.$viewport).append.apply(_this$$viewport, _toConsumableArray(this.$container.childNodes)), this.$container.appendChild(this.$viewport)), this.$track = this.option("track") || this.$container.querySelector(".".concat(t).concat(e.track)), this.$track || (this.$track = document.createElement("div"), this.$track.classList.add(t + e.track), (_this$$track = this.$track).append.apply(_this$$track, _toConsumableArray(this.$viewport.childNodes)), this.$viewport.appendChild(this.$track));\n    }\n  }, {\n    key: "initSlides",\n    value: function initSlides() {\n      var _this15 = this;\n\n      this.slides = [];\n      this.$viewport.querySelectorAll(".".concat(this.option("prefix")).concat(this.option("classNames.slide"))).forEach(function (t) {\n        var e = {\n          $el: t,\n          isDom: !0\n        };\n        _this15.slides.push(e), _this15.trigger("createSlide", e, _this15.slides.length);\n      }), Array.isArray(this.options.slides) && (this.slides = e(!0, _toConsumableArray(this.slides), this.options.slides));\n    }\n  }, {\n    key: "updateMetrics",\n    value: function updateMetrics() {\n      var _this16 = this;\n\n      var t,\n          e = 0,\n          s = [];\n      this.slides.forEach(function (i, o) {\n        var n = i.$el,\n            a = i.isDom || !t ? _this16.getSlideMetrics(n) : t;\n        i.index = o, i.width = a, i.left = e, t = a, e += a, s.push(o);\n      });\n      var o = Math.max(this.$track.offsetWidth, i(this.$track.getBoundingClientRect().width)),\n          n = getComputedStyle(this.$track);\n      o -= parseFloat(n.paddingLeft) + parseFloat(n.paddingRight), this.contentWidth = e, this.viewportWidth = o;\n      var a = [],\n          r = this.option("slidesPerPage");\n      if (Number.isInteger(r) && e > o) for (var _t23 = 0; _t23 < this.slides.length; _t23 += r) {\n        a.push({\n          indexes: s.slice(_t23, _t23 + r),\n          slides: this.slides.slice(_t23, _t23 + r)\n        });\n      } else {\n        var _t24 = 0,\n            _e8 = 0;\n\n        for (var _i19 = 0; _i19 < this.slides.length; _i19 += 1) {\n          var _s8 = this.slides[_i19];\n          (!a.length || _e8 + _s8.width > o) && (a.push({\n            indexes: [],\n            slides: []\n          }), _t24 = a.length - 1, _e8 = 0), _e8 += _s8.width, a[_t24].indexes.push(_i19), a[_t24].slides.push(_s8);\n        }\n      }\n      var l = this.option("center"),\n          h = this.option("fill");\n      a.forEach(function (t, i) {\n        t.index = i, t.width = t.slides.reduce(function (t, e) {\n          return t + e.width;\n        }, 0), t.left = t.slides[0].left, l && (t.left += .5 * (o - t.width) * -1), h && !_this16.option("infiniteX", _this16.option("infinite")) && e > o && (t.left = Math.max(t.left, 0), t.left = Math.min(t.left, e - o));\n      });\n      var c = [];\n      var d;\n      a.forEach(function (t) {\n        var e = _objectSpread({}, t);\n\n        d && e.left === d.left ? (d.width += e.width, d.slides = [].concat(_toConsumableArray(d.slides), _toConsumableArray(e.slides)), d.indexes = [].concat(_toConsumableArray(d.indexes), _toConsumableArray(e.indexes))) : (e.index = c.length, d = e, c.push(e));\n      }), this.pages = c;\n      var u = this.page;\n\n      if (null === u) {\n        var _t25 = this.option("initialSlide");\n\n        u = null !== _t25 ? this.findPageForSlide(_t25) : this.option("initialPage", 0), c[u] || (u = c.length && u > c.length ? c[c.length - 1].index : 0), this.page = u, this.pageIndex = u;\n      }\n\n      this.updatePanzoom(), this.trigger("refresh");\n    }\n  }, {\n    key: "getSlideMetrics",\n    value: function getSlideMetrics(t) {\n      if (!t) {\n        var _t$classList;\n\n        var _e9 = this.slides[0];\n        (t = document.createElement("div")).dataset.isTestEl = 1, t.style.visibility = "hidden", t.classList.add(this.option("prefix") + this.option("classNames.slide")), _e9.customClass && (_t$classList = t.classList).add.apply(_t$classList, _toConsumableArray(_e9.customClass.split(" "))), this.$track.prepend(t);\n      }\n\n      var e = Math.max(t.offsetWidth, i(t.getBoundingClientRect().width));\n      var s = t.currentStyle || window.getComputedStyle(t);\n      return e = e + (parseFloat(s.marginLeft) || 0) + (parseFloat(s.marginRight) || 0), t.dataset.isTestEl && t.remove(), e;\n    }\n  }, {\n    key: "findPageForSlide",\n    value: function findPageForSlide(t) {\n      var e = this.pages.find(function (e) {\n        return e.indexes.indexOf(t) > -1;\n      });\n      return e ? e.index : null;\n    }\n  }, {\n    key: "slideNext",\n    value: function slideNext() {\n      this.slideTo(this.pageIndex + 1);\n    }\n  }, {\n    key: "slidePrev",\n    value: function slidePrev() {\n      this.slideTo(this.pageIndex - 1);\n    }\n  }, {\n    key: "slideTo",\n    value: function slideTo(t) {\n      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _e$x = e.x,\n          i = _e$x === void 0 ? -1 * this.setPage(t, !0) : _e$x,\n          _e$y = e.y,\n          s = _e$y === void 0 ? 0 : _e$y,\n          _e$friction = e.friction,\n          o = _e$friction === void 0 ? this.option("friction") : _e$friction;\n      this.Panzoom.content.x === i && !this.Panzoom.velocity.x && o || (this.Panzoom.panTo({\n        x: i,\n        y: s,\n        friction: o,\n        ignoreBounds: !0\n      }), "ready" === this.state && "ready" === this.Panzoom.state && this.trigger("settle"));\n    }\n  }, {\n    key: "initPanzoom",\n    value: function initPanzoom() {\n      var _this17 = this;\n\n      this.Panzoom && this.Panzoom.destroy();\n      var t = e(!0, {}, {\n        content: this.$track,\n        wrapInner: !1,\n        resizeParent: !1,\n        zoom: !1,\n        click: !1,\n        lockAxis: "x",\n        x: this.pages.length ? -1 * this.pages[this.page].left : 0,\n        centerOnStart: !1,\n        textSelection: function textSelection() {\n          return _this17.option("textSelection", !1);\n        },\n        panOnlyZoomed: function panOnlyZoomed() {\n          return this.content.width <= this.viewport.width;\n        }\n      }, this.option("Panzoom"));\n      this.Panzoom = new d(this.$container, t), this.Panzoom.on({\n        "*": function _(t) {\n          for (var _len5 = arguments.length, e = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n            e[_key5 - 1] = arguments[_key5];\n          }\n\n          return _this17.trigger.apply(_this17, ["Panzoom.".concat(t)].concat(e));\n        },\n        afterUpdate: function afterUpdate() {\n          _this17.updatePage();\n        },\n        beforeTransform: this.onBeforeTransform.bind(this),\n        touchEnd: this.onTouchEnd.bind(this),\n        endAnimation: function endAnimation() {\n          _this17.trigger("settle");\n        }\n      }), this.updateMetrics(), this.manageSlideVisiblity();\n    }\n  }, {\n    key: "updatePanzoom",\n    value: function updatePanzoom() {\n      this.Panzoom && (this.Panzoom.content = _objectSpread(_objectSpread({}, this.Panzoom.content), {}, {\n        fitWidth: this.contentWidth,\n        origWidth: this.contentWidth,\n        width: this.contentWidth\n      }), this.pages.length > 1 && this.option("infiniteX", this.option("infinite")) ? this.Panzoom.boundX = null : this.pages.length && (this.Panzoom.boundX = {\n        from: -1 * this.pages[this.pages.length - 1].left,\n        to: -1 * this.pages[0].left\n      }), this.option("infiniteY", this.option("infinite")) ? this.Panzoom.boundY = null : this.Panzoom.boundY = {\n        from: 0,\n        to: 0\n      }, this.Panzoom.handleCursor());\n    }\n  }, {\n    key: "manageSlideVisiblity",\n    value: function manageSlideVisiblity() {\n      var _this18 = this;\n\n      var t = this.contentWidth,\n          e = this.viewportWidth;\n      var i = this.Panzoom ? -1 * this.Panzoom.content.x : this.pages.length ? this.pages[this.page].left : 0;\n      var s = this.option("preload"),\n          o = this.option("infiniteX", this.option("infinite")),\n          n = parseFloat(getComputedStyle(this.$viewport, null).getPropertyValue("padding-left")),\n          a = parseFloat(getComputedStyle(this.$viewport, null).getPropertyValue("padding-right"));\n      this.slides.forEach(function (r) {\n        var l,\n            h,\n            c = 0;\n        l = i - n, h = i + e + a, l -= s * (e + n + a), h += s * (e + n + a);\n        var d = r.left + r.width > l && r.left < h;\n        l = i + t - n, h = i + t + e + a, l -= s * (e + n + a);\n        var u = o && r.left + r.width > l && r.left < h;\n        l = i - t - n, h = i - t + e + a, l -= s * (e + n + a);\n        var f = o && r.left + r.width > l && r.left < h;\n        u || d || f ? (_this18.createSlideEl(r), d && (c = 0), u && (c = -1), f && (c = 1), r.left + r.width > i && r.left <= i + e + a && (c = 0)) : _this18.removeSlideEl(r), r.hasDiff = c;\n      });\n      var r = 0,\n          l = 0;\n      this.slides.forEach(function (e, i) {\n        var s = 0;\n        e.$el ? (i !== r || e.hasDiff ? s = l + e.hasDiff * t : l = 0, e.$el.style.left = Math.abs(s) > .1 ? "".concat(l + e.hasDiff * t, "px") : "", r++) : l += e.width;\n      }), this.markSelectedSlides();\n    }\n  }, {\n    key: "createSlideEl",\n    value: function createSlideEl(t) {\n      var _e$classList2;\n\n      if (!t) return;\n\n      if (t.$el) {\n        if (parseInt(t.$el.dataset.index, 10) !== t.index) {\n          t.$el.dataset.index = t.index;\n\n          var _e10;\n\n          t.$el.querySelectorAll("[data-lazy-src]").forEach(function (t) {\n            var e = t.dataset.lazySrc;\n            t instanceof HTMLImageElement ? t.src = e : t.style.backgroundImage = "url(\'".concat(e, "\')");\n          }), (_e10 = t.$el.dataset.lazySrc) && (t.$el.style.backgroundImage = "url(\'".concat(_e10, "\')")), t.state = "ready";\n        }\n\n        return;\n      }\n\n      var e = document.createElement("div");\n      e.dataset.index = t.index, e.classList.add(this.option("prefix") + this.option("classNames.slide")), t.customClass && (_e$classList2 = e.classList).add.apply(_e$classList2, _toConsumableArray(t.customClass.split(" "))), t.html && (e.innerHTML = t.html);\n      var i = [];\n      this.slides.forEach(function (t, e) {\n        t.$el && i.push(e);\n      });\n      var s = t.index;\n      var o = null;\n\n      if (i.length) {\n        var _t26 = i.reduce(function (t, e) {\n          return Math.abs(e - s) < Math.abs(t - s) ? e : t;\n        });\n\n        o = this.slides[_t26];\n      }\n\n      return this.$track.insertBefore(e, o && o.$el ? o.index < t.index ? o.$el.nextSibling : o.$el : null), t.$el = e, this.trigger("createSlide", t, s), t;\n    }\n  }, {\n    key: "removeSlideEl",\n    value: function removeSlideEl(t) {\n      t.$el && !t.isDom && (this.trigger("removeSlide", t), t.$el.remove(), t.$el = null);\n    }\n  }, {\n    key: "markSelectedSlides",\n    value: function markSelectedSlides() {\n      var _this19 = this;\n\n      var t = this.option("classNames.slideSelected"),\n          e = "aria-hidden";\n      this.slides.forEach(function (i, s) {\n        var o = i.$el;\n        if (!o) return;\n        var n = _this19.pages[_this19.page];\n        n && n.indexes && n.indexes.indexOf(s) > -1 ? (t && !o.classList.contains(t) && (o.classList.add(t), _this19.trigger("selectSlide", i)), o.removeAttribute(e)) : (t && o.classList.contains(t) && (o.classList.remove(t), _this19.trigger("unselectSlide", i)), o.setAttribute(e, !0));\n      });\n    }\n  }, {\n    key: "updatePage",\n    value: function updatePage() {\n      this.updateMetrics(), this.slideTo(this.page, {\n        friction: 0\n      });\n    }\n  }, {\n    key: "onBeforeTransform",\n    value: function onBeforeTransform() {\n      this.option("infiniteX", this.option("infinite")) && this.manageInfiniteTrack(), this.manageSlideVisiblity();\n    }\n  }, {\n    key: "manageInfiniteTrack",\n    value: function manageInfiniteTrack() {\n      var t = this.contentWidth,\n          e = this.viewportWidth;\n      if (!this.option("infiniteX", this.option("infinite")) || this.pages.length < 2 || t < e) return;\n      var i = this.Panzoom;\n      var s = !1;\n      return i.content.x < -1 * (t - e) && (i.content.x += t, this.pageIndex = this.pageIndex - this.pages.length, s = !0), i.content.x > e && (i.content.x -= t, this.pageIndex = this.pageIndex + this.pages.length, s = !0), s && "pointerdown" === i.state && i.resetDragPosition(), s;\n    }\n  }, {\n    key: "onTouchEnd",\n    value: function onTouchEnd(t, e) {\n      var i = this.option("dragFree");\n      if (!i && this.pages.length > 1 && t.dragOffset.time < 350 && Math.abs(t.dragOffset.y) < 1 && Math.abs(t.dragOffset.x) > 5) this[t.dragOffset.x < 0 ? "slideNext" : "slidePrev"]();else if (i) {\n        var _this$getPageFromPosi = this.getPageFromPosition(-1 * t.transform.x),\n            _this$getPageFromPosi2 = _slicedToArray(_this$getPageFromPosi, 2),\n            _e11 = _this$getPageFromPosi2[1];\n\n        this.setPage(_e11);\n      } else this.slideToClosest();\n    }\n  }, {\n    key: "slideToClosest",\n    value: function slideToClosest() {\n      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _this$getPageFromPosi3 = this.getPageFromPosition(-1 * this.Panzoom.content.x),\n          _this$getPageFromPosi4 = _slicedToArray(_this$getPageFromPosi3, 2),\n          e = _this$getPageFromPosi4[1];\n\n      this.slideTo(e, t);\n    }\n  }, {\n    key: "getPageFromPosition",\n    value: function getPageFromPosition(t) {\n      var e = this.pages.length;\n      this.option("center") && (t += .5 * this.viewportWidth);\n      var i = Math.floor(t / this.contentWidth);\n      t -= i * this.contentWidth;\n      var s = this.slides.find(function (e) {\n        return e.left <= t && e.left + e.width > t;\n      });\n\n      if (s) {\n        var _t27 = this.findPageForSlide(s.index);\n\n        return [_t27, _t27 + i * e];\n      }\n\n      return [0, 0];\n    }\n  }, {\n    key: "setPage",\n    value: function setPage(t, e) {\n      var i = 0,\n          s = parseInt(t, 10) || 0;\n      var o = this.page,\n          n = this.pageIndex,\n          a = this.pages.length,\n          r = this.contentWidth,\n          l = this.viewportWidth;\n\n      if (t = (s % a + a) % a, this.option("infiniteX", this.option("infinite")) && r > l) {\n        var _o7 = Math.floor(s / a) || 0,\n            _n5 = r;\n\n        if (i = this.pages[t].left + _o7 * _n5, !0 === e && a > 2) {\n          var _t28 = -1 * this.Panzoom.content.x;\n\n          var _e12 = i - _n5,\n              _o8 = i + _n5,\n              _r = Math.abs(_t28 - i),\n              _l = Math.abs(_t28 - _e12),\n              _h3 = Math.abs(_t28 - _o8);\n\n          _h3 < _r && _h3 <= _l ? (i = _o8, s += a) : _l < _r && _l < _h3 && (i = _e12, s -= a);\n        }\n      } else t = s = Math.max(0, Math.min(s, a - 1)), i = this.pages.length ? this.pages[t].left : 0;\n\n      return this.page = t, this.pageIndex = s, null !== o && t !== o && (this.prevPage = o, this.prevPageIndex = n, this.trigger("change", t, o)), i;\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      var _this20 = this;\n\n      this.state = "destroy", this.slides.forEach(function (t) {\n        _this20.removeSlideEl(t);\n      }), this.slides = [], this.Panzoom.destroy(), this.detachPlugins();\n    }\n  }]);\n\n  return y;\n}(h);\n\ny.version = "4.0.9", y.Plugins = p;\nvar b = !("undefined" == typeof window || !window.document || !window.document.createElement);\n\nvar v = /*#__PURE__*/function () {\n  function v(t) {\n    _classCallCheck(this, v);\n\n    this.fancybox = t, this.$container = null, this.state = "init";\n\n    for (var _i20 = 0, _arr4 = ["onPrepare", "onClosing", "onKeydown"]; _i20 < _arr4.length; _i20++) {\n      var _t29 = _arr4[_i20];\n      this[_t29] = this[_t29].bind(this);\n    }\n\n    this.events = {\n      prepare: this.onPrepare,\n      closing: this.onClosing,\n      keydown: this.onKeydown\n    };\n  }\n\n  _createClass(v, [{\n    key: "onPrepare",\n    value: function onPrepare() {\n      this.getSlides().length < this.fancybox.option("Thumbs.minSlideCount") ? this.state = "disabled" : !0 === this.fancybox.option("Thumbs.autoStart") && this.fancybox.Carousel.Panzoom.content.height >= this.fancybox.option("Thumbs.minScreenHeight") && this.build();\n    }\n  }, {\n    key: "onClosing",\n    value: function onClosing() {\n      this.Carousel && this.Carousel.Panzoom.detachEvents();\n    }\n  }, {\n    key: "onKeydown",\n    value: function onKeydown(t, e) {\n      e === t.option("Thumbs.key") && this.toggle();\n    }\n  }, {\n    key: "build",\n    value: function build() {\n      var _this21 = this;\n\n      if (this.$container) return;\n      var t = document.createElement("div");\n      t.classList.add("fancybox__thumbs"), this.fancybox.$carousel.parentNode.insertBefore(t, this.fancybox.$carousel.nextSibling), this.Carousel = new y(t, e(!0, {\n        Dots: !1,\n        Navigation: !1,\n        Sync: {\n          friction: 0\n        },\n        infinite: !1,\n        center: !0,\n        fill: !0,\n        dragFree: !0,\n        slidesPerPage: 1,\n        preload: 1\n      }, this.fancybox.option("Thumbs.Carousel"), {\n        Sync: {\n          target: this.fancybox.Carousel\n        },\n        slides: this.getSlides()\n      })), this.Carousel.Panzoom.on("wheel", function (t, e) {\n        e.preventDefault(), _this21.fancybox[e.deltaY < 0 ? "prev" : "next"]();\n      }), this.$container = t, this.state = "visible";\n    }\n  }, {\n    key: "getSlides",\n    value: function getSlides() {\n      var t = [];\n\n      var _iterator3 = _createForOfIteratorHelper(this.fancybox.items),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _e13 = _step3.value;\n          var _i21 = _e13.thumb;\n          _i21 && t.push({\n            html: "<div class=\\"fancybox__thumb\\" style=\\"background-image:url(\'".concat(_i21, "\')\\"></div>"),\n            customClass: "has-thumb has-".concat(_e13.type || "image")\n          });\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return t;\n    }\n  }, {\n    key: "toggle",\n    value: function toggle() {\n      "visible" === this.state ? this.hide() : "hidden" === this.state ? this.show() : this.build();\n    }\n  }, {\n    key: "show",\n    value: function show() {\n      "hidden" === this.state && (this.$container.style.display = "", this.Carousel.Panzoom.attachEvents(), this.state = "visible");\n    }\n  }, {\n    key: "hide",\n    value: function hide() {\n      "visible" === this.state && (this.Carousel.Panzoom.detachEvents(), this.$container.style.display = "none", this.state = "hidden");\n    }\n  }, {\n    key: "cleanup",\n    value: function cleanup() {\n      this.Carousel && (this.Carousel.destroy(), this.Carousel = null), this.$container && (this.$container.remove(), this.$container = null), this.state = "init";\n    }\n  }, {\n    key: "attach",\n    value: function attach() {\n      this.fancybox.on(this.events);\n    }\n  }, {\n    key: "detach",\n    value: function detach() {\n      this.fancybox.off(this.events), this.cleanup();\n    }\n  }]);\n\n  return v;\n}();\n\nv.defaults = {\n  minSlideCount: 2,\n  minScreenHeight: 500,\n  autoStart: !0,\n  key: "t",\n  Carousel: {}\n};\n\nvar x = function x(t) {\n  return Object.entries(t).map(function (t) {\n    return t.map(encodeURIComponent).join("=");\n  }).join("&");\n},\n    w = {\n  video: {\n    autoplay: !0,\n    ratio: 16 / 9\n  },\n  youtube: {\n    autohide: 1,\n    fs: 1,\n    rel: 0,\n    hd: 1,\n    wmode: "transparent",\n    enablejsapi: 1,\n    html5: 1\n  },\n  vimeo: {\n    hd: 1,\n    show_title: 1,\n    show_byline: 1,\n    show_portrait: 0,\n    fullscreen: 1\n  },\n  html5video: {\n    tpl: \'<video class="fancybox__html5video" playsinline controls controlsList="nodownload" poster="{{poster}}">\\n  <source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\\\'t support embedded videos.</video>\',\n    format: ""\n  }\n};\n\nvar $ = /*#__PURE__*/function () {\n  function $(t) {\n    _classCallCheck(this, $);\n\n    this.fancybox = t;\n\n    for (var _i22 = 0, _arr5 = ["onInit", "onReady", "onCreateSlide", "onRemoveSlide", "onSelectSlide", "onUnselectSlide", "onRefresh", "onMessage"]; _i22 < _arr5.length; _i22++) {\n      var _t30 = _arr5[_i22];\n      this[_t30] = this[_t30].bind(this);\n    }\n\n    this.events = {\n      init: this.onInit,\n      ready: this.onReady,\n      "Carousel.createSlide": this.onCreateSlide,\n      "Carousel.removeSlide": this.onRemoveSlide,\n      "Carousel.selectSlide": this.onSelectSlide,\n      "Carousel.unselectSlide": this.onUnselectSlide,\n      "Carousel.refresh": this.onRefresh\n    };\n  }\n\n  _createClass($, [{\n    key: "onInit",\n    value: function onInit() {\n      var _iterator4 = _createForOfIteratorHelper(this.fancybox.items),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _t31 = _step4.value;\n          this.processType(_t31);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: "processType",\n    value: function processType(t) {\n      if (t.html) return t.src = t.html, t.type = "html", void delete t.html;\n      var i = t.src || "";\n      var s = t.type || this.fancybox.options.type,\n          o = null;\n\n      if (!i || "string" == typeof i) {\n        if (o = i.match(/(?:youtube\\.com|youtu\\.be|youtube\\-nocookie\\.com)\\/(?:watch\\?(?:.*&)?v=|v\\/|u\\/|embed\\/?)?(videoseries\\?list=(?:.*)|[\\w-]{11}|\\?listType=(?:.*)&list=(?:.*))(?:.*)/i)) {\n          var _e14 = x(this.fancybox.option("Html.youtube")),\n              _i23 = encodeURIComponent(o[1]);\n\n          t.videoId = _i23, t.src = "https://www.youtube-nocookie.com/embed/".concat(_i23, "?").concat(_e14), t.thumb = t.thumb || "https://i.ytimg.com/vi/".concat(_i23, "/mqdefault.jpg"), t.vendor = "youtube", s = "video";\n        } else if (o = i.match(/^.+vimeo.com\\/(?:\\/)?([\\d]+)(.*)?/)) {\n          var _e15 = x(this.fancybox.option("Html.vimeo")),\n              _i24 = encodeURIComponent(o[1]);\n\n          t.videoId = _i24, t.src = "https://player.vimeo.com/video/".concat(_i24, "?").concat(_e15), t.vendor = "vimeo", s = "video";\n        } else (o = i.match(/(?:maps\\.)?google\\.([a-z]{2,3}(?:\\.[a-z]{2})?)\\/(?:(?:(?:maps\\/(?:place\\/(?:.*)\\/)?\\@(.*),(\\d+.?\\d+?)z))|(?:\\?ll=))(.*)?/i)) ? (t.src = "//maps.google.".concat(o[1], "/?ll=").concat((o[2] ? o[2] + "&z=" + Math.floor(o[3]) + (o[4] ? o[4].replace(/^\\//, "&") : "") : o[4] + "").replace(/\\?/, "&"), "&output=").concat(o[4] && o[4].indexOf("layer=c") > 0 ? "svembed" : "embed"), s = "map") : (o = i.match(/(?:maps\\.)?google\\.([a-z]{2,3}(?:\\.[a-z]{2})?)\\/(?:maps\\/search\\/)(.*)/i)) && (t.src = "//maps.google.".concat(o[1], "/maps?q=").concat(o[2].replace("query=", "q=").replace("api=1", ""), "&output=embed"), s = "map");\n\n        s || ("#" === i.charAt(0) ? s = "inline" : (o = i.match(/\\.(mp4|mov|ogv|webm)((\\?|#).*)?$/i)) ? (s = "html5video", t.format = t.format || "video/" + ("ogv" === o[1] ? "ogg" : o[1])) : i.match(/(^data:image\\/[a-z0-9+\\/=]*,)|(\\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\\?|#).*)?$)/i) ? s = "image" : i.match(/\\.(pdf)((\\?|#).*)?$/i) && (s = "pdf")), t.type = s || this.fancybox.option("defaultType", "image"), "html5video" !== s && "video" !== s || (t.video = e({}, this.fancybox.option("Html.video"), t.video), t._width && t._height ? t.ratio = parseFloat(t._width) / parseFloat(t._height) : t.ratio = t.ratio || t.video.ratio || w.video.ratio);\n      }\n    }\n  }, {\n    key: "onReady",\n    value: function onReady() {\n      var _this22 = this;\n\n      this.fancybox.Carousel.slides.forEach(function (t) {\n        t.$el && (_this22.setContent(t), t.index === _this22.fancybox.getSlide().index && _this22.playVideo(t));\n      });\n    }\n  }, {\n    key: "onCreateSlide",\n    value: function onCreateSlide(t, e, i) {\n      "ready" === this.fancybox.state && this.setContent(i);\n    }\n  }, {\n    key: "loadInlineContent",\n    value: function loadInlineContent(t) {\n      var e;\n      if (t.src instanceof HTMLElement) e = t.src;else if ("string" == typeof t.src) {\n        var _i25 = t.src.split("#", 2),\n            _s9 = 2 === _i25.length && "" === _i25[0] ? _i25[1] : _i25[0];\n\n        e = document.getElementById(_s9);\n      }\n\n      if (e) {\n        if ("clone" === t.type || e.$placeHolder) {\n          e = e.cloneNode(!0);\n\n          var _i26 = e.getAttribute("id");\n\n          _i26 = _i26 ? "".concat(_i26, "--clone") : "clone-".concat(this.fancybox.id, "-").concat(t.index), e.setAttribute("id", _i26);\n        } else {\n          var _t32 = document.createElement("div");\n\n          _t32.classList.add("fancybox-placeholder"), e.parentNode.insertBefore(_t32, e), e.$placeHolder = _t32;\n        }\n\n        this.fancybox.setContent(t, e);\n      } else this.fancybox.setError(t, "{{ELEMENT_NOT_FOUND}}");\n    }\n  }, {\n    key: "loadAjaxContent",\n    value: function loadAjaxContent(t) {\n      var e = this.fancybox,\n          i = new XMLHttpRequest();\n      e.showLoading(t), i.onreadystatechange = function () {\n        i.readyState === XMLHttpRequest.DONE && "ready" === e.state && (e.hideLoading(t), 200 === i.status ? e.setContent(t, i.responseText) : e.setError(t, 404 === i.status ? "{{AJAX_NOT_FOUND}}" : "{{AJAX_FORBIDDEN}}"));\n      }, i.open("GET", t.src), i.setRequestHeader("X-Requested-With", "XMLHttpRequest"), i.send(t.ajax || null), t.xhr = i;\n    }\n  }, {\n    key: "loadIframeContent",\n    value: function loadIframeContent(t) {\n      var _this23 = this;\n\n      var e = this.fancybox,\n          i = document.createElement("iframe");\n      if (i.className = "fancybox__iframe", i.setAttribute("id", "fancybox__iframe_".concat(e.id, "_").concat(t.index)), i.setAttribute("allow", "autoplay; fullscreen"), i.setAttribute("scrolling", "auto"), t.$iframe = i, "iframe" !== t.type || !1 === t.preload) return i.setAttribute("src", t.src), this.fancybox.setContent(t, i), void this.resizeIframe(t);\n      e.showLoading(t);\n      var s = document.createElement("div");\n      s.style.visibility = "hidden", this.fancybox.setContent(t, s), s.appendChild(i), i.onerror = function () {\n        e.setError(t, "{{IFRAME_ERROR}}");\n      }, i.onload = function () {\n        e.hideLoading(t);\n        var s = !1;\n        i.isReady || (i.isReady = !0, s = !0), i.src.length && (i.parentNode.style.visibility = "", _this23.resizeIframe(t), s && e.revealContent(t));\n      }, i.setAttribute("src", t.src);\n    }\n  }, {\n    key: "setAspectRatio",\n    value: function setAspectRatio(t) {\n      var e = t.$content,\n          i = t.ratio;\n      if (!e) return;\n      var s = t._width,\n          o = t._height;\n\n      if (i || s && o) {\n        Object.assign(e.style, {\n          width: s && o ? "100%" : "",\n          height: s && o ? "100%" : "",\n          maxWidth: "",\n          maxHeight: ""\n        });\n        var _t33 = e.offsetWidth,\n            _n6 = e.offsetHeight;\n\n        if (s = s || _t33, o = o || _n6, s > _t33 || o > _n6) {\n          var _e16 = Math.min(_t33 / s, _n6 / o);\n\n          s *= _e16, o *= _e16;\n        }\n\n        Math.abs(s / o - i) > .01 && (i < s / o ? s = o * i : o = s / i), Object.assign(e.style, {\n          width: "".concat(s, "px"),\n          height: "".concat(o, "px")\n        });\n      }\n    }\n  }, {\n    key: "resizeIframe",\n    value: function resizeIframe(t) {\n      var e = t.$iframe;\n      if (!e) return;\n      var i = t._width || 0,\n          s = t._height || 0;\n      i && s && (t.autoSize = !1);\n      var o = e.parentNode,\n          n = o.style;\n      if (!1 !== t.preload && !1 !== t.autoSize) try {\n        var _t34 = window.getComputedStyle(o),\n            _a3 = parseFloat(_t34.paddingLeft) + parseFloat(_t34.paddingRight),\n            _r2 = parseFloat(_t34.paddingTop) + parseFloat(_t34.paddingBottom),\n            _l2 = e.contentWindow.document,\n            _h4 = _l2.getElementsByTagName("html")[0],\n            _c = _l2.body;\n\n        _c.style.overflow = "hidden", i = i || _h4.scrollWidth + _a3, n.width = "".concat(i, "px"), _c.style.overflow = "", n.flex = "0 0 auto", n.height = "".concat(_c.scrollHeight, "px"), s = _h4.scrollHeight + _r2;\n      } catch (t) {}\n\n      if (i || s) {\n        var _t35 = {\n          flex: "0 1 auto"\n        };\n        i && (_t35.width = "".concat(i, "px")), s && (_t35.height = "".concat(s, "px")), Object.assign(n, _t35);\n      }\n    }\n  }, {\n    key: "onRefresh",\n    value: function onRefresh(t, e) {\n      var _this24 = this;\n\n      e.slides.forEach(function (t) {\n        t.$el && (t.$iframe && _this24.resizeIframe(t), t.ratio && _this24.setAspectRatio(t));\n      });\n    }\n  }, {\n    key: "setContent",\n    value: function setContent(t) {\n      if (t && !t.isDom) {\n        switch (t.type) {\n          case "html":\n            this.fancybox.setContent(t, t.src);\n            break;\n\n          case "html5video":\n            this.fancybox.setContent(t, this.fancybox.option("Html.html5video.tpl").replace(/\\{\\{src\\}\\}/gi, t.src).replace("{{format}}", t.format || t.html5video && t.html5video.format || "").replace("{{poster}}", t.poster || t.thumb || ""));\n            break;\n\n          case "inline":\n          case "clone":\n            this.loadInlineContent(t);\n            break;\n\n          case "ajax":\n            this.loadAjaxContent(t);\n            break;\n\n          case "iframe":\n          case "pdf":\n          case "video":\n          case "map":\n            this.loadIframeContent(t);\n        }\n\n        t.ratio && this.setAspectRatio(t);\n      }\n    }\n  }, {\n    key: "onSelectSlide",\n    value: function onSelectSlide(t, e, i) {\n      "ready" === t.state && this.playVideo(i);\n    }\n  }, {\n    key: "playVideo",\n    value: function playVideo(t) {\n      if ("html5video" === t.type && t.video.autoplay) try {\n        var _e17 = t.$el.querySelector("video");\n\n        if (_e17) {\n          var _t36 = _e17.play();\n\n          void 0 !== _t36 && _t36.then(function () {}).catch(function (t) {\n            _e17.muted = !0, _e17.play();\n          });\n        }\n      } catch (t) {}\n      if ("video" !== t.type || !t.$iframe || !t.$iframe.contentWindow) return;\n\n      var e = function e() {\n        if ("done" === t.state && t.$iframe && t.$iframe.contentWindow) {\n          var _e18;\n\n          if (t.$iframe.isReady) return t.video && t.video.autoplay && (_e18 = "youtube" == t.vendor ? {\n            event: "command",\n            func: "playVideo"\n          } : {\n            method: "play",\n            value: "true"\n          }), void (_e18 && t.$iframe.contentWindow.postMessage(JSON.stringify(_e18), "*"));\n          "youtube" === t.vendor && (_e18 = {\n            event: "listening",\n            id: t.$iframe.getAttribute("id")\n          }, t.$iframe.contentWindow.postMessage(JSON.stringify(_e18), "*"));\n        }\n\n        t.poller = setTimeout(e, 250);\n      };\n\n      e();\n    }\n  }, {\n    key: "onUnselectSlide",\n    value: function onUnselectSlide(t, e, i) {\n      if ("html5video" === i.type) {\n        try {\n          i.$el.querySelector("video").pause();\n        } catch (t) {}\n\n        return;\n      }\n\n      var s = !1;\n      "vimeo" == i.vendor ? s = {\n        method: "pause",\n        value: "true"\n      } : "youtube" === i.vendor && (s = {\n        event: "command",\n        func: "pauseVideo"\n      }), s && i.$iframe && i.$iframe.contentWindow && i.$iframe.contentWindow.postMessage(JSON.stringify(s), "*"), clearTimeout(i.poller);\n    }\n  }, {\n    key: "onRemoveSlide",\n    value: function onRemoveSlide(t, e, i) {\n      i.xhr && (i.xhr.abort(), i.xhr = null), i.$iframe && (i.$iframe.onload = i.$iframe.onerror = null, i.$iframe.src = "//about:blank", i.$iframe = null);\n      var s = i.$content;\n      "inline" === i.type && s && (s.classList.remove("fancybox__content"), "none" !== s.style.display && (s.style.display = "none")), i.$closeButton && (i.$closeButton.remove(), i.$closeButton = null);\n      var o = s && s.$placeHolder;\n      o && (o.parentNode.insertBefore(s, o), o.remove(), s.$placeHolder = null);\n    }\n  }, {\n    key: "onMessage",\n    value: function onMessage(t) {\n      try {\n        var _e19 = JSON.parse(t.data);\n\n        if ("https://player.vimeo.com" === t.origin) {\n          if ("ready" === _e19.event) {\n            var _iterator5 = _createForOfIteratorHelper(document.getElementsByClassName("fancybox__iframe")),\n                _step5;\n\n            try {\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                var _e20 = _step5.value;\n                _e20.contentWindow === t.source && (_e20.isReady = 1);\n              }\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n          }\n        } else "https://www.youtube-nocookie.com" === t.origin && "onReady" === _e19.event && (document.getElementById(_e19.id).isReady = 1);\n      } catch (t) {}\n    }\n  }, {\n    key: "attach",\n    value: function attach() {\n      this.fancybox.on(this.events), window.addEventListener("message", this.onMessage, !1);\n    }\n  }, {\n    key: "detach",\n    value: function detach() {\n      this.fancybox.off(this.events), window.removeEventListener("message", this.onMessage, !1);\n    }\n  }]);\n\n  return $;\n}();\n\n$.defaults = w;\n\nvar C = /*#__PURE__*/function () {\n  function C(t) {\n    _classCallCheck(this, C);\n\n    this.fancybox = t;\n\n    for (var _i27 = 0, _arr6 = ["onReady", "onClosing", "onDone", "onPageChange", "onCreateSlide", "onRemoveSlide", "onImageStatusChange"]; _i27 < _arr6.length; _i27++) {\n      var _t37 = _arr6[_i27];\n      this[_t37] = this[_t37].bind(this);\n    }\n\n    this.events = {\n      ready: this.onReady,\n      closing: this.onClosing,\n      done: this.onDone,\n      "Carousel.change": this.onPageChange,\n      "Carousel.createSlide": this.onCreateSlide,\n      "Carousel.removeSlide": this.onRemoveSlide\n    };\n  }\n\n  _createClass(C, [{\n    key: "onReady",\n    value: function onReady() {\n      var _this25 = this;\n\n      this.fancybox.Carousel.slides.forEach(function (t) {\n        t.$el && _this25.setContent(t);\n      });\n    }\n  }, {\n    key: "onDone",\n    value: function onDone(t, e) {\n      this.handleCursor(e);\n    }\n  }, {\n    key: "onClosing",\n    value: function onClosing(t) {\n      clearTimeout(this.clickTimer), this.clickTimer = null, t.Carousel.slides.forEach(function (t) {\n        t.$image && (t.state = "destroy"), t.Panzoom && t.Panzoom.detachEvents();\n      }), "closing" === this.fancybox.state && this.canZoom(t.getSlide()) && this.zoomOut();\n    }\n  }, {\n    key: "onCreateSlide",\n    value: function onCreateSlide(t, e, i) {\n      "ready" === this.fancybox.state && this.setContent(i);\n    }\n  }, {\n    key: "onRemoveSlide",\n    value: function onRemoveSlide(t, e, i) {\n      i.$image && (i.$el.classList.remove(t.option("Image.canZoomInClass")), i.$image.remove(), i.$image = null), i.Panzoom && (i.Panzoom.destroy(), i.Panzoom = null), i.$el && i.$el.dataset && delete i.$el.dataset.imageFit;\n    }\n  }, {\n    key: "setContent",\n    value: function setContent(t) {\n      var _this26 = this;\n\n      if (t.isDom || t.html || t.type && "image" !== t.type) return;\n      if (t.$image) return;\n      t.type = "image", t.state = "loading";\n      var e = document.createElement("div");\n      e.style.visibility = "hidden";\n      var i = document.createElement("img");\n      i.addEventListener("load", function (e) {\n        e.stopImmediatePropagation(), _this26.onImageStatusChange(t);\n      }), i.addEventListener("error", function () {\n        _this26.onImageStatusChange(t);\n      }), i.src = t.src, i.alt = "", i.draggable = !1, i.classList.add("fancybox__image"), t.srcset && i.setAttribute("srcset", t.srcset), t.sizes && i.setAttribute("sizes", t.sizes), t.$image = i;\n      var s = this.fancybox.option("Image.wrap");\n\n      if (s) {\n        var _o9 = document.createElement("div");\n\n        _o9.classList.add("string" == typeof s ? s : "fancybox__image-wrap"), _o9.appendChild(i), e.appendChild(_o9), t.$wrap = _o9;\n      } else e.appendChild(i);\n\n      t.$el.dataset.imageFit = this.fancybox.option("Image.fit"), this.fancybox.setContent(t, e), i.complete || i.error ? this.onImageStatusChange(t) : this.fancybox.showLoading(t);\n    }\n  }, {\n    key: "onImageStatusChange",\n    value: function onImageStatusChange(t) {\n      var _this27 = this;\n\n      var e = t.$image;\n      e && "loading" === t.state && (e.complete && e.naturalWidth && e.naturalHeight ? (this.fancybox.hideLoading(t), "contain" === this.fancybox.option("Image.fit") && this.initSlidePanzoom(t), t.$el.addEventListener("wheel", function (e) {\n        return _this27.onWheel(t, e);\n      }, {\n        passive: !1\n      }), t.$content.addEventListener("click", function (e) {\n        return _this27.onClick(t, e);\n      }, {\n        passive: !1\n      }), this.revealContent(t)) : this.fancybox.setError(t, "{{IMAGE_ERROR}}"));\n    }\n  }, {\n    key: "initSlidePanzoom",\n    value: function initSlidePanzoom(t) {\n      var _this28 = this;\n\n      t.Panzoom || (t.Panzoom = new d(t.$el, e(!0, this.fancybox.option("Image.Panzoom", {}), {\n        viewport: t.$wrap,\n        content: t.$image,\n        wrapInner: !1,\n        textSelection: !0,\n        touch: this.fancybox.option("Image.touch"),\n        panOnlyZoomed: !0,\n        click: !1,\n        wheel: !1\n      })), t.Panzoom.on("startAnimation", function () {\n        _this28.fancybox.trigger("Image.startAnimation", t);\n      }), t.Panzoom.on("endAnimation", function () {\n        "zoomIn" === t.state && _this28.fancybox.done(t), _this28.handleCursor(t), _this28.fancybox.trigger("Image.endAnimation", t);\n      }), t.Panzoom.on("afterUpdate", function () {\n        _this28.handleCursor(t), _this28.fancybox.trigger("Image.afterUpdate", t);\n      }));\n    }\n  }, {\n    key: "revealContent",\n    value: function revealContent(t) {\n      null === this.fancybox.Carousel.prevPage && t.index === this.fancybox.options.startIndex && this.canZoom(t) ? this.zoomIn() : this.fancybox.revealContent(t);\n    }\n  }, {\n    key: "getZoomInfo",\n    value: function getZoomInfo(t) {\n      var e = t.$thumb.getBoundingClientRect(),\n          i = e.width,\n          s = e.height,\n          o = t.$content.getBoundingClientRect(),\n          n = o.width,\n          a = o.height,\n          r = o.top - e.top,\n          l = o.left - e.left;\n      var h = this.fancybox.option("Image.zoomOpacity");\n      return "auto" === h && (h = Math.abs(i / s - n / a) > .1), {\n        top: r,\n        left: l,\n        scale: e.width / n,\n        opacity: h\n      };\n    }\n  }, {\n    key: "canZoom",\n    value: function canZoom(t) {\n      var e = this.fancybox,\n          i = e.$container;\n      if (window.visualViewport && 1 !== window.visualViewport.scale) return !1;\n      if (!e.option("Image.zoom") || "contain" !== e.option("Image.fit")) return !1;\n      var s = t.$thumb;\n      if (!s || "loading" === t.state) return !1;\n      i.classList.add("fancybox__no-click");\n      var o = s.getBoundingClientRect();\n      var n;\n\n      if (this.fancybox.option("Image.ignoreCoveredThumbnail")) {\n        var _t38 = document.elementFromPoint(o.left + 1, o.top + 1) === s,\n            _e21 = document.elementFromPoint(o.right - 1, o.bottom - 1) === s;\n\n        n = _t38 && _e21;\n      } else n = document.elementFromPoint(o.left + .5 * o.width, o.top + .5 * o.height) === s;\n\n      return i.classList.remove("fancybox__no-click"), n;\n    }\n  }, {\n    key: "zoomIn",\n    value: function zoomIn() {\n      var t = this.fancybox,\n          e = t.getSlide(),\n          i = e.Panzoom,\n          _this$getZoomInfo = this.getZoomInfo(e),\n          s = _this$getZoomInfo.top,\n          o = _this$getZoomInfo.left,\n          n = _this$getZoomInfo.scale,\n          a = _this$getZoomInfo.opacity;\n\n      e.state = "zoomIn", t.trigger("reveal", e), i.panTo({\n        x: -1 * o,\n        y: -1 * s,\n        scale: n,\n        friction: 0,\n        ignoreBounds: !0\n      }), e.$content.style.visibility = "", !0 === a && i.on("afterTransform", function (t) {\n        "zoomIn" !== e.state && "zoomOut" !== e.state || (t.$content.style.opacity = Math.min(1, 1 - (1 - t.content.scale) / (1 - n)));\n      }), i.panTo({\n        x: 0,\n        y: 0,\n        scale: 1,\n        friction: this.fancybox.option("Image.zoomFriction")\n      });\n    }\n  }, {\n    key: "zoomOut",\n    value: function zoomOut() {\n      var _this29 = this;\n\n      var t = this.fancybox,\n          e = t.getSlide(),\n          i = e.Panzoom;\n      if (!i) return;\n      e.state = "zoomOut", t.state = "customClosing", e.$caption && (e.$caption.style.visibility = "hidden");\n      var s = this.fancybox.option("Image.zoomFriction");\n\n      var o = function o(t) {\n        var _this29$getZoomInfo = _this29.getZoomInfo(e),\n            o = _this29$getZoomInfo.top,\n            n = _this29$getZoomInfo.left,\n            a = _this29$getZoomInfo.scale,\n            r = _this29$getZoomInfo.opacity;\n\n        t || r || (s *= .82), i.panTo({\n          x: -1 * n,\n          y: -1 * o,\n          scale: a,\n          friction: s,\n          ignoreBounds: !0\n        }), s *= .98;\n      };\n\n      window.addEventListener("scroll", o), i.once("endAnimation", function () {\n        window.removeEventListener("scroll", o), t.destroy();\n      }), o();\n    }\n  }, {\n    key: "handleCursor",\n    value: function handleCursor(t) {\n      if ("image" !== t.type || !t.$el) return;\n      var e = t.Panzoom,\n          i = this.fancybox.option("Image.click", !1, t),\n          s = this.fancybox.option("Image.touch"),\n          o = t.$el.classList,\n          n = this.fancybox.option("Image.canZoomInClass"),\n          a = this.fancybox.option("Image.canZoomOutClass");\n\n      if (e && "toggleZoom" === i) {\n        e && 1 === e.content.scale && e.option("maxScale") - e.content.scale > .01 ? (o.remove(a), o.add(n)) : e.content.scale > 1 && !s && o.add(a);\n      } else "close" === i && o.add(a);\n    }\n  }, {\n    key: "onWheel",\n    value: function onWheel(t, e) {\n      if ("ready" === this.fancybox.state && !1 !== this.fancybox.trigger("Image.wheel", e)) switch (this.fancybox.option("Image.wheel")) {\n        case "zoom":\n          t.Panzoom && t.Panzoom.zoomWithWheel(e);\n          break;\n\n        case "close":\n          this.fancybox.close();\n          break;\n\n        case "slide":\n          this.fancybox[e.deltaY < 0 ? "prev" : "next"]();\n      }\n    }\n  }, {\n    key: "onClick",\n    value: function onClick(t, e) {\n      var _this30 = this;\n\n      if ("ready" !== this.fancybox.state) return;\n      var i = t.Panzoom;\n      if (i && (i.dragPosition.midPoint || 0 !== i.dragOffset.x || 0 !== i.dragOffset.y || 1 !== i.dragOffset.scale)) return;\n      if (this.fancybox.Carousel.Panzoom.lockAxis) return !1;\n\n      var s = function s(i) {\n        switch (i) {\n          case "toggleZoom":\n            e.stopPropagation(), t.Panzoom && t.Panzoom.zoomWithClick(e);\n            break;\n\n          case "close":\n            _this30.fancybox.close();\n\n            break;\n\n          case "next":\n            e.stopPropagation(), _this30.fancybox.next();\n        }\n      },\n          o = this.fancybox.option("Image.click"),\n          n = this.fancybox.option("Image.doubleClick");\n\n      n ? this.clickTimer ? (clearTimeout(this.clickTimer), this.clickTimer = null, s(n)) : this.clickTimer = setTimeout(function () {\n        _this30.clickTimer = null, s(o);\n      }, 300) : s(o);\n    }\n  }, {\n    key: "onPageChange",\n    value: function onPageChange(t, e) {\n      var i = t.getSlide();\n      e.slides.forEach(function (t) {\n        t.Panzoom && "done" === t.state && t.index !== i.index && t.Panzoom.panTo({\n          x: 0,\n          y: 0,\n          scale: 1,\n          friction: .8\n        });\n      });\n    }\n  }, {\n    key: "attach",\n    value: function attach() {\n      this.fancybox.on(this.events);\n    }\n  }, {\n    key: "detach",\n    value: function detach() {\n      this.fancybox.off(this.events);\n    }\n  }]);\n\n  return C;\n}();\n\nC.defaults = {\n  canZoomInClass: "can-zoom_in",\n  canZoomOutClass: "can-zoom_out",\n  zoom: !0,\n  zoomOpacity: "auto",\n  zoomFriction: .82,\n  ignoreCoveredThumbnail: !1,\n  touch: !0,\n  click: "toggleZoom",\n  doubleClick: null,\n  wheel: "zoom",\n  fit: "contain",\n  wrap: !1,\n  Panzoom: {\n    ratio: 1\n  }\n};\n\nvar S = function S() {\n  var t = window.location.hash.substr(1),\n      e = t.split("-"),\n      i = e.length > 1 && /^\\+?\\d+$/.test(e[e.length - 1]) && parseInt(e.pop(-1), 10) || null;\n  return {\n    hash: t,\n    slug: e.join("-"),\n    index: i\n  };\n};\n\nvar E = /*#__PURE__*/function () {\n  function E(t) {\n    _classCallCheck(this, E);\n\n    this.fancybox = t;\n\n    for (var _i28 = 0, _arr7 = ["onChange", "onClosing"]; _i28 < _arr7.length; _i28++) {\n      var _t39 = _arr7[_i28];\n      this[_t39] = this[_t39].bind(this);\n    }\n\n    this.events = {\n      initCarousel: this.onChange,\n      "Carousel.change": this.onChange,\n      closing: this.onClosing\n    }, this.hasCreatedHistory = !1, this.origHash = "", this.timer = null;\n  }\n\n  _createClass(E, [{\n    key: "onChange",\n    value: function onChange() {\n      var _this31 = this;\n\n      var t = this.fancybox,\n          e = t.Carousel;\n      this.timer && clearTimeout(this.timer);\n      var i = null === e.prevPage,\n          s = t.getSlide(),\n          o = s.$trigger && s.$trigger.dataset,\n          n = window.location.hash.substr(1);\n      var a = !1;\n      if (s.slug) a = s.slug;else {\n        var _t40 = o && o.fancybox;\n\n        _t40 && _t40.length && "true" !== _t40 && (a = _t40 + (e.slides.length > 1 ? "-" + (s.index + 1) : ""));\n      }\n      i && (this.origHash = n !== a ? this.origHash : ""), a && n !== a && (this.timer = setTimeout(function () {\n        try {\n          window.history[i ? "pushState" : "replaceState"]({}, document.title, window.location.pathname + window.location.search + "#" + a), i && (_this31.hasCreatedHistory = !0);\n        } catch (t) {}\n      }, 300));\n    }\n  }, {\n    key: "onClosing",\n    value: function onClosing() {\n      if (this.timer && clearTimeout(this.timer), !0 !== this.hasSilentClose) {\n        if (!this.hasCreatedHistory) try {\n          return void window.history.replaceState({}, document.title, window.location.pathname + window.location.search + (this.origHash ? "#" + this.origHash : ""));\n        } catch (t) {}\n        window.history.back();\n      }\n    }\n  }, {\n    key: "attach",\n    value: function attach(t) {\n      t.on(this.events);\n    }\n  }, {\n    key: "detach",\n    value: function detach(t) {\n      t.off(this.events);\n    }\n  }], [{\n    key: "startFromUrl",\n    value: function startFromUrl() {\n      if (!E.Fancybox || E.Fancybox.getInstance()) return;\n\n      var _S = S(),\n          t = _S.hash,\n          e = _S.slug,\n          i = _S.index;\n\n      if (!e) return;\n      var s = document.querySelector("[data-slug=\\"".concat(t, "\\"]"));\n      if (s && s.dispatchEvent(new CustomEvent("click", {\n        bubbles: !0,\n        cancelable: !0\n      })), E.Fancybox.getInstance()) return;\n      var o = document.querySelectorAll("[data-fancybox=\\"".concat(e, "\\"]"));\n      o.length && (null === i && 1 === o.length ? s = o[0] : i && (s = o[i - 1]), s && s.dispatchEvent(new CustomEvent("click", {\n        bubbles: !0,\n        cancelable: !0\n      })));\n    }\n  }, {\n    key: "onHashChange",\n    value: function onHashChange() {\n      var _S2 = S(),\n          t = _S2.slug,\n          e = _S2.index,\n          i = E.Fancybox.getInstance();\n\n      if (i) {\n        if (t) {\n          var _s10 = i.Carousel;\n\n          var _iterator6 = _createForOfIteratorHelper(_s10.slides),\n              _step6;\n\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var _e22 = _step6.value;\n              if (_e22.slug && _e22.slug === t) return _s10.slideTo(_e22.index);\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n\n          var _o10 = i.getSlide(),\n              _n7 = _o10.$trigger && _o10.$trigger.dataset;\n\n          if (_n7 && _n7.fancybox === t) return _s10.slideTo(e - 1);\n        }\n\n        i.plugins.Hash.hasSilentClose = !0, i.close();\n      }\n\n      E.startFromUrl();\n    }\n  }, {\n    key: "create",\n    value: function create(t) {\n      function e() {\n        window.addEventListener("hashchange", E.onHashChange, !1), E.startFromUrl();\n      }\n\n      E.Fancybox = t, b && window.requestAnimationFrame(function () {\n        /complete|interactive|loaded/.test(document.readyState) ? e() : document.addEventListener("DOMContentLoaded", e);\n      });\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      window.removeEventListener("hashchange", E.onHashChange, !1);\n    }\n  }]);\n\n  return E;\n}();\n\nvar P = {\n  pageXOffset: 0,\n  pageYOffset: 0,\n  element: function element() {\n    return document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;\n  },\n  activate: function activate(t) {\n    P.pageXOffset = window.pageXOffset, P.pageYOffset = window.pageYOffset, t.requestFullscreen ? t.requestFullscreen() : t.mozRequestFullScreen ? t.mozRequestFullScreen() : t.webkitRequestFullscreen ? t.webkitRequestFullscreen() : t.msRequestFullscreen && t.msRequestFullscreen();\n  },\n  deactivate: function deactivate() {\n    document.exitFullscreen ? document.exitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitExitFullscreen && document.webkitExitFullscreen();\n  }\n};\n\nvar T = /*#__PURE__*/function () {\n  function T(t) {\n    _classCallCheck(this, T);\n\n    this.fancybox = t, this.active = !1, this.handleVisibilityChange = this.handleVisibilityChange.bind(this);\n  }\n\n  _createClass(T, [{\n    key: "isActive",\n    value: function isActive() {\n      return this.active;\n    }\n  }, {\n    key: "setTimer",\n    value: function setTimer() {\n      var _this32 = this;\n\n      if (!this.active || this.timer) return;\n      var t = this.fancybox.option("slideshow.delay", 3e3);\n      this.timer = setTimeout(function () {\n        _this32.timer = null, _this32.fancybox.option("infinite") || _this32.fancybox.getSlide().index !== _this32.fancybox.Carousel.slides.length - 1 ? _this32.fancybox.next() : _this32.fancybox.jumpTo(0, {\n          friction: 0\n        });\n      }, t);\n      var e = this.$progress;\n      e || (e = document.createElement("div"), e.classList.add("fancybox__progress"), this.fancybox.$carousel.parentNode.insertBefore(e, this.fancybox.$carousel), this.$progress = e, e.offsetHeight), e.style.transitionDuration = "".concat(t, "ms"), e.style.transform = "scaleX(1)";\n    }\n  }, {\n    key: "clearTimer",\n    value: function clearTimer() {\n      clearTimeout(this.timer), this.timer = null, this.$progress && (this.$progress.style.transitionDuration = "", this.$progress.style.transform = "", this.$progress.offsetHeight);\n    }\n  }, {\n    key: "activate",\n    value: function activate() {\n      this.active || (this.active = !0, this.fancybox.$container.classList.add("has-slideshow"), "done" === this.fancybox.getSlide().state && this.setTimer(), document.addEventListener("visibilitychange", this.handleVisibilityChange, !1));\n    }\n  }, {\n    key: "handleVisibilityChange",\n    value: function handleVisibilityChange() {\n      this.deactivate();\n    }\n  }, {\n    key: "deactivate",\n    value: function deactivate() {\n      this.active = !1, this.clearTimer(), this.fancybox.$container.classList.remove("has-slideshow"), document.removeEventListener("visibilitychange", this.handleVisibilityChange, !1);\n    }\n  }, {\n    key: "toggle",\n    value: function toggle() {\n      this.active ? this.deactivate() : this.fancybox.Carousel.slides.length > 1 && this.activate();\n    }\n  }]);\n\n  return T;\n}();\n\nvar L = {\n  display: ["counter", "zoom", "slideshow", "fullscreen", "thumbs", "close"],\n  autoEnable: !0,\n  items: {\n    counter: {\n      type: "div",\n      class: "fancybox__counter",\n      html: \'<span data-fancybox-index=""></span>&nbsp;/&nbsp;<span data-fancybox-count=""></span>\',\n      tabindex: -1,\n      position: "left"\n    },\n    prev: {\n      type: "button",\n      class: "fancybox__button--prev",\n      label: "PREV",\n      html: \'<svg viewBox="0 0 24 24"><path d="M15 4l-8 8 8 8"/></svg>\',\n      click: function click(t) {\n        t.preventDefault(), this.fancybox.prev();\n      }\n    },\n    next: {\n      type: "button",\n      class: "fancybox__button--next",\n      label: "NEXT",\n      html: \'<svg viewBox="0 0 24 24"><path d="M8 4l8 8-8 8"/></svg>\',\n      click: function click(t) {\n        t.preventDefault(), this.fancybox.next();\n      }\n    },\n    fullscreen: {\n      type: "button",\n      class: "fancybox__button--fullscreen",\n      label: "TOGGLE_FULLSCREEN",\n      html: \'<svg viewBox="0 0 24 24">\\n                <g><path d="M3 8 V3h5"></path><path d="M21 8V3h-5"></path><path d="M8 21H3v-5"></path><path d="M16 21h5v-5"></path></g>\\n                <g><path d="M7 2v5H2M17 2v5h5M2 17h5v5M22 17h-5v5"/></g>\\n            </svg>\',\n      click: function click(t) {\n        t.preventDefault(), P.element() ? P.deactivate() : P.activate(this.fancybox.$container);\n      }\n    },\n    slideshow: {\n      type: "button",\n      class: "fancybox__button--slideshow",\n      label: "TOGGLE_SLIDESHOW",\n      html: \'<svg viewBox="0 0 24 24">\\n                <g><path d="M6 4v16"/><path d="M20 12L6 20"/><path d="M20 12L6 4"/></g>\\n                <g><path d="M7 4v15M17 4v15"/></g>\\n            </svg>\',\n      click: function click(t) {\n        t.preventDefault(), this.Slideshow.toggle();\n      }\n    },\n    zoom: {\n      type: "button",\n      class: "fancybox__button--zoom",\n      label: "TOGGLE_ZOOM",\n      html: \'<svg viewBox="0 0 24 24"><circle cx="10" cy="10" r="7"></circle><path d="M16 16 L21 21"></svg>\',\n      click: function click(t) {\n        t.preventDefault();\n        var e = this.fancybox.getSlide().Panzoom;\n        e && e.toggleZoom();\n      }\n    },\n    download: {\n      type: "link",\n      label: "DOWNLOAD",\n      class: "fancybox__button--download",\n      html: \'<svg viewBox="0 0 24 24"><path d="M12 15V3m0 12l-4-4m4 4l4-4M2 17l.62 2.48A2 2 0 004.56 21h14.88a2 2 0 001.94-1.51L22 17"/></svg>\',\n      click: function click(t) {\n        t.stopPropagation();\n      }\n    },\n    thumbs: {\n      type: "button",\n      label: "TOGGLE_THUMBS",\n      class: "fancybox__button--thumbs",\n      html: \'<svg viewBox="0 0 24 24"><circle cx="4" cy="4" r="1" /><circle cx="12" cy="4" r="1" transform="rotate(90 12 4)"/><circle cx="20" cy="4" r="1" transform="rotate(90 20 4)"/><circle cx="4" cy="12" r="1" transform="rotate(90 4 12)"/><circle cx="12" cy="12" r="1" transform="rotate(90 12 12)"/><circle cx="20" cy="12" r="1" transform="rotate(90 20 12)"/><circle cx="4" cy="20" r="1" transform="rotate(90 4 20)"/><circle cx="12" cy="20" r="1" transform="rotate(90 12 20)"/><circle cx="20" cy="20" r="1" transform="rotate(90 20 20)"/></svg>\',\n      click: function click(t) {\n        t.stopPropagation();\n        var e = this.fancybox.plugins.Thumbs;\n        e && e.toggle();\n      }\n    },\n    close: {\n      type: "button",\n      label: "CLOSE",\n      class: "fancybox__button--close",\n      html: \'<svg viewBox="0 0 24 24"><path d="M20 20L4 4m16 0L4 20"></path></svg>\',\n      tabindex: 0,\n      click: function click(t) {\n        t.stopPropagation(), t.preventDefault(), this.fancybox.close();\n      }\n    }\n  }\n};\n\nvar A = /*#__PURE__*/function () {\n  function A(t) {\n    var _this33 = this;\n\n    _classCallCheck(this, A);\n\n    this.fancybox = t, this.$container = null, this.state = "init";\n\n    for (var _i29 = 0, _arr8 = ["onInit", "onPrepare", "onDone", "onKeydown", "onClosing", "onChange", "onSettle", "onRefresh"]; _i29 < _arr8.length; _i29++) {\n      var _t41 = _arr8[_i29];\n      this[_t41] = this[_t41].bind(this);\n    }\n\n    this.events = {\n      init: this.onInit,\n      prepare: this.onPrepare,\n      done: this.onDone,\n      keydown: this.onKeydown,\n      closing: this.onClosing,\n      "Carousel.change": this.onChange,\n      "Carousel.settle": this.onSettle,\n      "Carousel.Panzoom.touchStart": function CarouselPanzoomTouchStart() {\n        return _this33.onRefresh();\n      },\n      "Image.startAnimation": function ImageStartAnimation(t, e) {\n        return _this33.onRefresh(e);\n      },\n      "Image.afterUpdate": function ImageAfterUpdate(t, e) {\n        return _this33.onRefresh(e);\n      }\n    };\n  }\n\n  _createClass(A, [{\n    key: "onInit",\n    value: function onInit() {\n      if (this.fancybox.option("Toolbar.autoEnable")) {\n        var _t42 = !1;\n\n        var _iterator7 = _createForOfIteratorHelper(this.fancybox.items),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var _e23 = _step7.value;\n\n            if ("image" === _e23.type) {\n              _t42 = !0;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n\n        if (!_t42) return void (this.state = "disabled");\n      }\n\n      var _iterator8 = _createForOfIteratorHelper(this.fancybox.option("Toolbar.display")),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var _e24 = _step8.value;\n\n          if ("close" === (t(_e24) ? _e24.id : _e24)) {\n            this.fancybox.options.closeButton = !1;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n  }, {\n    key: "onPrepare",\n    value: function onPrepare() {\n      if ("init" === this.state && (this.build(), this.update(), this.Slideshow = new T(this.fancybox), !this.fancybox.Carousel.prevPage && (this.fancybox.option("slideshow.autoStart") && this.Slideshow.activate(), this.fancybox.option("fullscreen.autoStart") && !P.element()))) try {\n        P.activate(this.fancybox.$container);\n      } catch (t) {}\n    }\n  }, {\n    key: "onFsChange",\n    value: function onFsChange() {\n      window.scrollTo(P.pageXOffset, P.pageYOffset);\n    }\n  }, {\n    key: "onSettle",\n    value: function onSettle() {\n      this.Slideshow && this.Slideshow.isActive() && (this.fancybox.getSlide().index !== this.fancybox.Carousel.slides.length - 1 || this.fancybox.option("infinite") ? "done" === this.fancybox.getSlide().state && this.Slideshow.setTimer() : this.Slideshow.deactivate());\n    }\n  }, {\n    key: "onChange",\n    value: function onChange() {\n      this.update(), this.Slideshow && this.Slideshow.isActive() && this.Slideshow.clearTimer();\n    }\n  }, {\n    key: "onDone",\n    value: function onDone(t, e) {\n      e.index === t.getSlide().index && (this.update(), this.Slideshow && this.Slideshow.isActive() && (this.fancybox.option("infinite") || e.index !== this.fancybox.Carousel.slides.length - 1 ? this.Slideshow.setTimer() : this.Slideshow.deactivate()));\n    }\n  }, {\n    key: "onRefresh",\n    value: function onRefresh(t) {\n      t && t.index !== this.fancybox.getSlide().index || (this.update(), !this.Slideshow || !this.Slideshow.isActive() || t && "done" !== t.state || this.Slideshow.deactivate());\n    }\n  }, {\n    key: "onKeydown",\n    value: function onKeydown(t, e, i) {\n      " " === e && this.Slideshow && (this.Slideshow.toggle(), i.preventDefault());\n    }\n  }, {\n    key: "onClosing",\n    value: function onClosing() {\n      this.Slideshow && this.Slideshow.deactivate(), document.removeEventListener("fullscreenchange", this.onFsChange);\n    }\n  }, {\n    key: "createElement",\n    value: function createElement(t) {\n      var _e$classList3;\n\n      var e;\n      "div" === t.type ? e = document.createElement("div") : (e = document.createElement("link" === t.type ? "a" : "button"), e.classList.add("carousel__button")), e.innerHTML = t.html, e.setAttribute("tabindex", t.tabindex || 0), t.class && (_e$classList3 = e.classList).add.apply(_e$classList3, _toConsumableArray(t.class.split(" "))), t.label && e.setAttribute("title", this.fancybox.localize("{{".concat(t.label, "}}"))), t.click && e.addEventListener("click", t.click.bind(this)), "prev" === t.id && e.setAttribute("data-fancybox-prev", ""), "next" === t.id && e.setAttribute("data-fancybox-next", "");\n      var i = e.querySelector("svg");\n      return i && (i.setAttribute("role", "img"), i.setAttribute("tabindex", "-1"), i.setAttribute("xmlns", "http://www.w3.org/2000/svg")), e;\n    }\n  }, {\n    key: "build",\n    value: function build() {\n      var _this34 = this;\n\n      this.cleanup();\n      var i = this.fancybox.option("Toolbar.items"),\n          s = [{\n        position: "left",\n        items: []\n      }, {\n        position: "center",\n        items: []\n      }, {\n        position: "right",\n        items: []\n      }],\n          o = this.fancybox.plugins.Thumbs;\n\n      var _iterator9 = _createForOfIteratorHelper(this.fancybox.option("Toolbar.display")),\n          _step9;\n\n      try {\n        var _loop3 = function _loop3() {\n          var n = _step9.value;\n          var a = void 0,\n              r = void 0;\n          if (t(n) ? (a = n.id, r = e({}, i[a], n)) : (a = n, r = i[a]), ["counter", "next", "prev", "slideshow"].includes(a) && _this34.fancybox.items.length < 2) return "continue";\n\n          if ("fullscreen" === a) {\n            if (!document.fullscreenEnabled || window.fullScreen) return "continue";\n            document.addEventListener("fullscreenchange", _this34.onFsChange);\n          }\n\n          if ("thumbs" === a && (!o || "disabled" === o.state)) return "continue";\n          if (!r) return "continue";\n          var l = r.position || "right",\n              h = s.find(function (t) {\n            return t.position === l;\n          });\n          h && h.items.push(r);\n        };\n\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var _ret = _loop3();\n\n          if (_ret === "continue") continue;\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      var n = document.createElement("div");\n      n.classList.add("fancybox__toolbar");\n\n      for (var _i30 = 0, _s11 = s; _i30 < _s11.length; _i30++) {\n        var _t43 = _s11[_i30];\n\n        if (_t43.items.length) {\n          var _e25 = document.createElement("div");\n\n          _e25.classList.add("fancybox__toolbar__items"), _e25.classList.add("fancybox__toolbar__items--".concat(_t43.position));\n\n          var _iterator10 = _createForOfIteratorHelper(_t43.items),\n              _step10;\n\n          try {\n            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n              var _i31 = _step10.value;\n\n              _e25.appendChild(this.createElement(_i31));\n            }\n          } catch (err) {\n            _iterator10.e(err);\n          } finally {\n            _iterator10.f();\n          }\n\n          n.appendChild(_e25);\n        }\n      }\n\n      this.fancybox.$carousel.parentNode.insertBefore(n, this.fancybox.$carousel), this.$container = n;\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      var t = this.fancybox.getSlide(),\n          e = t.index,\n          i = this.fancybox.items.length,\n          s = t.downloadSrc || ("image" !== t.type || t.error ? null : t.src);\n\n      var _iterator11 = _createForOfIteratorHelper(this.fancybox.$container.querySelectorAll("a.fancybox__button--download")),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var _t46 = _step11.value;\n          s ? (_t46.removeAttribute("disabled"), _t46.removeAttribute("tabindex"), _t46.setAttribute("href", s), _t46.setAttribute("download", s), _t46.setAttribute("target", "_blank")) : (_t46.setAttribute("disabled", ""), _t46.setAttribute("tabindex", -1), _t46.removeAttribute("href"), _t46.removeAttribute("download"));\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n\n      var o = t.Panzoom,\n          n = o && o.option("maxScale") > o.option("baseScale");\n\n      var _iterator12 = _createForOfIteratorHelper(this.fancybox.$container.querySelectorAll(".fancybox__button--zoom")),\n          _step12;\n\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var _t47 = _step12.value;\n          n ? _t47.removeAttribute("disabled") : _t47.setAttribute("disabled", "");\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n\n      var _iterator13 = _createForOfIteratorHelper(this.fancybox.$container.querySelectorAll("[data-fancybox-index]")),\n          _step13;\n\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var _e26 = _step13.value;\n          _e26.innerHTML = t.index + 1;\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n\n      var _iterator14 = _createForOfIteratorHelper(this.fancybox.$container.querySelectorAll("[data-fancybox-count]")),\n          _step14;\n\n      try {\n        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n          var _t48 = _step14.value;\n          _t48.innerHTML = i;\n        }\n      } catch (err) {\n        _iterator14.e(err);\n      } finally {\n        _iterator14.f();\n      }\n\n      if (!this.fancybox.option("infinite")) {\n        var _iterator15 = _createForOfIteratorHelper(this.fancybox.$container.querySelectorAll("[data-fancybox-prev]")),\n            _step15;\n\n        try {\n          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n            var _t44 = _step15.value;\n            0 === e ? _t44.setAttribute("disabled", "") : _t44.removeAttribute("disabled");\n          }\n        } catch (err) {\n          _iterator15.e(err);\n        } finally {\n          _iterator15.f();\n        }\n\n        var _iterator16 = _createForOfIteratorHelper(this.fancybox.$container.querySelectorAll("[data-fancybox-next]")),\n            _step16;\n\n        try {\n          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n            var _t45 = _step16.value;\n            e === i - 1 ? _t45.setAttribute("disabled", "") : _t45.removeAttribute("disabled");\n          }\n        } catch (err) {\n          _iterator16.e(err);\n        } finally {\n          _iterator16.f();\n        }\n      }\n    }\n  }, {\n    key: "cleanup",\n    value: function cleanup() {\n      this.Slideshow && this.Slideshow.isActive() && this.Slideshow.clearTimer(), this.$container && this.$container.remove(), this.$container = null;\n    }\n  }, {\n    key: "attach",\n    value: function attach() {\n      this.fancybox.on(this.events);\n    }\n  }, {\n    key: "detach",\n    value: function detach() {\n      this.fancybox.off(this.events), this.cleanup();\n    }\n  }]);\n\n  return A;\n}();\n\nA.defaults = L;\nvar k = {\n  ScrollLock: /*#__PURE__*/function () {\n    function ScrollLock(t) {\n      _classCallCheck(this, ScrollLock);\n\n      this.fancybox = t, this.viewport = null, this.pendingUpdate = null;\n\n      for (var _i32 = 0, _arr9 = ["onReady", "onResize", "onTouchstart", "onTouchmove"]; _i32 < _arr9.length; _i32++) {\n        var _t49 = _arr9[_i32];\n        this[_t49] = this[_t49].bind(this);\n      }\n    }\n\n    _createClass(ScrollLock, [{\n      key: "onReady",\n      value: function onReady() {\n        var t = window.visualViewport;\n        t && (this.viewport = t, this.startY = 0, t.addEventListener("resize", this.onResize), this.updateViewport()), window.addEventListener("touchstart", this.onTouchstart, {\n          passive: !1\n        }), window.addEventListener("touchmove", this.onTouchmove, {\n          passive: !1\n        });\n      }\n    }, {\n      key: "onResize",\n      value: function onResize() {\n        this.updateViewport();\n      }\n    }, {\n      key: "updateViewport",\n      value: function updateViewport() {\n        var t = this.fancybox,\n            e = this.viewport,\n            i = e.scale || 1,\n            s = t.$container;\n        if (!s) return;\n        var o = "",\n            n = "",\n            a = "";\n        i - 1 > .1 && (o = e.width * i + "px", n = e.height * i + "px", a = "translate3d(".concat(e.offsetLeft, "px, ").concat(e.offsetTop, "px, 0) scale(").concat(1 / i, ")")), s.style.width = o, s.style.height = n, s.style.transform = a;\n      }\n    }, {\n      key: "onTouchstart",\n      value: function onTouchstart(t) {\n        this.startY = t.touches ? t.touches[0].screenY : t.screenY;\n      }\n    }, {\n      key: "onTouchmove",\n      value: function onTouchmove(t) {\n        var e = this.startY,\n            i = window.innerWidth / window.document.documentElement.clientWidth;\n        if (!t.cancelable) return;\n        if (t.touches.length > 1 || 1 !== i) return;\n        var s = t.target,\n            o = l(s);\n        if (!o) return void t.preventDefault();\n        var n = window.getComputedStyle(o),\n            a = parseInt(n.getPropertyValue("height"), 10),\n            r = t.touches ? t.touches[0].screenY : t.screenY,\n            h = e <= r && 0 === o.scrollTop,\n            c = e >= r && o.scrollHeight - o.scrollTop === a;\n        (h || c) && t.preventDefault();\n      }\n    }, {\n      key: "cleanup",\n      value: function cleanup() {\n        this.pendingUpdate && (cancelAnimationFrame(this.pendingUpdate), this.pendingUpdate = null);\n        var t = this.viewport;\n        t && (t.removeEventListener("resize", this.onResize), this.viewport = null), window.removeEventListener("touchstart", this.onTouchstart, !1), window.removeEventListener("touchmove", this.onTouchmove, !1);\n      }\n    }, {\n      key: "attach",\n      value: function attach() {\n        this.fancybox.on("initLayout", this.onReady);\n      }\n    }, {\n      key: "detach",\n      value: function detach() {\n        this.fancybox.off("initLayout", this.onReady), this.cleanup();\n      }\n    }]);\n\n    return ScrollLock;\n  }(),\n  Thumbs: v,\n  Html: $,\n  Toolbar: A,\n  Image: C,\n  Hash: E\n};\nvar z = {\n  startIndex: 0,\n  preload: 1,\n  infinite: !0,\n  showClass: "fancybox-zoomInUp",\n  hideClass: "fancybox-fadeOut",\n  animated: !0,\n  hideScrollbar: !0,\n  parentEl: null,\n  mainClass: null,\n  autoFocus: !0,\n  trapFocus: !0,\n  placeFocusBack: !0,\n  click: "close",\n  closeButton: "inside",\n  dragToClose: !0,\n  keyboard: {\n    Escape: "close",\n    Delete: "close",\n    Backspace: "close",\n    PageUp: "next",\n    PageDown: "prev",\n    ArrowUp: "next",\n    ArrowDown: "prev",\n    ArrowRight: "next",\n    ArrowLeft: "prev"\n  },\n  template: {\n    closeButton: \'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" tabindex="-1"><path d="M20 20L4 4m16 0L4 20"/></svg>\',\n    spinner: \'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="25 25 50 50" tabindex="-1"><circle cx="50" cy="50" r="20"/></svg>\',\n    main: null\n  },\n  l10n: {\n    CLOSE: "Close",\n    NEXT: "Next",\n    PREV: "Previous",\n    MODAL: "You can close this modal content with the ESC key",\n    ERROR: "Something Went Wrong, Please Try Again Later",\n    IMAGE_ERROR: "Image Not Found",\n    ELEMENT_NOT_FOUND: "HTML Element Not Found",\n    AJAX_NOT_FOUND: "Error Loading AJAX : Not Found",\n    AJAX_FORBIDDEN: "Error Loading AJAX : Forbidden",\n    IFRAME_ERROR: "Error Loading Page",\n    TOGGLE_ZOOM: "Toggle zoom level",\n    TOGGLE_THUMBS: "Toggle thumbnails",\n    TOGGLE_SLIDESHOW: "Toggle slideshow",\n    TOGGLE_FULLSCREEN: "Toggle full-screen mode",\n    DOWNLOAD: "Download"\n  }\n},\n    _ = {};\nvar O = 0;\n\nvar M = /*#__PURE__*/function (_h5) {\n  _inherits(M, _h5);\n\n  var _super3 = _createSuper(M);\n\n  function M(t) {\n    var _this35;\n\n    var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, M);\n\n    _this35 = _super3.call(this, e(!0, {}, z, i)), _this35.bindHandlers(), _this35.state = "init", _this35.setItems(t), _this35.attachPlugins(M.Plugins), _this35.trigger("init"), !0 === _this35.option("hideScrollbar") && _this35.hideScrollbar(), _this35.initLayout(), _this35.initCarousel(), _this35.attachEvents(), _[_this35.id] = _assertThisInitialized(_this35), _this35.trigger("prepare"), _this35.state = "ready", _this35.trigger("ready"), _this35.$container.setAttribute("aria-hidden", "false"), _this35.option("trapFocus") && _this35.focus();\n    return _this35;\n  }\n\n  _createClass(M, [{\n    key: "bindHandlers",\n    value: function bindHandlers() {\n      for (var _i33 = 0, _arr10 = ["onMousedown", "onKeydown", "onClick", "onFocus", "onCreateSlide", "onTouchMove", "onTouchEnd", "onTransform"]; _i33 < _arr10.length; _i33++) {\n        var _t50 = _arr10[_i33];\n        this[_t50] = this[_t50].bind(this);\n      }\n    }\n  }, {\n    key: "attachEvents",\n    value: function attachEvents() {\n      document.addEventListener("mousedown", this.onMousedown), document.addEventListener("keydown", this.onKeydown, !0), this.option("trapFocus") && document.addEventListener("focus", this.onFocus, !0), this.$container.addEventListener("click", this.onClick);\n    }\n  }, {\n    key: "detachEvents",\n    value: function detachEvents() {\n      document.removeEventListener("mousedown", this.onMousedown), document.removeEventListener("keydown", this.onKeydown, !0), document.removeEventListener("focus", this.onFocus, !0), this.$container.removeEventListener("click", this.onClick);\n    }\n  }, {\n    key: "initLayout",\n    value: function initLayout() {\n      var _this36 = this,\n          _this$$container$clas;\n\n      this.$root = this.option("parentEl") || document.body;\n      var t = this.option("template.main");\n      t && (this.$root.insertAdjacentHTML("beforeend", this.localize(t)), this.$container = this.$root.querySelector(".fancybox__container")), this.$container || (this.$container = document.createElement("div"), this.$root.appendChild(this.$container)), this.$container.onscroll = function () {\n        return _this36.$container.scrollLeft = 0, !1;\n      }, Object.entries({\n        class: "fancybox__container",\n        role: "dialog",\n        tabIndex: "-1",\n        "aria-modal": "true",\n        "aria-hidden": "true",\n        "aria-label": this.localize("{{MODAL}}")\n      }).forEach(function (t) {\n        var _this36$$container;\n\n        return (_this36$$container = _this36.$container).setAttribute.apply(_this36$$container, _toConsumableArray(t));\n      }), this.option("animated") && this.$container.classList.add("is-animated"), this.$backdrop = this.$container.querySelector(".fancybox__backdrop"), this.$backdrop || (this.$backdrop = document.createElement("div"), this.$backdrop.classList.add("fancybox__backdrop"), this.$container.appendChild(this.$backdrop)), this.$carousel = this.$container.querySelector(".fancybox__carousel"), this.$carousel || (this.$carousel = document.createElement("div"), this.$carousel.classList.add("fancybox__carousel"), this.$container.appendChild(this.$carousel)), this.$container.Fancybox = this, this.id = this.$container.getAttribute("id"), this.id || (this.id = this.options.id || ++O, this.$container.setAttribute("id", "fancybox-" + this.id));\n      var e = this.options.mainClass;\n      return e && (_this$$container$clas = this.$container.classList).add.apply(_this$$container$clas, _toConsumableArray(e.split(" "))), document.documentElement.classList.add("with-fancybox"), this.trigger("initLayout"), this;\n    }\n  }, {\n    key: "setItems",\n    value: function setItems(t) {\n      var e = [];\n\n      var _iterator17 = _createForOfIteratorHelper(t),\n          _step17;\n\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var _i34 = _step17.value;\n          var _t51 = _i34.$trigger;\n\n          if (_t51) {\n            var _e27 = _t51.dataset || {};\n\n            _i34.src = _e27.src || _t51.getAttribute("href") || _i34.src, _i34.type = _e27.type || _i34.type, !_i34.src && _t51 instanceof HTMLImageElement && (_i34.src = _t51.currentSrc || _i34.$trigger.src);\n          }\n\n          var _s12 = _i34.$thumb;\n\n          if (!_s12) {\n            var _t52 = _i34.$trigger && _i34.$trigger.origTarget;\n\n            _t52 && (_s12 = _t52 instanceof HTMLImageElement ? _t52 : _t52.querySelector("img")), !_s12 && _i34.$trigger && (_s12 = _i34.$trigger instanceof HTMLImageElement ? _i34.$trigger : _i34.$trigger.querySelector("img"));\n          }\n\n          _i34.$thumb = _s12 || null;\n          var _o11 = _i34.thumb;\n          !_o11 && _s12 && (_o11 = _s12.currentSrc || _s12.src, !_o11 && _s12.dataset && (_o11 = _s12.dataset.lazySrc || _s12.dataset.src)), _o11 || "image" !== _i34.type || (_o11 = _i34.src), _i34.thumb = _o11 || null, _i34.caption = _i34.caption || "", e.push(_i34);\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n\n      this.items = e;\n    }\n  }, {\n    key: "initCarousel",\n    value: function initCarousel() {\n      var _this37 = this;\n\n      return this.Carousel = new y(this.$carousel, e(!0, {}, {\n        prefix: "",\n        classNames: {\n          viewport: "fancybox__viewport",\n          track: "fancybox__track",\n          slide: "fancybox__slide"\n        },\n        textSelection: !0,\n        preload: this.option("preload"),\n        friction: .88,\n        slides: this.items,\n        initialPage: this.options.startIndex,\n        slidesPerPage: 1,\n        infiniteX: this.option("infinite"),\n        infiniteY: !0,\n        l10n: this.option("l10n"),\n        Dots: !1,\n        Navigation: {\n          classNames: {\n            main: "fancybox__nav",\n            button: "carousel__button",\n            next: "is-next",\n            prev: "is-prev"\n          }\n        },\n        Panzoom: {\n          textSelection: !0,\n          panOnlyZoomed: function panOnlyZoomed() {\n            return _this37.Carousel && _this37.Carousel.pages && _this37.Carousel.pages.length < 2 && !_this37.options.dragToClose;\n          },\n          lockAxis: function lockAxis() {\n            if (_this37.Carousel) {\n              var _t53 = "x";\n              return _this37.options.dragToClose && (_t53 += "y"), _t53;\n            }\n          }\n        },\n        on: {\n          "*": function _(t) {\n            for (var _len6 = arguments.length, e = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n              e[_key6 - 1] = arguments[_key6];\n            }\n\n            return _this37.trigger.apply(_this37, ["Carousel.".concat(t)].concat(e));\n          },\n          init: function init(t) {\n            return _this37.Carousel = t;\n          },\n          createSlide: this.onCreateSlide\n        }\n      }, this.option("Carousel"))), this.option("dragToClose") && this.Carousel.Panzoom.on({\n        touchMove: this.onTouchMove,\n        afterTransform: this.onTransform,\n        touchEnd: this.onTouchEnd\n      }), this.trigger("initCarousel"), this;\n    }\n  }, {\n    key: "onCreateSlide",\n    value: function onCreateSlide(t, e) {\n      var i = e.caption || "";\n\n      if ("function" == typeof this.options.caption && (i = this.options.caption.call(this, this, this.Carousel, e)), "string" == typeof i && i.length) {\n        var _t54 = document.createElement("div"),\n            _s13 = "fancybox__caption_".concat(this.id, "_").concat(e.index);\n\n        _t54.className = "fancybox__caption", _t54.innerHTML = i, _t54.setAttribute("id", _s13), e.$caption = e.$el.appendChild(_t54), e.$el.classList.add("has-caption"), e.$el.setAttribute("aria-labelledby", _s13);\n      }\n    }\n  }, {\n    key: "onFocus",\n    value: function onFocus(t) {\n      this.focus(t);\n    }\n  }, {\n    key: "onClick",\n    value: function onClick(t) {\n      if (t.defaultPrevented) return;\n      if (t.target.closest(".fancybox__content")) return;\n      if (getSelection().toString().length) return;\n      if (!1 === this.trigger("click", t)) return;\n\n      switch (this.option("click")) {\n        case "close":\n          this.close();\n          break;\n\n        case "next":\n          this.next();\n      }\n    }\n  }, {\n    key: "onTouchMove",\n    value: function onTouchMove() {\n      var t = this.getSlide().Panzoom;\n      return !t || 1 === t.content.scale;\n    }\n  }, {\n    key: "onTouchEnd",\n    value: function onTouchEnd(t) {\n      var e = t.dragOffset.y;\n      Math.abs(e) >= 150 || Math.abs(e) >= 35 && t.dragOffset.time < 350 ? (this.option("hideClass") && (this.getSlide().hideClass = "fancybox-throwOut" + (t.content.y < 0 ? "Up" : "Down")), this.close()) : "y" === t.lockAxis && t.panTo({\n        y: 0\n      });\n    }\n  }, {\n    key: "onTransform",\n    value: function onTransform(t) {\n      if (this.$backdrop) {\n        var _e28 = Math.abs(t.content.y),\n            _i35 = _e28 < 1 ? "" : Math.max(.33, Math.min(1, 1 - _e28 / t.content.fitHeight * 1.5));\n\n        this.$container.style.setProperty("--fancybox-ts", _i35 ? "0s" : ""), this.$container.style.setProperty("--fancybox-opacity", _i35);\n      }\n    }\n  }, {\n    key: "onMousedown",\n    value: function onMousedown() {\n      document.body.classList.add("is-using-mouse");\n    }\n  }, {\n    key: "onKeydown",\n    value: function onKeydown(t) {\n      if (M.getInstance().id !== this.id) return;\n      document.body.classList.remove("is-using-mouse");\n      var e = t.key,\n          i = this.option("keyboard");\n      if (!i || t.ctrlKey || t.altKey || t.shiftKey) return;\n      var s = document.activeElement && document.activeElement.classList,\n          o = s && s.contains("carousel__button");\n\n      if ("Escape" !== e && !o) {\n        if (t.target.isContentEditable || -1 !== ["BUTTON", "TEXTAREA", "OPTION", "INPUT", "SELECT", "VIDEO"].indexOf(t.target.nodeName)) return;\n      }\n\n      if (!1 === this.trigger("keydown", e, t)) return;\n      var n = i[e];\n      "function" == typeof this[n] && this[n]();\n    }\n  }, {\n    key: "getSlide",\n    value: function getSlide() {\n      var t = this.Carousel;\n      if (!t) return null;\n      var e = null === t.page ? t.option("initialPage") : t.page,\n          i = t.pages || [];\n      return i.length && i[e] ? i[e].slides[0] : null;\n    }\n  }, {\n    key: "focus",\n    value: function focus(t) {\n      var e = function e(t) {\n        if (t) {\n          M.ignoreFocusChange = !0;\n\n          try {\n            t.setActive ? t.setActive() : M.preventScrollSupported ? t.focus({\n              preventScroll: !0\n            }) : t.focus();\n          } catch (t) {}\n\n          M.ignoreFocusChange = !1;\n        }\n      };\n\n      if (M.ignoreFocusChange) return;\n      if (["init", "closing", "customClosing", "destroy"].indexOf(this.state) > -1) return;\n      var i = this.getSlide().$el;\n      if (!i) return;\n      t && t.preventDefault();\n      var s = Array.from(this.$container.querySelectorAll(["a[href]", "area[href]", \'input:not([disabled]):not([type="hidden"]):not([aria-hidden])\', "select:not([disabled]):not([aria-hidden])", "textarea:not([disabled]):not([aria-hidden])", "button:not([disabled]):not([aria-hidden])", "iframe", "object", "embed", "video", "audio", "[contenteditable]", \'[tabindex]:not([tabindex^="-"]):not([disabled]):not([aria-hidden])\']));\n      var o,\n          n = [this.$container];\n\n      for (var _i36 = 0, _s14 = s; _i36 < _s14.length; _i36++) {\n        var _t55 = _s14[_i36];\n\n        var _e29 = i.contains(_t55);\n\n        !_t55.offsetParent || !_e29 && this.Carousel.$viewport.contains(_t55) ? (_t55.dataset.origTabindex = void 0 === _t55.dataset.origTabindex ? _t55.getAttribute("tabindex") : _t55.dataset.origTabindex, _t55.tabIndex = -1) : (n.push(_t55), void 0 !== _t55.dataset.origTabindex && (_t55.tabIndex = _t55.dataset.tabindex, _t55.removeAttribute("data-tabindex")), (_t55.hasAttribute("autoFocus") || !o && _e29) && (o = _t55));\n      }\n\n      if (n.indexOf(document.activeElement) > -1) this.lastFocus = document.activeElement;else if (t) {\n        if (!i.contains(document.activeElement)) {\n          if (this.lastFocus === n[1]) e(n[n.length - 1]);else {\n            var _t56 = n.indexOf(this.lastFocus);\n\n            _t56 < n.length - 2 ? e(n[_t56 + 1]) : e(n[0]);\n          }\n          this.lastFocus = document.activeElement;\n        }\n      } else e(o || n[0]);\n    }\n  }, {\n    key: "hideScrollbar",\n    value: function hideScrollbar() {\n      if (!b) return;\n      var t = window.innerWidth - document.documentElement.getBoundingClientRect().width,\n          e = "fancybox-style-noscroll";\n      var i = document.getElementById(e);\n      i || t > 0 && (i = document.createElement("style"), i.id = e, i.type = "text/css", i.innerHTML = ".compensate-for-scrollbar {padding-right: ".concat(t, "px;}"), document.getElementsByTagName("head")[0].appendChild(i), document.body.classList.add("compensate-for-scrollbar"));\n    }\n  }, {\n    key: "revealScrollbar",\n    value: function revealScrollbar() {\n      document.body.classList.remove("compensate-for-scrollbar");\n      var t = document.getElementById("fancybox-style-noscroll");\n      t && t.remove();\n    }\n  }, {\n    key: "clearContent",\n    value: function clearContent(t) {\n      this.Carousel.trigger("removeSlide", t), t.$content && (t.$content.remove(), t.$content = null), t.$closeButton && (t.$closeButton.remove(), t.$closeButton = null), t._className && t.$el.classList.remove(t._className);\n    }\n  }, {\n    key: "setContent",\n    value: function setContent(t, e) {\n      var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var s;\n      var o = t.$el;\n      if (e instanceof HTMLElement) ["img", "iframe", "video", "audio"].indexOf(e.nodeName.toLowerCase()) > -1 ? (s = document.createElement("div"), s.appendChild(e)) : s = e;else {\n        var _t57 = document.createRange().createContextualFragment(e);\n\n        s = document.createElement("div"), s.appendChild(_t57);\n      }\n      if (t.filter && !t.error && (s = s.querySelector(t.filter)), s instanceof Element) return t._className = "has-".concat(i.suffix || t.type || "unknown"), o.classList.add(t._className), s.classList.add("fancybox__content"), "none" !== s.style.display && "none" !== getComputedStyle(s).getPropertyValue("display") || (s.style.display = t.display || this.option("defaultDisplay") || "flex"), t.id && s.setAttribute("id", t.id), t.$content = s, o.prepend(s), this.manageCloseButton(t), "loading" !== t.state && this.revealContent(t), s;\n      this.setError(t, "{{ELEMENT_NOT_FOUND}}");\n    }\n  }, {\n    key: "manageCloseButton",\n    value: function manageCloseButton(t) {\n      var _this38 = this;\n\n      var e = void 0 === t.closeButton ? this.option("closeButton") : t.closeButton;\n      if (!e || "top" === e && this.$closeButton) return;\n      var i = document.createElement("button");\n      i.classList.add("carousel__button", "is-close"), i.setAttribute("title", this.options.l10n.CLOSE), i.innerHTML = this.option("template.closeButton"), i.addEventListener("click", function (t) {\n        return _this38.close(t);\n      }), "inside" === e ? (t.$closeButton && t.$closeButton.remove(), t.$closeButton = t.$content.appendChild(i)) : this.$closeButton = this.$container.insertBefore(i, this.$container.firstChild);\n    }\n  }, {\n    key: "revealContent",\n    value: function revealContent(t) {\n      var _this39 = this;\n\n      this.trigger("reveal", t), t.$content.style.visibility = "";\n      var e = !1;\n      t.error || "loading" === t.state || null !== this.Carousel.prevPage || t.index !== this.options.startIndex || (e = void 0 === t.showClass ? this.option("showClass") : t.showClass), e ? (t.state = "animating", this.animateCSS(t.$content, e, function () {\n        _this39.done(t);\n      })) : this.done(t);\n    }\n  }, {\n    key: "animateCSS",\n    value: function animateCSS(t, e, i) {\n      if (t && t.dispatchEvent(new CustomEvent("animationend", {\n        bubbles: !0,\n        cancelable: !0\n      })), !t || !e) return void ("function" == typeof i && i());\n\n      var s = function s(o) {\n        o.currentTarget === this && (t.removeEventListener("animationend", s), i && i(), t.classList.remove(e));\n      };\n\n      t.addEventListener("animationend", s), t.classList.add(e);\n    }\n  }, {\n    key: "done",\n    value: function done(t) {\n      t.state = "done", this.trigger("done", t);\n      var e = this.getSlide();\n      e && t.index === e.index && this.option("autoFocus") && this.focus();\n    }\n  }, {\n    key: "setError",\n    value: function setError(t, e) {\n      t.error = e, this.hideLoading(t), this.clearContent(t);\n      var i = document.createElement("div");\n      i.classList.add("fancybox-error"), i.innerHTML = this.localize(e || "<p>{{ERROR}}</p>"), this.setContent(t, i, {\n        suffix: "error"\n      });\n    }\n  }, {\n    key: "showLoading",\n    value: function showLoading(t) {\n      var _this40 = this;\n\n      t.state = "loading", t.$el.classList.add("is-loading");\n      var e = t.$el.querySelector(".fancybox__spinner");\n      e || (e = document.createElement("div"), e.classList.add("fancybox__spinner"), e.innerHTML = this.option("template.spinner"), e.addEventListener("click", function () {\n        _this40.Carousel.Panzoom.velocity || _this40.close();\n      }), t.$el.prepend(e));\n    }\n  }, {\n    key: "hideLoading",\n    value: function hideLoading(t) {\n      var e = t.$el && t.$el.querySelector(".fancybox__spinner");\n      e && (e.remove(), t.$el.classList.remove("is-loading")), "loading" === t.state && (this.trigger("load", t), t.state = "ready");\n    }\n  }, {\n    key: "next",\n    value: function next() {\n      var t = this.Carousel;\n      t && t.pages.length > 1 && t.slideNext();\n    }\n  }, {\n    key: "prev",\n    value: function prev() {\n      var t = this.Carousel;\n      t && t.pages.length > 1 && t.slidePrev();\n    }\n  }, {\n    key: "jumpTo",\n    value: function jumpTo() {\n      var _this$Carousel;\n\n      this.Carousel && (_this$Carousel = this.Carousel).slideTo.apply(_this$Carousel, arguments);\n    }\n  }, {\n    key: "close",\n    value: function close(t) {\n      var _this41 = this;\n\n      if (t && t.preventDefault(), ["closing", "customClosing", "destroy"].includes(this.state)) return;\n      if (!1 === this.trigger("shouldClose", t)) return;\n      if (this.state = "closing", this.Carousel.Panzoom.destroy(), this.detachEvents(), this.trigger("closing", t), "destroy" === this.state) return;\n      this.$container.setAttribute("aria-hidden", "true"), this.$container.classList.add("is-closing");\n      var e = this.getSlide();\n\n      if (this.Carousel.slides.forEach(function (t) {\n        t.$content && t.index !== e.index && _this41.Carousel.trigger("removeSlide", t);\n      }), "closing" === this.state) {\n        var _t58 = void 0 === e.hideClass ? this.option("hideClass") : e.hideClass;\n\n        this.animateCSS(e.$content, _t58, function () {\n          _this41.destroy();\n        }, !0);\n      }\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      if ("destroy" === this.state) return;\n      this.state = "destroy", this.trigger("destroy");\n      var t = this.option("placeFocusBack") ? this.getSlide().$trigger : null;\n      if (this.Carousel.destroy(), this.detachPlugins(), this.Carousel = null, this.options = {}, this.events = {}, this.$container.remove(), this.$container = this.$backdrop = this.$carousel = null, t) if (M.preventScrollSupported) t.focus({\n        preventScroll: !0\n      });else {\n        var _e30 = document.body.scrollTop;\n        t.focus(), document.body.scrollTop = _e30;\n      }\n      delete _[this.id];\n      var e = M.getInstance();\n      e ? e.focus() : (document.documentElement.classList.remove("with-fancybox"), document.body.classList.remove("is-using-mouse"), this.revealScrollbar());\n    }\n  }], [{\n    key: "show",\n    value: function show(t) {\n      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new M(t, e);\n    }\n  }, {\n    key: "fromEvent",\n    value: function fromEvent(t) {\n      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (t.defaultPrevented) return;\n      if (t.button && 0 !== t.button) return;\n      if (t.ctrlKey || t.metaKey || t.shiftKey) return;\n      var i,\n          s,\n          o,\n          n = t.target;\n\n      if ((n.matches("[data-fancybox-trigger]") || (n = n.closest("[data-fancybox-trigger]"))) && (i = n && n.dataset && n.dataset.fancyboxTrigger), i) {\n        var _t59 = document.querySelectorAll("[data-fancybox=\\"".concat(i, "\\"]")),\n            _e31 = parseInt(n.dataset.fancyboxIndex, 10) || 0;\n\n        n = _t59.length ? _t59[_e31] : n;\n      }\n\n      n || (n = t.target), Array.from(M.openers.keys()).reverse().some(function (e) {\n        o = n;\n        var i = !1;\n\n        try {\n          o instanceof Element && ("string" == typeof e || e instanceof String) && (i = o.matches(e) || (o = o.closest(e)));\n        } catch (t) {}\n\n        return !!i && (t.preventDefault(), s = e, !0);\n      });\n      var a = !1;\n\n      if (s) {\n        e.event = t, e.target = o, o.origTarget = t.target, a = M.fromOpener(s, e);\n\n        var _i37 = M.getInstance();\n\n        _i37 && "ready" === _i37.state && t.detail && document.body.classList.add("is-using-mouse");\n      }\n\n      return a;\n    }\n  }, {\n    key: "fromOpener",\n    value: function fromOpener(t) {\n      var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var s = [],\n          o = i.startIndex || 0,\n          n = i.target || null;\n      var a = void 0 === (i = e({}, i, M.openers.get(t))).groupAttr ? "data-fancybox" : i.groupAttr,\n          r = a && n && n.getAttribute("".concat(a)),\n          l = void 0 !== i.groupAll && i.groupAll;\n      if (l || r ? (s = [].slice.call(document.querySelectorAll(t)), l || (s = s.filter(function (t) {\n        return t.getAttribute("".concat(a)) === r;\n      }))) : s = [n], !s.length) return !1;\n      var h = M.getInstance();\n      return !(h && s.indexOf(h.options.$trigger) > -1) && (o = n ? s.indexOf(n) : o, s = s.map(function (t) {\n        var e = ["false", "0", "no", "null", "undefined"],\n            i = ["true", "1", "yes"],\n            s = Object.assign({}, t.dataset),\n            o = {};\n\n        for (var _i38 = 0, _Object$entries7 = Object.entries(s); _i38 < _Object$entries7.length; _i38++) {\n          var _Object$entries7$_i = _slicedToArray(_Object$entries7[_i38], 2),\n              _t60 = _Object$entries7$_i[0],\n              _n8 = _Object$entries7$_i[1];\n\n          if ("fancybox" !== _t60) if ("width" === _t60 || "height" === _t60) o["_".concat(_t60)] = _n8;else if ("string" == typeof _n8 || _n8 instanceof String) {\n            if (e.indexOf(_n8) > -1) o[_t60] = !1;else if (i.indexOf(o[_t60]) > -1) o[_t60] = !0;else try {\n              o[_t60] = JSON.parse(_n8);\n            } catch (e) {\n              o[_t60] = _n8;\n            }\n          } else o[_t60] = _n8;\n        }\n\n        return t instanceof Element && (o.$trigger = t), o;\n      }), new M(s, e({}, i, {\n        startIndex: o,\n        $trigger: n\n      })));\n    }\n  }, {\n    key: "bind",\n    value: function bind(t) {\n      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      function i() {\n        document.body.addEventListener("click", M.fromEvent, !1);\n      }\n\n      b && (M.openers.size || (/complete|interactive|loaded/.test(document.readyState) ? i() : document.addEventListener("DOMContentLoaded", i)), M.openers.set(t, e));\n    }\n  }, {\n    key: "unbind",\n    value: function unbind(t) {\n      M.openers.delete(t), M.openers.size || M.destroy();\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      var t;\n\n      for (; t = M.getInstance();) {\n        t.destroy();\n      }\n\n      M.openers = new Map(), document.body.removeEventListener("click", M.fromEvent, !1);\n    }\n  }, {\n    key: "getInstance",\n    value: function getInstance(t) {\n      if (t) return _[t];\n      return Object.values(_).reverse().find(function (t) {\n        return !["closing", "customClosing", "destroy"].includes(t.state) && t;\n      }) || null;\n    }\n  }, {\n    key: "close",\n    value: function close() {\n      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !0;\n      var e = null;\n\n      for (; e = M.getInstance();) {\n        if (e.close(), !t) return;\n      }\n    }\n  }]);\n\n  return M;\n}(h);\n\nM.version = "4.0.9", M.defaults = z, M.openers = new Map(), M.Plugins = k, M.bind("[data-fancybox]");\n\nfor (var _i39 = 0, _Object$entries8 = Object.entries(M.Plugins || {}); _i39 < _Object$entries8.length; _i39++) {\n  var _Object$entries8$_i = _slicedToArray(_Object$entries8[_i39], 2),\n      _t61 = _Object$entries8$_i[0],\n      _e32 = _Object$entries8$_i[1];\n\n  "function" == typeof _e32.create && _e32.create(M);\n}\n\n\n;// CONCATENATED MODULE: ./src/scripts/components/Submenu.js\nfunction Submenu_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Submenu_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Submenu_createClass(Constructor, protoProps, staticProps) { if (protoProps) Submenu_defineProperties(Constructor.prototype, protoProps); if (staticProps) Submenu_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Submenu = /*#__PURE__*/function () {\n  function Submenu(menus) {\n    var _this = this;\n\n    Submenu_classCallCheck(this, Submenu);\n\n    this._menus = menus;\n    this._menuContainers = this._menus.map(function (menu) {\n      return Array.from(menu.querySelectorAll(\'.menu__submenu\'));\n    }).flat();\n    this._menuLinks = this._menuContainers.map(function (menuContainer) {\n      return Array.from(menuContainer.querySelectorAll(\'.menu__link\'));\n    }).flat();\n    this._menuSubmenu = this._menuContainers.map(function (menuContainer) {\n      return Array.from(menuContainer.querySelectorAll(\'.submenu\'));\n    }).flat();\n\n    this.wrapperToggleSubmenu = function (e) {\n      return _this._toggleSubmenu.call(_this, e);\n    };\n\n    this.wrapperOpenLink = function (e) {\n      return _this._openLink.call(_this, e);\n    };\n  }\n\n  Submenu_createClass(Submenu, [{\n    key: "_toggleSubmenu",\n    value: function _toggleSubmenu(e) {\n      this._menus;\n\n      if (this._menuLinks.includes(e.target)) {\n        e.preventDefault();\n\n        this._deleteActive(e.target);\n\n        e.target.classList.toggle(\'active\');\n        e.target.nextElementSibling.classList.toggle(\'active\');\n      } else {\n        this._deleteActive(\'false\');\n      }\n    }\n  }, {\n    key: "_deleteActive",\n    value: function _deleteActive(link) {\n      if (link === \'false\') {\n        this._menuSubmenu.forEach(function (submenuItem) {\n          submenuItem.classList.remove(\'active\');\n        });\n\n        this._menuLinks.forEach(function (menuLink) {\n          menuLink.classList.remove(\'active\');\n        });\n      } else {\n        var otherLinks = this._menuLinks.filter(function (menuLink) {\n          return menuLink != link;\n        });\n\n        otherLinks.forEach(function (oherLink) {\n          oherLink.classList.remove(\'active\');\n          oherLink.nextElementSibling.classList.remove(\'active\');\n        });\n      }\n    }\n  }, {\n    key: "_openLink",\n    value: function _openLink(e) {\n      document.location.href = e.srcElement.href;\n    }\n  }, {\n    key: "setEventLister",\n    value: function setEventLister() {\n      var _this2 = this;\n\n      document.addEventListener(\'click\', this.wrapperToggleSubmenu);\n\n      this._menuLinks.forEach(function (link) {\n        link.addEventListener(\'dblclick\', _this2.wrapperOpenLink);\n      });\n    }\n  }]);\n\n  return Submenu;\n}();\n\n\n;// CONCATENATED MODULE: ./src/scripts/components/MenuSlider.js\nfunction MenuSlider_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction MenuSlider_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction MenuSlider_createClass(Constructor, protoProps, staticProps) { if (protoProps) MenuSlider_defineProperties(Constructor.prototype, protoProps); if (staticProps) MenuSlider_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar MenuSlider = /*#__PURE__*/function () {\n  function MenuSlider(container) {\n    var _this = this;\n\n    MenuSlider_classCallCheck(this, MenuSlider);\n\n    this.container = container;\n    this._nav = container.querySelector(\'.navigation\');\n    this._navsButton = Array.from(this._nav.querySelectorAll(\'[data-nav]\'));\n    this._selectSlider = container.querySelector(\'.navigation-select\');\n    this._selectSliderActive = this._selectSlider.querySelector(\'.navigation-select__selected\');\n    this._selectSliderItems = Array.from(this._selectSlider.querySelectorAll(\'.navigation-select__value\'));\n    this._sliders = Array.from(container.querySelectorAll(\'.carousel\'));\n\n    this.wrapperSelectedMenuSlider = function (e) {\n      return _this._selectedMenuSlider.call(_this, e);\n    };\n  }\n\n  MenuSlider_createClass(MenuSlider, [{\n    key: "_selectedMenuSlider",\n    value: function _selectedMenuSlider(e) {\n      this._selectSliderActive.textContent = e.target.textContent;\n\n      this._selectSliderActive.setAttribute(\'data-nav-active\', e.target.getAttribute(\'data-nav\'));\n\n      this._toggleButton(e.target.getAttribute(\'data-nav\'));\n\n      this._toggleSlider(e.target.getAttribute(\'data-nav\'));\n    }\n  }, {\n    key: "_toggleButton",\n    value: function _toggleButton(value) {\n      this._navsButton.forEach(function (navButton) {\n        if (navButton.getAttribute(\'data-nav\') != value) {\n          navButton.classList.remove(\'selected\');\n        } else {\n          navButton.classList.add(\'selected\');\n        }\n      });\n    }\n  }, {\n    key: "_toggleSlider",\n    value: function _toggleSlider(value) {\n      this._sliders.forEach(function (slider) {\n        if (slider.getAttribute(\'data-slider\') != value) {\n          slider.classList.add(\'hidden\');\n        } else {\n          slider.classList.remove(\'hidden\');\n        }\n      });\n    }\n  }, {\n    key: "setEventLister",\n    value: function setEventLister() {\n      var _this2 = this;\n\n      this._navsButton.forEach(function (navButton) {\n        navButton.addEventListener(\'click\', _this2.wrapperSelectedMenuSlider);\n      });\n\n      this._selectSliderItems.forEach(function (selectSliderItem) {\n        selectSliderItem.addEventListener(\'click\', _this2.wrapperSelectedMenuSlider);\n      });\n    }\n  }]);\n\n  return MenuSlider;\n}();\n\n\n;// CONCATENATED MODULE: ./src/pages/index.js\n/* provided dependency */ var pages_$ = __webpack_require__(563);\n\n\n\n\n\n\n/*Submenu*/\n\nvar menus = Array.from(document.querySelectorAll(\'.menu\'));\nvar submenu = new Submenu(menus);\nsubmenu.setEventLister();\n/* Mobile Menu */\n\nvar mobileMenuButton = document.querySelector(\'.button-menu\');\nvar mobileMenu = document.querySelector(\'.mobile-menu\');\nmobileMenuButton.addEventListener(\'click\', function (e) {\n  e.target.classList.toggle(\'opened\');\n  mobileMenu.classList.toggle(\'opened\');\n});\n/* completed-works */\n\nvar workSlider = document.querySelector(\'.completed-works\');\nvar runMenuSlider = new MenuSlider(workSlider);\nrunMenuSlider.setEventLister();\n/* navigation-select */\n\nvar navigationSelect = document.querySelector(\'.navigation-select\');\nvar navigationSelectButton = navigationSelect.querySelector(\'.navigation-select__selected\');\nvar navigationSelectList = navigationSelect.querySelector(\'.navigation-select__list\');\n\nvar toggleSelectList = function toggleSelectList() {\n  navigationSelectList.classList.toggle(\'open\');\n};\n\nvar closeSelectList = function closeSelectList() {\n  if (event.target != navigationSelect && event.target != navigationSelectButton && event.target != navigationSelectList) {\n    navigationSelectList.classList.remove(\'open\');\n  }\n};\n\nnavigationSelectButton.addEventListener(\'click\', toggleSelectList);\ndocument.addEventListener(\'click\', closeSelectList);\npages_$(document).ready(function () {\n  pages_$(".work-carousel").owlCarousel({\n    loop: true,\n    margin: 20,\n    responsiveClass: true,\n    navText: [\'&larr;\', \'&rarr;\'],\n    responsive: {\n      0: {\n        items: 1,\n        nav: true\n      },\n      800: {\n        items: 2,\n        nav: true,\n        dots: true\n      }\n    }\n  });\n  pages_$(".specialists__carousel").owlCarousel({\n    loop: true,\n    margin: 20,\n    responsiveClass: true,\n    navText: [\'&larr;\', \'&rarr;\'],\n    responsive: {\n      0: {\n        items: 1,\n        nav: true\n      },\n      600: {\n        items: 2,\n        nav: true\n      },\n      1000: {\n        items: 4,\n        nav: true\n      }\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///33\n')}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={id:Q,loaded:!1,exports:{}};return __webpack_modules__[Q].call(B.exports,B,B.exports,__webpack_require__),B.loaded=!0,B.exports}__webpack_require__.nmd=function(Q){return Q.paths=[],Q.children||(Q.children=[]),Q};var __webpack_exports__=__webpack_require__(33)})();